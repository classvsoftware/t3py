{
  "info": {
    "title": "T3 API",
    "version": "v2",
    "description": "## WHAT IS THIS?\n\nThis API is part of the [Track & Trace Tools](https://trackandtrace.tools) platform. The API allows you to programmatically access all your Metrc data that is available on metrc.com\n\nIt is not related to the Metrc 3rd party API, does not use Metrc API keys, and is not affiliated with Metrc.\n\nIf you're looking for where to get started, check out the [T3 Wiki API Getting Started guide](https://github.com/classvsoftware/t3-wiki/wiki/T3-API-:-Getting-Started).\n\nThe T3 API is subject to the [Track & Trace Tools Terms of Use](https://www.trackandtrace.tools/terms-of-use). \n\n## FREE API ACCESS (LIMITED)\n\nThe T3 API features a limited number of free endpoints available to anyone with a Metrc login.\n\nThese can be found in the [Free](#/Free) section.\n\n## FULL API ACCESS\n\nThere are two ways to get premium access to the T3 API:\n\n- **Subscribe to [T3+](https://trackandtrace.tools/plus)**\n\n*OR*\n\n- **Use a provided T3 API key (consulting clients only. [Reach out](mailto:matt@trackandtrace.tools) for more information.)**\n\n## AUTHENTICATION\n\nThe T3 API uses JSON Web Tokens (JWT) for request authentication. To obtain a JWT, use one of the following:\n\n- **metrc.com login credentials:**\n  - **hostname**: (The website you use to login to metrc: `ca.metrc.com`, `or.metrc.com`, etc.)\n  - **username**: Your Metrc username\n  - **password**: Your Metrc password\n  - **otp**: A one-time password used for 2-factor authentication (Only applies to Michigan users)\n\n*OR*\n\n- **T3 API key**\n\nRefer to the **Authentication** endpoints below for more information.\n\n## SECRET KEYS\n\nSome endpoints support the use of secret key authentication. This allows you to use simple URLs to access your Metrc data.\n\n### Usage\n\nPass the `secretKey` returned from the request in the query string:\n\n`?secretKey=<yourSecretKeyGoesHere>`\n\n### Generating Secret Keys\n\nRefer to the [/v2/auth/secretkey](#/Authentication/post_v2_auth_secretkey) endpoint for information on generating secret keys.\n\n[Secret Key Generation Tool](/v2/pages/secret-key)\n\n[Sync Link Creation Tool](/v2/pages/sync-link)\n\n## SECURITY\n\nThe T3 API interacts with Metrc in a similar manner to the [Track & Trace Tools](https://chromewebstore.google.com/detail/track-trace-tools/dfljickgkbfaoiifheibjpejloipegcb) Chrome extension. The API login process is designed with a strong emphasis on security. Your Metrc login details are never stored, and the API backend employs robust encryption methods to protect your temporary Metrc session.\n\n### Key Security Measures:\n\n- **Single-Use Login Credentials:** \n  - The T3 API uses your login credentials only once to authenticate with Metrc.\n  - After the Metrc login process is complete, your login credentials are immediately deleted from the system.\n  - You are required to enter your login credentials each time you access the T3 API, ensuring that your credentials are never stored.\n  \n- **Secure Temporary Session Storage:** \n  - The T3 API securely encrypts your logged-in Metrc session data. This data is only used when you make requests through the T3 API.\n  - The encrypted session data is automatically deleted after 24 hours, ensuring that your session information is not retained longer than necessary.\n\nFor any questions or concerns, please contact [matt@trackandtrace.tools](mailto:matt@trackandtrace.tools).\n\n## PRIVACY\n\nThe T3 API privacy model follows the same principles as the [Track & Trace Tools](https://chromewebstore.google.com/detail/track-trace-tools/dfljickgkbfaoiifheibjpejloipegcb) Chrome extension. The T3 API functions solely as a connector between you and Metrc, ensuring your privacy is protected.\n\n- **No Data Collection:** \n  - The T3 API does not record, save, harvest, inspect, or analyze any of your data.\n  - All data interactions are ephemeral and occur in real-time, without permanent storage.\n\n- **Secure and Private Access:** \n  - Your data is never shared with third parties. Unauthorized access to your login information or data is strictly prohibited.\n  - T3 employs industry-standard encryption protocols to safeguard all communications between the T3 API and Metrc.\n  \n- **User-Controlled Sessions:** \n  - Your Metrc login credentials and session are used exclusively by you. The T3 API will never initiate Metrc traffic without your explicit authorization.\n\n- **Compliance and Best Practices:**\n  - T3's privacy practices are aligned with applicable data protection regulations, including GDPR and CCPA, ensuring that your data rights are respected.\n\nThe T3 API is subject to the [Track & Trace Tools Privacy Policy](https://trackandtrace.tools/privacy-policy). For any privacy-related inquiries, please contact [matt@trackandtrace.tools](mailto:matt@trackandtrace.tools).\n\n## PERMISSIONS\n\nEach Metrc account has different permissions based on several factors:\n\n- Permissions granted by your Metrc admin\n- Class of license (manufacturing, cultivation, etc)\n- US state the license operates in\n\nUse the Permissions endpoints to determine which actions are available to you.\n\n## LICENSES\n\nView a list of all licenses available to the current user:\n\n`GET https://api.trackandtrace.tools/v2/licenses`\n\nOnly one license can be queried per request. Specify the target license with the required `licenseNumber` query parameter:\n\n`GET https://api.trackandtrace.tools/v2/items?licenseNumber=LIC-00001`\n\n## RATE LIMITING\n\nThe API has a global default request rate limit of 600 requests/minute/user. Some routes have lower rate limits.\n\n## COLLECTIONS\n\nAll data is queried as collections. There are no individual object endpoints.  For example, you cannot find an individual object using an endpoint like `/plants/{plantId}`, individual objects must be queried by filtering the collection endpoint `/plants` for the exact `plantId`. \n\nCollections are paginated, and can be filtered and sorted by individual object fields.\n\nThe JSON response object includes the following properties:\n- `data`: An array of objects, or any empty array\n- `page`: The requested page index\n- `pageSize`: The requested page size\n- `total`: The total number of items in this collection. Use this to determine how many pages are required to return the entire collection.\n\n### COLLECTION PAGINATION\n\nMetrc data collections are queried as pages. Use the `page` and `pageSize` query parameters to indicate which page should be returned.\n\nBy default, `page=1` and `pageSize=100`.\n\nExample: Return page 3 with a page size of 500:\n\n`GET https://api.trackandtrace.tools/v2/items?licenseNumber=LIC-00001&page=3&pageSize=500`\n\n### COLLECTION SORTING\n\nMetrc data collections can be sorted. Use the `sort` query parameter to indicate how the collection should be sorted.\n\nExample: Sort items by `name` descending:\n\n`GET https://api.trackandtrace.tools/v2/items?licenseNumber=LIC-00001&sort=name:desc`\n\n### COLLECTION FILTERING\n\nMetrc data collections can be filtered. Use one or more `filter` query parameters to indicate how filters should be applied.\n\nExample: Filter items that contain \"flower\" in the `name` field:\n\n`GET https://api.trackandtrace.tools/v2/items?licenseNumber=LIC-00001&filter:name__contains=flower`\n\nMultiple filters can be applied, and you can specify the logical operator (defaulting to \"and\"):\n\nExample: Filter items that contain \"flower\" in the `name` field OR \"kush\" in the `name` field:\n\n`GET https://api.trackandtrace.tools/v2/items?licenseNumber=LIC-00001&filter=name__contains:flower&filter=name__contains:kush&filterLogic=or`\n\n#### FILTERING STRINGS\n\nString fields support the following filter operators:\n\n- `contains`\n- `doesnotcontain`\n- `eq`\n- `neq`\n- `startswith`\n- `endswith`\n\nExample `?filter=name__contains:flower`\n\n**Note: all string filters are case-insensitive**\n\n#### FILTERING DATETIMES\n\nDatetime fields support the following filter operators:\n\n- `lt`\n- `lte`\n- `eq`\n- `neq`\n- `gt`\n- `gte`\n\nExample: `?filter=harvestedDate__gte:2024-07-17T20:26:07.117Z`\n\n**Note: all datetime filters use ISO8601 datetimes**\n\n#### FILTERING BOOLEANS\n\nBoolean fields support the following filter operators:\n\n- `eq`\n\nExample: `?filter=finished__eq:true`\n\n### LOADING FULL COLLECTIONS\n`pageSize` is limited to 500 in most cases, so you may need to load multiple pages if a license has a large number of packages.\n\nRefer to [this example](https://github.com/classvsoftware/t3-api/blob/master/load_all_active_packages.py) for how to load a full collection in a python script.\n\n## USING THE API\n\nThe API can be used in any way you like, but writing simple scripts to accomplish common tasks is an excellent way to take advantage of it.\n\nThe full OpenAPI spec, which can be imported into Postman, can be found here: [/v2/spec/openapi.json](/v2/spec/openapi.json)\n\n[**Lots** of example scripts that show how the use the T3 API can be found here](https://github.com/classvsoftware/t3-api)\n\n## CONTACT\n\n- **Responsible Organization:** Class V LLC\n- **Responsible Developer:** Matt Frisbie\n- **Email:** [matt@trackandtrace.tools](mailto:matt@trackandtrace.tools)\n- **URL:** [https://trackandtrace.tools](https://trackandtrace.tools)\n- **Terms of Use:** [https://www.trackandtrace.tools/terms-of-use](https://www.trackandtrace.tools/terms-of-use)\n"
  },
  "paths": {
    "/v2/auth/credentials": {
      "post": {
        "summary": "Authenticate with Metrc credentials",
        "description": "**A T3+ subscription is not required to use this endpoint**\n",
        "requestBody": {
          "description": "JSON object containing your Metrc login details\n\nNote: The `otp` field is only needed if you are authenticating in Michigan. Otherwise, omit this property.\n",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "username": {
                    "type": "string",
                    "description": "Your Metrc username",
                    "example": "johndoe"
                  },
                  "password": {
                    "type": "string",
                    "description": "Your Metrc password",
                    "example": "secretpassword"
                  },
                  "hostname": {
                    "type": "string",
                    "description": "The Metrc hostname you use to login. For example, a California user would use ca.metrc.com.",
                    "enum": [
                      "ak.metrc.com",
                      "al.metrc.com",
                      "ca.metrc.com",
                      "co.metrc.com",
                      "il.metrc.com",
                      "ky.metrc.com",
                      "la.metrc.com",
                      "ma.metrc.com",
                      "md.metrc.com",
                      "me.metrc.com",
                      "mi.metrc.com",
                      "mn.metrc.com",
                      "mo.metrc.com",
                      "ms.metrc.com",
                      "mt.metrc.com",
                      "nj.metrc.com",
                      "nv.metrc.com",
                      "oh.metrc.com",
                      "ok.metrc.com",
                      "or.metrc.com",
                      "sd.metrc.com",
                      "wv.metrc.com"
                    ],
                    "example": "ca.metrc.com"
                  },
                  "otp": {
                    "type": "string",
                    "nullable": true,
                    "description": "(MI only) a valid one-time password",
                    "example": 123456
                  }
                },
                "required": [
                  "username",
                  "password",
                  "hostname"
                ],
                "additionalProperties": false
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Your JWT access token",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "accessToken": {
                      "type": "string",
                      "description": "A JSON web token used to send authenticated API requests",
                      "example": "eyJhbGciOiJSUzI1NiIsImtpZCI6IjE2ODciLCJ0eXAiOiJKV1QifQ.eyJpc3MiOiJodHRwczovL2V4YW1wbGUuY29tIiwic3ViIjoiMTIzNDU2Nzg5MCIsIm5hbWUiOiJKYW5lIERvZSIsImF1ZCI6Imh0dHBzOi8vZXhhbXBsZS5jb20vYXBpIiwiZXhwIjoxNjA5MzYwMDAwfQ.Q8B8u5h5wvxgK3xN-zsmBbs3_HwPkjFz8wq_Fk2JYfw"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Authentication",
          "Free"
        ],
        "security": []
      }
    },
    "/v2/auth/apikey": {
      "post": {
        "summary": "Authenticate with a T3 API key",
        "description": "**Note: This route is for clients that have been provided an API key.**\n\n**If you are not a consulting client, you should not use this endpoint.** Use the `/auth/credentials` endpoint instead.\n",
        "requestBody": {
          "description": "JSON object containing your API key authentication details\n",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "apiKey": {
                    "type": "string",
                    "description": "Your T3 API key",
                    "example": "e829nde3l87ks9d832gfdavhg450d9mw"
                  },
                  "stateCode": {
                    "type": "string",
                    "description": "The state code for the hostname you want to authenticate in",
                    "example": "CA"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Your JWT access token",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "accessToken": {
                      "type": "string",
                      "description": "A JSON web token used to send authenticated API requests",
                      "example": "eyJhbGciOiJSUzI1NiIsImtpZCI6IjE2ODciLCJ0eXAiOiJKV1QifQ.eyJpc3MiOiJodHRwczovL2V4YW1wbGUuY29tIiwic3ViIjoiMTIzNDU2Nzg5MCIsIm5hbWUiOiJKYW5lIERvZSIsImF1ZCI6Imh0dHBzOi8vZXhhbXBsZS5jb20vYXBpIiwiZXhwIjoxNjA5MzYwMDAwfQ.Q8B8u5h5wvxgK3xN-zsmBbs3_HwPkjFz8wq_Fk2JYfw"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Authentication"
        ],
        "security": []
      }
    },
    "/v2/auth/whoami": {
      "get": {
        "summary": "Returns information about the authenticated user",
        "responses": {
          "200": {
            "description": "Your JWT access token",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "authMode": {
                      "type": "string",
                      "example": "CREDENTIALS"
                    },
                    "credentialKey": {
                      "type": "string",
                      "example": "mo.metrc.com__MyMetrcUsername"
                    },
                    "hasT3plus": {
                      "type": "boolean",
                      "example": true
                    },
                    "username": {
                      "type": "string",
                      "example": "MyMetrcUsername"
                    },
                    "hostname": {
                      "type": "string",
                      "example": "mo.metrc.com"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Authentication",
          "Free"
        ]
      }
    },
    "/v2/auth/secretkey": {
      "post": {
        "summary": "Generate a secret key that can be used for special T3 routes that support secrey key authentication.",
        "description": "**Note: generating a new secret key will invalidate all previously generated keys** \n\nThe T3 API includes a page for generating secret keys [here](/v2/pages/secret-key)\n",
        "requestBody": {
          "description": "JSON object containing your Metrc secret key details\n\nNote: The `otpSeed` field is only needed if you are authenticating in Michigan. Otherwise, omit this property.\n",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "username": {
                    "type": "string",
                    "description": "Your Metrc username",
                    "example": "johndoe"
                  },
                  "password": {
                    "type": "string",
                    "description": "Your Metrc password",
                    "example": "secretpassword"
                  },
                  "hostname": {
                    "type": "string",
                    "description": "The Metrc hostname you use to login. For example, a California user would use ca.metrc.com.",
                    "enum": [
                      "ak.metrc.com",
                      "al.metrc.com",
                      "ca.metrc.com",
                      "co.metrc.com",
                      "il.metrc.com",
                      "ky.metrc.com",
                      "la.metrc.com",
                      "ma.metrc.com",
                      "md.metrc.com",
                      "me.metrc.com",
                      "mi.metrc.com",
                      "mn.metrc.com",
                      "mo.metrc.com",
                      "ms.metrc.com",
                      "mt.metrc.com",
                      "nj.metrc.com",
                      "nv.metrc.com",
                      "oh.metrc.com",
                      "ok.metrc.com",
                      "or.metrc.com",
                      "sd.metrc.com",
                      "wv.metrc.com"
                    ],
                    "example": "ca.metrc.com"
                  },
                  "otpSeed": {
                    "type": "string",
                    "description": "(MI only) the seed string for your Metrc multi-factor authentication",
                    "example": "J3G5KD9W8ZT2LV6X"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Your secret key",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "secretKey": {
                      "type": "string",
                      "description": "The generated secret key",
                      "example": "2616ec56-fa2a-4c5b-86c0-acacf23c9ef7"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Authentication",
          "Reports"
        ],
        "security": []
      }
    },
    "/v2/licenses": {
      "get": {
        "summary": "List of accessible licenses",
        "description": "**A T3+ subscription is not required to use this endpoint**\n",
        "responses": {
          "200": {
            "description": "A list of accessible Metrc licenses",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "properties": {
                      "licenseName": {
                        "type": "string",
                        "description": "The facility name for this license",
                        "example": "Stinky Farms"
                      },
                      "licenseNumber": {
                        "type": "string",
                        "description": "The license number",
                        "example": "LIC-00001"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Licenses",
          "Free"
        ]
      }
    },
    "/v2/states": {
      "get": {
        "summary": "List of accessible states",
        "description": "**A T3+ subscription is not required to use this endpoint**\n",
        "responses": {
          "200": {
            "description": "A list of accessible Metrc states",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "properties": {
                      "abbreviation": {
                        "type": "string",
                        "description": "The state abbreviation",
                        "example": "CA"
                      },
                      "name": {
                        "type": "string",
                        "description": "The state name",
                        "example": "California"
                      },
                      "hostname": {
                        "type": "string",
                        "description": "The Metrc hostname for this state",
                        "example": "ca.metrc.com"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "States",
          "Free"
        ]
      }
    },
    "/v2/items": {
      "get": {
        "summary": "List of active items",
        "responses": {
          "200": {
            "description": "A list of active items for this license",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/Pagination"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/MetrcItem"
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "licenseNumber",
            "description": "The unique identifier for the license associated with this request.",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "example": "LIC-00001"
            }
          },
          {
            "name": "page",
            "description": "The index of the page to be returned.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 1,
              "example": 1
            }
          },
          {
            "name": "pageSize",
            "description": "The number of objects per page to be returned.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 100,
              "example": 100
            }
          },
          {
            "name": "strictPagination",
            "description": "Toggles strict pagination. Defaults to `false` (disabled)\n\n  - If enabled, requesting an out of bounds page will throw a 400. \n  - If disabled, requesting an out of bounds page will return a 200 and an empty page.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false,
              "example": true
            }
          },
          {
            "description": "Defines the collection sort order.",
            "name": "sort",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string",
              "example": "label:asc"
            }
          },
          {
            "name": "filterLogic",
            "description": "Describes how the filters, if any, should be applied",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "and",
                "or"
              ],
              "default": "and",
              "example": "and"
            }
          },
          {
            "description": "One or more collection filters.",
            "name": "filter",
            "in": "query",
            "required": false,
            "schema": {
              "type": "array",
              "example": "label__endswith:0003",
              "items": {
                "type": "string"
              }
            },
            "style": "form",
            "explode": true
          }
        ],
        "tags": [
          "Items"
        ]
      }
    },
    "/v2/items/history": {
      "get": {
        "summary": "List of item history objects for a single item",
        "responses": {
          "200": {
            "description": "A list of history objects for the specified item.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/Pagination"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/MetrcHistory"
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "The item with id={itemId} was not found in the specified license"
          }
        },
        "parameters": [
          {
            "name": "licenseNumber",
            "description": "The unique identifier for the license associated with this request.",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "example": "LIC-00001"
            }
          },
          {
            "name": "itemId",
            "description": "ID of the target item",
            "in": "query",
            "required": true,
            "schema": {
              "type": "number",
              "example": 123
            }
          },
          {
            "name": "page",
            "description": "The index of the page to be returned.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 1,
              "example": 1
            }
          },
          {
            "name": "pageSize",
            "description": "The number of objects per page to be returned.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 100,
              "example": 100
            }
          },
          {
            "name": "strictPagination",
            "description": "Toggles strict pagination. Defaults to `false` (disabled)\n\n  - If enabled, requesting an out of bounds page will throw a 400. \n  - If disabled, requesting an out of bounds page will return a 200 and an empty page.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false,
              "example": true
            }
          },
          {
            "description": "Defines the collection sort order.",
            "name": "sort",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string",
              "example": "label:asc"
            }
          },
          {
            "name": "filterLogic",
            "description": "Describes how the filters, if any, should be applied",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "and",
                "or"
              ],
              "default": "and",
              "example": "and"
            }
          },
          {
            "description": "One or more collection filters.",
            "name": "filter",
            "in": "query",
            "required": false,
            "schema": {
              "type": "array",
              "example": "label__endswith:0003",
              "items": {
                "type": "string"
              }
            },
            "style": "form",
            "explode": true
          }
        ],
        "tags": [
          "Items",
          "Single Item",
          "History"
        ]
      }
    },
    "/v2/items/discontinue": {
      "post": {
        "summary": "Discontinue one item",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "integer",
                    "description": "The item ID",
                    "example": 12345
                  }
                },
                "required": [
                  "id"
                ],
                "additionalProperties": false
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The operation completed successfully.\n",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "type": "string",
                      "description": "Describes the nature of this successful operation\n- \"Success\" indicates the request passed validation and was successfully passed to Metrc\n- \"Dry run\" indicates the request passed validation, but the request was not sent to Metrc\n",
                      "example": "Success"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "An error response indicating the request was invalid. Refer to the response body for details.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "object",
                      "properties": {
                        "type": {
                          "type": "string",
                          "example": "BadRequest"
                        },
                        "message": {
                          "type": "string",
                          "example": "400 Bad Request: Invalid request body: 'note' is a required property"
                        },
                        "timestamp": {
                          "type": "string",
                          "format": "date-time",
                          "example": "2024-08-09T12:34:56.789Z"
                        },
                        "url": {
                          "type": "string",
                          "example": "https://api.trackandtrace.tools/some-endpoint"
                        },
                        "status_code": {
                          "type": "integer",
                          "example": 400
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "An error response indicating the server experienced an unexpected error.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "object",
                      "properties": {
                        "type": {
                          "type": "string",
                          "example": "InternalServerError"
                        },
                        "message": {
                          "type": "string",
                          "example": "500 InternalServerError"
                        },
                        "timestamp": {
                          "type": "string",
                          "format": "date-time",
                          "example": "2024-08-09T12:34:56.789Z"
                        },
                        "url": {
                          "type": "string",
                          "example": "https://api.trackandtrace.tools/some-endpoint"
                        },
                        "status_code": {
                          "type": "integer",
                          "example": 500
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "503": {
            "description": "An error response indicating the Metrc servers are experiencing downtime.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "object",
                      "properties": {
                        "type": {
                          "type": "string",
                          "example": "ServiceUnavailable"
                        },
                        "message": {
                          "type": "string",
                          "example": "503 ServiceUnavailable"
                        },
                        "timestamp": {
                          "type": "string",
                          "format": "date-time",
                          "example": "2024-08-09T12:34:56.789Z"
                        },
                        "url": {
                          "type": "string",
                          "example": "https://api.trackandtrace.tools/some-endpoint"
                        },
                        "status_code": {
                          "type": "integer",
                          "example": 503
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "licenseNumber",
            "description": "The unique identifier for the license associated with this request.",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "example": "LIC-00001"
            }
          },
          {
            "name": "submit",
            "in": "query",
            "required": false,
            "description": "Controls whether this request should be forwarded to Metrc.\n- **If present and set to 'true'**: The request will be validated and forwarded to Metrc if validation passes.\n- **If omitted or set to any value other than 'true'**: The request will only be validated.\nExamples:\n  - \"true\": Forward the request to Metrc\n  - \"false\": Execute a dry run\n",
            "schema": {
              "type": "string",
              "example": "true"
            }
          }
        ],
        "tags": [
          "Items",
          "Modify Items"
        ]
      }
    },
    "/v2/items/report": {
      "get": {
        "summary": "Generate a report of all active items",
        "description": "**Note: this endpoint supports secret key authentication.**\n",
        "responses": {
          "200": {
            "description": "A list of active items for this license",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "generatedAt": {
                      "type": "string",
                      "format": "date-time",
                      "example": "2024-07-25T00:00:00+00:00"
                    },
                    "filters": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "example": [
                        "name__contains:kush"
                      ]
                    },
                    "filterLogic": {
                      "type": "string",
                      "description": "The filter logic specified for this report, if any",
                      "example": "and",
                      "nullable": true
                    },
                    "sort": {
                      "type": "string",
                      "description": "The sort order specified for this report, if any",
                      "example": "name:asc",
                      "nullable": true
                    },
                    "licenseNumber": {
                      "type": "string",
                      "description": "The unique identifier for the license associated with this request.",
                      "example": "LIC-00001"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/MetrcItem"
                      }
                    }
                  }
                }
              },
              "text/csv": {
                "schema": {
                  "type": "string",
                  "example": "name,productCategoryName,productCategoryTypeName,strainName\nOG Kush 3.5g Prepack,Bud/Flower (Final Packaging),Buds,OG Kush\nCheetah Piss 3.5g Prepack,Bud/Flower (Final Packaging),Buds,Cheetah Piss"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "licenseNumber",
            "description": "The unique identifier for the license associated with this request.",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "example": "LIC-00001"
            }
          },
          {
            "name": "secretKey",
            "description": "Your secret key, if you wish to authenticate via query params. Secret keys can be manually generated [here](/v2/pages/secret-key).\n",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "example": "2616ec56-fa2a-4c5b-86c0-acacf23c9ef7"
            }
          },
          {
            "name": "filterLogic",
            "description": "Describes how the filters, if any, should be applied",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "and",
                "or"
              ],
              "default": "and",
              "example": "and"
            }
          },
          {
            "name": "contentType",
            "description": "Specifies how the report should be formatted. Can be returned as json or csv.\n*This can also be defined in the Content-Type header*\n",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "json",
                "csv"
              ],
              "default": "json",
              "example": "json"
            }
          },
          {
            "name": "prependCsvMetadata",
            "description": "Controls if the CSV header metadata should be included in the output.\nWhen set to false, only the column headers and data will be returned.\n",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "true",
                "false"
              ],
              "default": "true",
              "example": "true"
            }
          },
          {
            "description": "Defines the collection sort order.",
            "name": "sort",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string",
              "example": "label:asc"
            }
          },
          {
            "description": "One or more collection filters.",
            "name": "filter",
            "in": "query",
            "required": false,
            "schema": {
              "type": "array",
              "example": "label__endswith:0003",
              "items": {
                "type": "string"
              }
            },
            "style": "form",
            "explode": true
          },
          {
            "name": "fieldnames",
            "description": "Defines which item fields should appear in the report data.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "default": "name,productCategoryName,productCategoryTypeName,strainName",
              "example": "name,productCategoryName,productCategoryTypeName,strainName"
            }
          }
        ],
        "tags": [
          "Items",
          "Reports"
        ]
      }
    },
    "/v2/packages/active": {
      "get": {
        "summary": "List of active packages",
        "responses": {
          "200": {
            "description": "A list of active packages for this license",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/Pagination"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/MetrcSuperpackage"
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "licenseNumber",
            "description": "The unique identifier for the license associated with this request.",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "example": "LIC-00001"
            }
          },
          {
            "name": "page",
            "description": "The index of the page to be returned.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 1,
              "example": 1
            }
          },
          {
            "name": "pageSize",
            "description": "The number of objects per page to be returned.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 100,
              "example": 100
            }
          },
          {
            "description": "Defines the collection sort order.",
            "name": "sort",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string",
              "example": "label:asc"
            }
          },
          {
            "description": "One or more collection filters.",
            "name": "filter",
            "in": "query",
            "required": false,
            "schema": {
              "type": "array",
              "example": "label__endswith:0003",
              "items": {
                "type": "string"
              }
            },
            "style": "form",
            "explode": true
          },
          {
            "name": "filterLogic",
            "description": "Describes how the filters, if any, should be applied",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "and",
                "or"
              ],
              "default": "and",
              "example": "and"
            }
          },
          {
            "name": "strictPagination",
            "description": "Toggles strict pagination. Defaults to `false` (disabled)\n\n  - If enabled, requesting an out of bounds page will throw a 400. \n  - If disabled, requesting an out of bounds page will return a 200 and an empty page.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false,
              "example": true
            }
          }
        ],
        "tags": [
          "Packages"
        ]
      }
    },
    "/v2/packages/onhold": {
      "get": {
        "summary": "List of on hold packages",
        "responses": {
          "200": {
            "description": "A list of on hold packages for this license",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/Pagination"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/MetrcSuperpackage"
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "licenseNumber",
            "description": "The unique identifier for the license associated with this request.",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "example": "LIC-00001"
            }
          },
          {
            "name": "page",
            "description": "The index of the page to be returned.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 1,
              "example": 1
            }
          },
          {
            "name": "pageSize",
            "description": "The number of objects per page to be returned.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 100,
              "example": 100
            }
          },
          {
            "name": "strictPagination",
            "description": "Toggles strict pagination. Defaults to `false` (disabled)\n\n  - If enabled, requesting an out of bounds page will throw a 400. \n  - If disabled, requesting an out of bounds page will return a 200 and an empty page.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false,
              "example": true
            }
          },
          {
            "description": "Defines the collection sort order.",
            "name": "sort",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string",
              "example": "label:asc"
            }
          },
          {
            "name": "filterLogic",
            "description": "Describes how the filters, if any, should be applied",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "and",
                "or"
              ],
              "default": "and",
              "example": "and"
            }
          },
          {
            "description": "One or more collection filters.",
            "name": "filter",
            "in": "query",
            "required": false,
            "schema": {
              "type": "array",
              "example": "label__endswith:0003",
              "items": {
                "type": "string"
              }
            },
            "style": "form",
            "explode": true
          }
        ],
        "tags": [
          "Packages"
        ]
      }
    },
    "/v2/packages/inactive": {
      "get": {
        "summary": "List of inactive packages",
        "responses": {
          "200": {
            "description": "A list of inactive packages for this license",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/Pagination"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/MetrcSuperpackage"
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "licenseNumber",
            "description": "The unique identifier for the license associated with this request.",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "example": "LIC-00001"
            }
          },
          {
            "name": "page",
            "description": "The index of the page to be returned.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 1,
              "example": 1
            }
          },
          {
            "name": "pageSize",
            "description": "The number of objects per page to be returned.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 100,
              "example": 100
            }
          },
          {
            "name": "strictPagination",
            "description": "Toggles strict pagination. Defaults to `false` (disabled)\n\n  - If enabled, requesting an out of bounds page will throw a 400. \n  - If disabled, requesting an out of bounds page will return a 200 and an empty page.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false,
              "example": true
            }
          },
          {
            "description": "Defines the collection sort order.",
            "name": "sort",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string",
              "example": "label:asc"
            }
          },
          {
            "name": "filterLogic",
            "description": "Describes how the filters, if any, should be applied",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "and",
                "or"
              ],
              "default": "and",
              "example": "and"
            }
          },
          {
            "description": "One or more collection filters.",
            "name": "filter",
            "in": "query",
            "required": false,
            "schema": {
              "type": "array",
              "example": "label__endswith:0003",
              "items": {
                "type": "string"
              }
            },
            "style": "form",
            "explode": true
          }
        ],
        "tags": [
          "Packages"
        ]
      }
    },
    "/v2/packages/intransit": {
      "get": {
        "summary": "List of in transit packages",
        "responses": {
          "200": {
            "description": "A list of in transit packages for this license",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/Pagination"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/MetrcSuperpackage"
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "licenseNumber",
            "description": "The unique identifier for the license associated with this request.",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "example": "LIC-00001"
            }
          },
          {
            "name": "page",
            "description": "The index of the page to be returned.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 1,
              "example": 1
            }
          },
          {
            "name": "pageSize",
            "description": "The number of objects per page to be returned.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 100,
              "example": 100
            }
          },
          {
            "name": "strictPagination",
            "description": "Toggles strict pagination. Defaults to `false` (disabled)\n\n  - If enabled, requesting an out of bounds page will throw a 400. \n  - If disabled, requesting an out of bounds page will return a 200 and an empty page.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false,
              "example": true
            }
          },
          {
            "description": "Defines the collection sort order.",
            "name": "sort",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string",
              "example": "label:asc"
            }
          },
          {
            "name": "filterLogic",
            "description": "Describes how the filters, if any, should be applied",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "and",
                "or"
              ],
              "default": "and",
              "example": "and"
            }
          },
          {
            "description": "One or more collection filters.",
            "name": "filter",
            "in": "query",
            "required": false,
            "schema": {
              "type": "array",
              "example": "label__endswith:0003",
              "items": {
                "type": "string"
              }
            },
            "style": "form",
            "explode": true
          }
        ],
        "tags": [
          "Packages"
        ]
      }
    },
    "/v2/packages/transferred": {
      "get": {
        "summary": "List of transferred packages",
        "description": "\n**Note: this return type is different from the other package endpoints**\n",
        "responses": {
          "200": {
            "description": "A list of transferred packages for this license",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/Pagination"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/MetrcDeliveryPackage"
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "licenseNumber",
            "description": "The unique identifier for the license associated with this request.",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "example": "LIC-00001"
            }
          },
          {
            "name": "page",
            "description": "The index of the page to be returned.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 1,
              "example": 1
            }
          },
          {
            "name": "pageSize",
            "description": "The number of objects per page to be returned.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 100,
              "example": 100
            }
          },
          {
            "name": "strictPagination",
            "description": "Toggles strict pagination. Defaults to `false` (disabled)\n\n  - If enabled, requesting an out of bounds page will throw a 400. \n  - If disabled, requesting an out of bounds page will return a 200 and an empty page.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false,
              "example": true
            }
          },
          {
            "description": "Defines the collection sort order.",
            "name": "sort",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string",
              "example": "label:asc"
            }
          },
          {
            "name": "filterLogic",
            "description": "Describes how the filters, if any, should be applied",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "and",
                "or"
              ],
              "default": "and",
              "example": "and"
            }
          },
          {
            "description": "One or more collection filters.",
            "name": "filter",
            "in": "query",
            "required": false,
            "schema": {
              "type": "array",
              "example": "label__endswith:0003",
              "items": {
                "type": "string"
              }
            },
            "style": "form",
            "explode": true
          }
        ],
        "tags": [
          "Packages"
        ]
      }
    },
    "/v2/packages/history": {
      "get": {
        "summary": "List of package history objects for a single package",
        "responses": {
          "200": {
            "description": "A list of history objects for the specified package.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/Pagination"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/MetrcHistory"
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "The package with id={packageId} was not found in the specified license"
          }
        },
        "parameters": [
          {
            "name": "licenseNumber",
            "description": "The unique identifier for the license associated with this request.",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "example": "LIC-00001"
            }
          },
          {
            "name": "packageId",
            "description": "ID of the target package",
            "in": "query",
            "required": true,
            "schema": {
              "type": "number",
              "example": 123
            }
          },
          {
            "name": "page",
            "description": "The index of the page to be returned.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 1,
              "example": 1
            }
          },
          {
            "name": "pageSize",
            "description": "The number of objects per page to be returned.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 100,
              "example": 100
            }
          },
          {
            "name": "strictPagination",
            "description": "Toggles strict pagination. Defaults to `false` (disabled)\n\n  - If enabled, requesting an out of bounds page will throw a 400. \n  - If disabled, requesting an out of bounds page will return a 200 and an empty page.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false,
              "example": true
            }
          },
          {
            "description": "Defines the collection sort order.",
            "name": "sort",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string",
              "example": "label:asc"
            }
          },
          {
            "name": "filterLogic",
            "description": "Describes how the filters, if any, should be applied",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "and",
                "or"
              ],
              "default": "and",
              "example": "and"
            }
          },
          {
            "description": "One or more collection filters.",
            "name": "filter",
            "in": "query",
            "required": false,
            "schema": {
              "type": "array",
              "example": "label__endswith:0003",
              "items": {
                "type": "string"
              }
            },
            "style": "form",
            "explode": true
          }
        ],
        "tags": [
          "Packages",
          "Single Package",
          "History"
        ]
      }
    },
    "/v2/packages/labresults": {
      "get": {
        "summary": "List of package lab result objects for a single package",
        "responses": {
          "200": {
            "description": "A list of package lab result objects for the specified package.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/Pagination"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/MetrcPackageLabResult"
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "The package with id={packageId} was not found in the specified license"
          }
        },
        "parameters": [
          {
            "name": "licenseNumber",
            "description": "The unique identifier for the license associated with this request.",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "example": "LIC-00001"
            }
          },
          {
            "name": "packageId",
            "description": "ID of the target package",
            "in": "query",
            "required": true,
            "schema": {
              "type": "number",
              "example": 123
            }
          },
          {
            "name": "page",
            "description": "The index of the page to be returned.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 1,
              "example": 1
            }
          },
          {
            "name": "pageSize",
            "description": "The number of objects per page to be returned.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 100,
              "example": 100
            }
          },
          {
            "name": "strictPagination",
            "description": "Toggles strict pagination. Defaults to `false` (disabled)\n\n  - If enabled, requesting an out of bounds page will throw a 400. \n  - If disabled, requesting an out of bounds page will return a 200 and an empty page.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false,
              "example": true
            }
          },
          {
            "description": "Defines the collection sort order.",
            "name": "sort",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string",
              "example": "label:asc"
            }
          },
          {
            "name": "filterLogic",
            "description": "Describes how the filters, if any, should be applied",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "and",
                "or"
              ],
              "default": "and",
              "example": "and"
            }
          },
          {
            "description": "One or more collection filters.",
            "name": "filter",
            "in": "query",
            "required": false,
            "schema": {
              "type": "array",
              "example": "label__endswith:0003",
              "items": {
                "type": "string"
              }
            },
            "style": "form",
            "explode": true
          }
        ],
        "tags": [
          "Packages",
          "Single Package",
          "Lab Results"
        ]
      }
    },
    "/v2/packages/labresult-batches": {
      "get": {
        "summary": "List of package lab result batch objects for a single package",
        "responses": {
          "200": {
            "description": "A list of package lab result batch objects for the specified package.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/Pagination"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/MetrcPackageLabResultBatch"
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "The package with id={packageId} was not found in the specified license"
          }
        },
        "parameters": [
          {
            "name": "licenseNumber",
            "description": "The unique identifier for the license associated with this request.",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "example": "LIC-00001"
            }
          },
          {
            "name": "packageId",
            "description": "ID of the target package",
            "in": "query",
            "required": true,
            "schema": {
              "type": "number",
              "example": 123
            }
          },
          {
            "name": "page",
            "description": "The index of the page to be returned.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 1,
              "example": 1
            }
          },
          {
            "name": "pageSize",
            "description": "The number of objects per page to be returned.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 100,
              "example": 100
            }
          },
          {
            "name": "strictPagination",
            "description": "Toggles strict pagination. Defaults to `false` (disabled)\n\n  - If enabled, requesting an out of bounds page will throw a 400. \n  - If disabled, requesting an out of bounds page will return a 200 and an empty page.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false,
              "example": true
            }
          },
          {
            "description": "Defines the collection sort order.",
            "name": "sort",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string",
              "example": "label:asc"
            }
          },
          {
            "name": "filterLogic",
            "description": "Describes how the filters, if any, should be applied",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "and",
                "or"
              ],
              "default": "and",
              "example": "and"
            }
          },
          {
            "description": "One or more collection filters.",
            "name": "filter",
            "in": "query",
            "required": false,
            "schema": {
              "type": "array",
              "example": "label__endswith:0003",
              "items": {
                "type": "string"
              }
            },
            "style": "form",
            "explode": true
          }
        ],
        "tags": [
          "Packages",
          "Single Package",
          "Lab Results"
        ]
      }
    },
    "/v2/packages/source-harvests": {
      "get": {
        "summary": "List of package source harvest objects for a single package",
        "responses": {
          "200": {
            "description": "A list of source harvest objects for the specified package.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/Pagination"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/MetrcPackageSourceHarvest"
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "The package with id={packageId} was not found in the specified license"
          }
        },
        "parameters": [
          {
            "name": "licenseNumber",
            "description": "The unique identifier for the license associated with this request.",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "example": "LIC-00001"
            }
          },
          {
            "name": "packageId",
            "description": "ID of the target package",
            "in": "query",
            "required": true,
            "schema": {
              "type": "number",
              "example": 123
            }
          },
          {
            "name": "page",
            "description": "The index of the page to be returned.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 1,
              "example": 1
            }
          },
          {
            "name": "pageSize",
            "description": "The number of objects per page to be returned.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 100,
              "example": 100
            }
          },
          {
            "name": "strictPagination",
            "description": "Toggles strict pagination. Defaults to `false` (disabled)\n\n  - If enabled, requesting an out of bounds page will throw a 400. \n  - If disabled, requesting an out of bounds page will return a 200 and an empty page.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false,
              "example": true
            }
          },
          {
            "description": "Defines the collection sort order.",
            "name": "sort",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string",
              "example": "label:asc"
            }
          },
          {
            "name": "filterLogic",
            "description": "Describes how the filters, if any, should be applied",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "and",
                "or"
              ],
              "default": "and",
              "example": "and"
            }
          },
          {
            "description": "One or more collection filters.",
            "name": "filter",
            "in": "query",
            "required": false,
            "schema": {
              "type": "array",
              "example": "label__endswith:0003",
              "items": {
                "type": "string"
              }
            },
            "style": "form",
            "explode": true
          }
        ],
        "tags": [
          "Packages",
          "Single Package",
          "Harvests"
        ]
      }
    },
    "/v2/packages/labresults/document": {
      "get": {
        "summary": "Get the COA PDF for a lab result.",
        "description": "**NOTE: A single package might have hundreds of lab results, but most will share just one or two lab test result document IDs.**\n",
        "responses": {
          "200": {
            "description": "PDF of the lab result COA",
            "content": {
              "application/pdf": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "licenseNumber",
            "description": "The unique identifier for the license associated with this request.",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "example": "LIC-00001"
            }
          },
          {
            "name": "packageId",
            "description": "ID of the target package",
            "in": "query",
            "required": true,
            "schema": {
              "type": "number",
              "example": 123
            }
          },
          {
            "name": "labTestResultDocumentFileId",
            "description": "ID of the target lab result",
            "in": "query",
            "required": true,
            "schema": {
              "type": "number",
              "example": 123
            }
          }
        ],
        "tags": [
          "Packages",
          "Single Package",
          "Lab Results",
          "PDF"
        ]
      }
    },
    "/v2/packages/create": {
      "post": {
        "summary": "Create one or more packages from existing active packages",
        "description": "**Refer to the request body schema for details on formatting your request**\n",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "actualDate": {
                      "type": "string",
                      "format": "date",
                      "description": "The date of the package creation.",
                      "example": "2024-08-08"
                    },
                    "ingredients": {
                      "type": "array",
                      "description": "List of package ingredients used to create this new package.",
                      "items": {
                        "type": "object",
                        "properties": {
                          "finishDate": {
                            "type": "string",
                            "format": "date",
                            "description": "If you are using the rest of an ingredient package and wish to finish it, pass a finish date.\n",
                            "example": "2024-08-08"
                          },
                          "packageId": {
                            "type": "integer",
                            "format": "int32",
                            "description": "Package ID of the source ingredient package\nTo find source ingredient packages, use the [Source Packages](#/Create%20Package/get_v2_packages_create_source_packages) endpoint.\n",
                            "example": 5077333
                          },
                          "quantity": {
                            "type": "number",
                            "format": "float",
                            "description": "Quantity used from the ingredient package.",
                            "example": 56.3
                          },
                          "unitOfMeasureId": {
                            "type": "integer",
                            "description": "Unit of measure for the quantity",
                            "example": 4
                          }
                        },
                        "required": [
                          "packageId",
                          "quantity",
                          "unitOfMeasureId"
                        ],
                        "additionalProperties": false
                      }
                    },
                    "itemId": {
                      "type": "integer",
                      "description": "Item ID of the item for the new package\nTo find eligible items, use the [Source Items](#/Create%20Package/get_v2_packages_create_source_items) endpoint.\n",
                      "example": 1160223
                    },
                    "locationId": {
                      "type": "integer",
                      "description": "Location ID of the location for the new package\nTo find eligible source locations, use the [Create Package Inputs](#/Create%20Package/get_v2_packages_create_inputs) endpoint.\n",
                      "example": 50901
                    },
                    "note": {
                      "type": "string",
                      "description": "Notes about the package creation, if needed.\n",
                      "example": "This is a package note"
                    },
                    "productionBatchNumber": {
                      "type": "string",
                      "description": "The production batch number of the new package, if needed.",
                      "example": "BATCH 1234"
                    },
                    "quantity": {
                      "type": "number",
                      "format": "float",
                      "description": "Quantity of the new package.",
                      "example": 123.45
                    },
                    "tagId": {
                      "type": "integer",
                      "description": "Tag ID of the tag used for the new package\nTo find eligible source tags, use the [Create Package Inputs](#/Create%20Package/get_v2_packages_create_inputs) endpoint.\n",
                      "example": 1527333
                    },
                    "unitOfMeasureId": {
                      "type": "integer",
                      "description": "Unit of measure identifier for the package.",
                      "example": 1
                    },
                    "expirationDate": {
                      "type": "string",
                      "format": "date",
                      "description": "The expiration date of the package, if needed. \n*Only applicable in some Metrc states*\n",
                      "example": ""
                    },
                    "useByDate": {
                      "type": "string",
                      "format": "date",
                      "description": "The use by date of the package, if needed.\n*Only applicable in some Metrc states*\n",
                      "example": ""
                    },
                    "sellByDate": {
                      "type": "string",
                      "format": "date",
                      "description": "The sell by date of the package, if needed.\n*Only applicable in some Metrc states*\n",
                      "example": "2024-08-08"
                    }
                  },
                  "required": [
                    "actualDate",
                    "ingredients",
                    "itemId",
                    "locationId",
                    "quantity",
                    "tagId",
                    "unitOfMeasureId"
                  ],
                  "additionalProperties": false
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The operation completed successfully.\n",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "type": "string",
                      "description": "Describes the nature of this successful operation\n- \"Success\" indicates the request passed validation and was successfully passed to Metrc\n- \"Dry run\" indicates the request passed validation, but the request was not sent to Metrc\n",
                      "example": "Success"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "An error response indicating the request was invalid. Refer to the response body for details.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "object",
                      "properties": {
                        "type": {
                          "type": "string",
                          "example": "BadRequest"
                        },
                        "message": {
                          "type": "string",
                          "example": "400 Bad Request: Invalid request body: 'note' is a required property"
                        },
                        "timestamp": {
                          "type": "string",
                          "format": "date-time",
                          "example": "2024-08-09T12:34:56.789Z"
                        },
                        "url": {
                          "type": "string",
                          "example": "https://api.trackandtrace.tools/some-endpoint"
                        },
                        "status_code": {
                          "type": "integer",
                          "example": 400
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "An error response indicating the server experienced an unexpected error.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "object",
                      "properties": {
                        "type": {
                          "type": "string",
                          "example": "InternalServerError"
                        },
                        "message": {
                          "type": "string",
                          "example": "500 InternalServerError"
                        },
                        "timestamp": {
                          "type": "string",
                          "format": "date-time",
                          "example": "2024-08-09T12:34:56.789Z"
                        },
                        "url": {
                          "type": "string",
                          "example": "https://api.trackandtrace.tools/some-endpoint"
                        },
                        "status_code": {
                          "type": "integer",
                          "example": 500
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "503": {
            "description": "An error response indicating the Metrc servers are experiencing downtime.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "object",
                      "properties": {
                        "type": {
                          "type": "string",
                          "example": "ServiceUnavailable"
                        },
                        "message": {
                          "type": "string",
                          "example": "503 ServiceUnavailable"
                        },
                        "timestamp": {
                          "type": "string",
                          "format": "date-time",
                          "example": "2024-08-09T12:34:56.789Z"
                        },
                        "url": {
                          "type": "string",
                          "example": "https://api.trackandtrace.tools/some-endpoint"
                        },
                        "status_code": {
                          "type": "integer",
                          "example": 503
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "licenseNumber",
            "description": "The unique identifier for the license associated with this request.",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "example": "LIC-00001"
            }
          },
          {
            "name": "submit",
            "in": "query",
            "required": false,
            "description": "Controls whether this request should be forwarded to Metrc.\n- **If present and set to 'true'**: The request will be validated and forwarded to Metrc if validation passes.\n- **If omitted or set to any value other than 'true'**: The request will only be validated.\nExamples:\n  - \"true\": Forward the request to Metrc\n  - \"false\": Execute a dry run\n",
            "schema": {
              "type": "string",
              "example": "true"
            }
          }
        ],
        "tags": [
          "Packages",
          "Create Package"
        ]
      }
    },
    "/v2/packages/notes": {
      "post": {
        "summary": "Add notes to packages",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "integer",
                      "description": "The package ID",
                      "example": 12345
                    },
                    "note": {
                      "type": "string",
                      "description": "The note to add to this package",
                      "example": "This is a package note"
                    }
                  },
                  "required": [
                    "id",
                    "note"
                  ],
                  "additionalProperties": false
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The operation completed successfully.\n",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "type": "string",
                      "description": "Describes the nature of this successful operation\n- \"Success\" indicates the request passed validation and was successfully passed to Metrc\n- \"Dry run\" indicates the request passed validation, but the request was not sent to Metrc\n",
                      "example": "Success"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "An error response indicating the request was invalid. Refer to the response body for details.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "object",
                      "properties": {
                        "type": {
                          "type": "string",
                          "example": "BadRequest"
                        },
                        "message": {
                          "type": "string",
                          "example": "400 Bad Request: Invalid request body: 'note' is a required property"
                        },
                        "timestamp": {
                          "type": "string",
                          "format": "date-time",
                          "example": "2024-08-09T12:34:56.789Z"
                        },
                        "url": {
                          "type": "string",
                          "example": "https://api.trackandtrace.tools/some-endpoint"
                        },
                        "status_code": {
                          "type": "integer",
                          "example": 400
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "An error response indicating the server experienced an unexpected error.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "object",
                      "properties": {
                        "type": {
                          "type": "string",
                          "example": "InternalServerError"
                        },
                        "message": {
                          "type": "string",
                          "example": "500 InternalServerError"
                        },
                        "timestamp": {
                          "type": "string",
                          "format": "date-time",
                          "example": "2024-08-09T12:34:56.789Z"
                        },
                        "url": {
                          "type": "string",
                          "example": "https://api.trackandtrace.tools/some-endpoint"
                        },
                        "status_code": {
                          "type": "integer",
                          "example": 500
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "503": {
            "description": "An error response indicating the Metrc servers are experiencing downtime.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "object",
                      "properties": {
                        "type": {
                          "type": "string",
                          "example": "ServiceUnavailable"
                        },
                        "message": {
                          "type": "string",
                          "example": "503 ServiceUnavailable"
                        },
                        "timestamp": {
                          "type": "string",
                          "format": "date-time",
                          "example": "2024-08-09T12:34:56.789Z"
                        },
                        "url": {
                          "type": "string",
                          "example": "https://api.trackandtrace.tools/some-endpoint"
                        },
                        "status_code": {
                          "type": "integer",
                          "example": 503
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "licenseNumber",
            "description": "The unique identifier for the license associated with this request.",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "example": "LIC-00001"
            }
          },
          {
            "name": "submit",
            "in": "query",
            "required": false,
            "description": "Controls whether this request should be forwarded to Metrc.\n- **If present and set to 'true'**: The request will be validated and forwarded to Metrc if validation passes.\n- **If omitted or set to any value other than 'true'**: The request will only be validated.\nExamples:\n  - \"true\": Forward the request to Metrc\n  - \"false\": Execute a dry run\n",
            "schema": {
              "type": "string",
              "example": "true"
            }
          }
        ],
        "tags": [
          "Packages",
          "Modify Packages"
        ]
      }
    },
    "/v2/packages/create/inputs": {
      "get": {
        "summary": "Input data used for creating new packages",
        "responses": {
          "200": {
            "description": "A dictionary of data used for creating new packages",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "allowedProductionLabTestingStates": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/LabTestingStates"
                      }
                    },
                    "allowedProductionProductCategoryIds": {
                      "type": "array",
                      "items": {
                        "type": "integer"
                      },
                      "example": [
                        1,
                        2,
                        3
                      ]
                    },
                    "details": {
                      "type": "string",
                      "nullable": true
                    },
                    "harvestBatches": {
                      "type": "string",
                      "nullable": true
                    },
                    "isProductDestruction": {
                      "type": "boolean",
                      "example": false
                    },
                    "itemCategoryIds": {
                      "type": "string",
                      "nullable": true
                    },
                    "items": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "example": []
                    },
                    "labTestBatches": {
                      "type": "string",
                      "nullable": true
                    },
                    "locations": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/MetrcLocation"
                      }
                    },
                    "packages": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "example": []
                    },
                    "patientAffiliations": {
                      "type": "string",
                      "nullable": true
                    },
                    "plantBatches": {
                      "type": "string",
                      "nullable": true
                    },
                    "plants": {
                      "type": "string",
                      "nullable": true
                    },
                    "remediationMethods": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/MetrcRemediationMethod"
                      }
                    },
                    "submitForTesting": {
                      "type": "boolean",
                      "example": false
                    },
                    "tags": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/MetrcTag"
                      }
                    },
                    "unitsOfMeasure": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/UnitOfMeasure"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "licenseNumber",
            "description": "The unique identifier for the license associated with this request.",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "example": "LIC-00001"
            }
          }
        ],
        "tags": [
          "Packages",
          "Create Package"
        ]
      }
    },
    "/v2/packages/create/source-packages": {
      "get": {
        "summary": "List of packages eligible to be used in creating new packages",
        "responses": {
          "200": {
            "description": "A list of eligible packages for this license",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/Pagination"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/MetrcSuperpackage"
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "licenseNumber",
            "description": "The unique identifier for the license associated with this request.",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "example": "LIC-00001"
            }
          },
          {
            "name": "page",
            "description": "The index of the page to be returned.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 1,
              "example": 1
            }
          },
          {
            "name": "pageSize",
            "description": "The number of objects per page to be returned.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 100,
              "example": 100
            }
          },
          {
            "name": "strictPagination",
            "description": "Toggles strict pagination. Defaults to `false` (disabled)\n\n  - If enabled, requesting an out of bounds page will throw a 400. \n  - If disabled, requesting an out of bounds page will return a 200 and an empty page.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false,
              "example": true
            }
          },
          {
            "description": "Defines the collection sort order.",
            "name": "sort",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string",
              "example": "label:asc"
            }
          },
          {
            "name": "filterLogic",
            "description": "Describes how the filters, if any, should be applied",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "and",
                "or"
              ],
              "default": "and",
              "example": "and"
            }
          },
          {
            "description": "One or more collection filters.",
            "name": "filter",
            "in": "query",
            "required": false,
            "schema": {
              "type": "array",
              "example": "label__endswith:0003",
              "items": {
                "type": "string"
              }
            },
            "style": "form",
            "explode": true
          }
        ],
        "tags": [
          "Packages",
          "Create Package"
        ]
      }
    },
    "/v2/packages/create/source-items": {
      "get": {
        "summary": "List of items eligible to be used in creating new packages",
        "responses": {
          "200": {
            "description": "A list of eligible items for this license",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/Pagination"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/MetrcItem"
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "licenseNumber",
            "description": "The unique identifier for the license associated with this request.",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "example": "LIC-00001"
            }
          },
          {
            "name": "page",
            "description": "The index of the page to be returned.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 1,
              "example": 1
            }
          },
          {
            "name": "pageSize",
            "description": "The number of objects per page to be returned.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 100,
              "example": 100
            }
          },
          {
            "name": "strictPagination",
            "description": "Toggles strict pagination. Defaults to `false` (disabled)\n\n  - If enabled, requesting an out of bounds page will throw a 400. \n  - If disabled, requesting an out of bounds page will return a 200 and an empty page.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false,
              "example": true
            }
          },
          {
            "description": "Defines the collection sort order.",
            "name": "sort",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string",
              "example": "label:asc"
            }
          },
          {
            "name": "filterLogic",
            "description": "Describes how the filters, if any, should be applied",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "and",
                "or"
              ],
              "default": "and",
              "example": "and"
            }
          },
          {
            "description": "One or more collection filters.",
            "name": "filter",
            "in": "query",
            "required": false,
            "schema": {
              "type": "array",
              "example": "label__endswith:0003",
              "items": {
                "type": "string"
              }
            },
            "style": "form",
            "explode": true
          }
        ],
        "tags": [
          "Packages",
          "Create Package"
        ]
      }
    },
    "/v2/packages/active/report": {
      "get": {
        "summary": "Generate a report of all active packages",
        "description": "**Note: this endpoint supports secret key authentication.**\n",
        "responses": {
          "200": {
            "description": "A list of active packages for this license",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "generatedAt": {
                      "type": "string",
                      "format": "date-time",
                      "example": "2024-07-25T00:00:00+00:00"
                    },
                    "filters": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "example": [
                        "label__endswith:0003",
                        "item.name__contains:kush"
                      ]
                    },
                    "filterLogic": {
                      "type": "string",
                      "description": "The filter logic specified for this report, if any",
                      "example": "and",
                      "nullable": true
                    },
                    "sort": {
                      "type": "string",
                      "description": "The sort order specified for this report, if any",
                      "example": "label:asc",
                      "nullable": true
                    },
                    "licenseNumber": {
                      "type": "string",
                      "description": "The unique identifier for the license associated with this request.",
                      "example": "LIC-00001"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/MetrcPackage"
                      }
                    }
                  }
                }
              },
              "text/csv": {
                "schema": {
                  "type": "string",
                  "example": "label,item.name,quantity\n1A4400000000000000001234,Package A,10\n1A4400000000000000005678,Package B,5"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "licenseNumber",
            "description": "The unique identifier for the license associated with this request.",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "example": "LIC-00001"
            }
          },
          {
            "name": "secretKey",
            "description": "Your secret key, if you wish to authenticate via query params. Secret keys can be manually generated [here](/v2/pages/secret-key).\n",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "example": "2616ec56-fa2a-4c5b-86c0-acacf23c9ef7"
            }
          },
          {
            "name": "filterLogic",
            "description": "Describes how the filters, if any, should be applied",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "and",
                "or"
              ],
              "default": "and",
              "example": "and"
            }
          },
          {
            "name": "contentType",
            "description": "Specifies how the report should be formatted. Can be returned as json or csv.\n*This can also be defined in the Content-Type header*\n",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "json",
                "csv"
              ],
              "default": "json",
              "example": "json"
            }
          },
          {
            "name": "prependCsvMetadata",
            "description": "Controls if the CSV header metadata should be included in the output.\nWhen set to false, only the column headers and data will be returned.\n",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "true",
                "false"
              ],
              "default": "true",
              "example": "true"
            }
          },
          {
            "description": "Defines the collection sort order.",
            "name": "sort",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string",
              "example": "label:asc"
            }
          },
          {
            "description": "One or more collection filters.",
            "name": "filter",
            "in": "query",
            "required": false,
            "schema": {
              "type": "array",
              "example": "label__endswith:0003",
              "items": {
                "type": "string"
              }
            },
            "style": "form",
            "explode": true
          },
          {
            "name": "fieldnames",
            "description": "Defines which package fields should appear in the report data.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "default": "label,locationName,item.name,quantity,unitOfMeasureAbbreviation",
              "example": "label,locationName,item.name,quantity,unitOfMeasureAbbreviation"
            }
          }
        ],
        "tags": [
          "Packages",
          "Reports"
        ]
      }
    },
    "/v2/packages/intransit/report": {
      "get": {
        "summary": "Generate a report of all in-transit packages",
        "description": "**Note: this endpoint supports secret key authentication.**\n",
        "responses": {
          "200": {
            "description": "A list of in-transit packages for this license",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "generatedAt": {
                      "type": "string",
                      "format": "date-time",
                      "example": "2024-07-25T00:00:00+00:00"
                    },
                    "filters": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "example": [
                        "label__endswith:0003",
                        "item.name__contains:kush"
                      ]
                    },
                    "filterLogic": {
                      "type": "string",
                      "description": "The filter logic specified for this report, if any",
                      "example": "and",
                      "nullable": true
                    },
                    "sort": {
                      "type": "string",
                      "description": "The sort order specified for this report, if any",
                      "example": "label:asc",
                      "nullable": true
                    },
                    "licenseNumber": {
                      "type": "string",
                      "description": "The unique identifier for the license associated with this request.",
                      "example": "LIC-00001"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/MetrcPackage"
                      }
                    }
                  }
                }
              },
              "text/csv": {
                "schema": {
                  "type": "string",
                  "example": "label,item.name,quantity\n1A4400000000000000001234,Package A,10\n1A4400000000000000005678,Package B,5"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "licenseNumber",
            "description": "The unique identifier for the license associated with this request.",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "example": "LIC-00001"
            }
          },
          {
            "name": "secretKey",
            "description": "Your secret key, if you wish to authenticate via query params. Secret keys can be manually generated [here](/v2/pages/secret-key).\n",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "example": "2616ec56-fa2a-4c5b-86c0-acacf23c9ef7"
            }
          },
          {
            "description": "Defines the collection sort order.",
            "name": "sort",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string",
              "example": "label:asc"
            }
          },
          {
            "name": "filterLogic",
            "description": "Describes how the filters, if any, should be applied",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "and",
                "or"
              ],
              "default": "and",
              "example": "and"
            }
          },
          {
            "description": "One or more collection filters.",
            "name": "filter",
            "in": "query",
            "required": false,
            "schema": {
              "type": "array",
              "example": "label__endswith:0003",
              "items": {
                "type": "string"
              }
            },
            "style": "form",
            "explode": true
          },
          {
            "name": "contentType",
            "description": "Specifies how the report should be formatted. Can be returned as json or csv.\n*This can also be defined in the Content-Type header*\n",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "json",
                "csv"
              ],
              "default": "json",
              "example": "json"
            }
          },
          {
            "name": "prependCsvMetadata",
            "description": "Controls if the CSV header metadata should be included in the output.\nWhen set to false, only the column headers and data will be returned.\n",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "true",
                "false"
              ],
              "default": "true",
              "example": "true"
            }
          },
          {
            "name": "fieldnames",
            "description": "Defines which package fields should appear in the report data.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "default": "label,locationName,item.name,quantity,unitOfMeasureAbbreviation",
              "example": "label,locationName,item.name,quantity,unitOfMeasureAbbreviation"
            }
          }
        ],
        "tags": [
          "Packages",
          "Reports"
        ]
      }
    },
    "/v2/packages/transferred/report": {
      "get": {
        "summary": "Generate a report of all transferred packages",
        "description": "**Note: this endpoint supports secret key authentication.**\n",
        "responses": {
          "200": {
            "description": "A list of transferred packages for this license",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "generatedAt": {
                      "type": "string",
                      "format": "date-time",
                      "example": "2024-07-25T00:00:00+00:00"
                    },
                    "filters": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "example": [
                        "packageLabel__endswith:0003",
                        "productName__contains:kush"
                      ]
                    },
                    "filterLogic": {
                      "type": "string",
                      "description": "The filter logic specified for this report, if any",
                      "example": "and",
                      "nullable": true
                    },
                    "sort": {
                      "type": "string",
                      "description": "The sort order specified for this report, if any",
                      "example": "label:asc",
                      "nullable": true
                    },
                    "licenseNumber": {
                      "type": "string",
                      "description": "The unique identifier for the license associated with this request.",
                      "example": "LIC-00001"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/MetrcTransferredPackage"
                      }
                    }
                  }
                }
              },
              "text/csv": {
                "schema": {
                  "type": "string",
                  "example": "manifestNumber,packageLabel,productName,quantity\n0001234567,1A4400000000000000001234,Package A,10\n0001234567,1A4400000000000000005678,Package B,5"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "licenseNumber",
            "description": "The unique identifier for the license associated with this request.",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "example": "LIC-00001"
            }
          },
          {
            "name": "secretKey",
            "description": "Your secret key, if you wish to authenticate via query params. Secret keys can be manually generated [here](/v2/pages/secret-key).\n",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "example": "2616ec56-fa2a-4c5b-86c0-acacf23c9ef7"
            }
          },
          {
            "description": "Defines the collection sort order.",
            "name": "sort",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string",
              "example": "label:asc"
            }
          },
          {
            "name": "filterLogic",
            "description": "Describes how the filters, if any, should be applied",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "and",
                "or"
              ],
              "default": "and",
              "example": "and"
            }
          },
          {
            "description": "One or more collection filters.",
            "name": "filter",
            "in": "query",
            "required": false,
            "schema": {
              "type": "array",
              "example": "label__endswith:0003",
              "items": {
                "type": "string"
              }
            },
            "style": "form",
            "explode": true
          },
          {
            "name": "contentType",
            "description": "Specifies how the report should be formatted. Can be returned as json or csv.\n*This can also be defined in the Content-Type header*\n",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "json",
                "csv"
              ],
              "default": "json",
              "example": "json"
            }
          },
          {
            "name": "prependCsvMetadata",
            "description": "Controls if the CSV header metadata should be included in the output.\nWhen set to false, only the column headers and data will be returned.\n",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "true",
                "false"
              ],
              "default": "true",
              "example": "true"
            }
          },
          {
            "name": "fieldnames",
            "description": "Defines which package fields should appear in the report data.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "default": "manifestNumber,packageLabel,productName,shippedQuantity,shippedUnitOfMeasureAbbreviation,shipperWholesalePrice",
              "example": "manifestNumber,packageLabel,productName,shippedQuantity,shippedUnitOfMeasureAbbreviation,shipperWholesalePrice"
            }
          }
        ],
        "tags": [
          "Packages",
          "Reports"
        ]
      }
    },
    "/v2/packages/unfinish": {
      "post": {
        "summary": "Unfinish packages",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "integer",
                      "description": "The package ID",
                      "example": 12345
                    }
                  },
                  "required": [
                    "id"
                  ],
                  "additionalProperties": false
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The operation completed successfully.\n",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "type": "string",
                      "description": "Describes the nature of this successful operation\n- \"Success\" indicates the request passed validation and was successfully passed to Metrc\n- \"Dry run\" indicates the request passed validation, but the request was not sent to Metrc\n",
                      "example": "Success"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "An error response indicating the request was invalid. Refer to the response body for details.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "object",
                      "properties": {
                        "type": {
                          "type": "string",
                          "example": "BadRequest"
                        },
                        "message": {
                          "type": "string",
                          "example": "400 Bad Request: Invalid request body: 'note' is a required property"
                        },
                        "timestamp": {
                          "type": "string",
                          "format": "date-time",
                          "example": "2024-08-09T12:34:56.789Z"
                        },
                        "url": {
                          "type": "string",
                          "example": "https://api.trackandtrace.tools/some-endpoint"
                        },
                        "status_code": {
                          "type": "integer",
                          "example": 400
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "An error response indicating the server experienced an unexpected error.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "object",
                      "properties": {
                        "type": {
                          "type": "string",
                          "example": "InternalServerError"
                        },
                        "message": {
                          "type": "string",
                          "example": "500 InternalServerError"
                        },
                        "timestamp": {
                          "type": "string",
                          "format": "date-time",
                          "example": "2024-08-09T12:34:56.789Z"
                        },
                        "url": {
                          "type": "string",
                          "example": "https://api.trackandtrace.tools/some-endpoint"
                        },
                        "status_code": {
                          "type": "integer",
                          "example": 500
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "503": {
            "description": "An error response indicating the Metrc servers are experiencing downtime.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "object",
                      "properties": {
                        "type": {
                          "type": "string",
                          "example": "ServiceUnavailable"
                        },
                        "message": {
                          "type": "string",
                          "example": "503 ServiceUnavailable"
                        },
                        "timestamp": {
                          "type": "string",
                          "format": "date-time",
                          "example": "2024-08-09T12:34:56.789Z"
                        },
                        "url": {
                          "type": "string",
                          "example": "https://api.trackandtrace.tools/some-endpoint"
                        },
                        "status_code": {
                          "type": "integer",
                          "example": 503
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "licenseNumber",
            "description": "The unique identifier for the license associated with this request.",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "example": "LIC-00001"
            }
          },
          {
            "name": "submit",
            "in": "query",
            "required": false,
            "description": "Controls whether this request should be forwarded to Metrc.\n- **If present and set to 'true'**: The request will be validated and forwarded to Metrc if validation passes.\n- **If omitted or set to any value other than 'true'**: The request will only be validated.\nExamples:\n  - \"true\": Forward the request to Metrc\n  - \"false\": Execute a dry run\n",
            "schema": {
              "type": "string",
              "example": "true"
            }
          }
        ],
        "tags": [
          "Packages",
          "Modify Packages"
        ]
      }
    },
    "/v2/permissions/views": {
      "get": {
        "summary": "List of all available permission views",
        "description": "**A T3+ subscription is not required to use this endpoint**\n",
        "responses": {
          "200": {
            "description": "A list of permission views available to this account",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "example": [
                    "packages",
                    "admin/items",
                    "plants"
                  ],
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "licenseNumber",
            "description": "The unique identifier for the license associated with this request.",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "example": "LIC-00001"
            }
          }
        ],
        "tags": [
          "Permissions",
          "Free"
        ]
      }
    },
    "/v2/permissions": {
      "get": {
        "summary": "List of all permissions within a single view",
        "description": "**A T3+ subscription is not required to use this endpoint**\n",
        "responses": {
          "200": {
            "description": "A list of accessible permissions for the specified view",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "example": [
                    "create_harvest",
                    "split_plantings",
                    "unfinish",
                    "remediate"
                  ],
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "licenseNumber",
            "description": "The unique identifier for the license associated with this request.",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "example": "LIC-00001"
            }
          },
          {
            "name": "view",
            "description": "Specifies the view to check permissions",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string",
              "example": "packages"
            }
          }
        ],
        "tags": [
          "Permissions",
          "Free"
        ]
      }
    },
    "/v2/transfers/incoming/active": {
      "get": {
        "summary": "List of incoming active transfers",
        "responses": {
          "200": {
            "description": "A list of incoming inactive transfers for this license",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/Pagination"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/MetrcIncomingTransfer"
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "licenseNumber",
            "description": "The unique identifier for the license associated with this request.",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "example": "LIC-00001"
            }
          },
          {
            "name": "page",
            "description": "The index of the page to be returned.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 1,
              "example": 1
            }
          },
          {
            "name": "pageSize",
            "description": "The number of objects per page to be returned.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 100,
              "example": 100
            }
          },
          {
            "name": "strictPagination",
            "description": "Toggles strict pagination. Defaults to `false` (disabled)\n\n  - If enabled, requesting an out of bounds page will throw a 400. \n  - If disabled, requesting an out of bounds page will return a 200 and an empty page.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false,
              "example": true
            }
          },
          {
            "description": "Defines the collection sort order.",
            "name": "sort",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string",
              "example": "label:asc"
            }
          },
          {
            "name": "filterLogic",
            "description": "Describes how the filters, if any, should be applied",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "and",
                "or"
              ],
              "default": "and",
              "example": "and"
            }
          },
          {
            "description": "One or more collection filters.",
            "name": "filter",
            "in": "query",
            "required": false,
            "schema": {
              "type": "array",
              "example": "label__endswith:0003",
              "items": {
                "type": "string"
              }
            },
            "style": "form",
            "explode": true
          }
        ],
        "tags": [
          "Transfers"
        ]
      }
    },
    "/v2/transfers/incoming/inactive": {
      "get": {
        "summary": "List of incoming inactive transfers",
        "responses": {
          "200": {
            "description": "A list of incoming active transfers for this license",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/Pagination"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/MetrcIncomingTransfer"
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "licenseNumber",
            "description": "The unique identifier for the license associated with this request.",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "example": "LIC-00001"
            }
          },
          {
            "name": "page",
            "description": "The index of the page to be returned.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 1,
              "example": 1
            }
          },
          {
            "name": "pageSize",
            "description": "The number of objects per page to be returned.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 100,
              "example": 100
            }
          },
          {
            "name": "strictPagination",
            "description": "Toggles strict pagination. Defaults to `false` (disabled)\n\n  - If enabled, requesting an out of bounds page will throw a 400. \n  - If disabled, requesting an out of bounds page will return a 200 and an empty page.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false,
              "example": true
            }
          },
          {
            "description": "Defines the collection sort order.",
            "name": "sort",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string",
              "example": "label:asc"
            }
          },
          {
            "name": "filterLogic",
            "description": "Describes how the filters, if any, should be applied",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "and",
                "or"
              ],
              "default": "and",
              "example": "and"
            }
          },
          {
            "description": "One or more collection filters.",
            "name": "filter",
            "in": "query",
            "required": false,
            "schema": {
              "type": "array",
              "example": "label__endswith:0003",
              "items": {
                "type": "string"
              }
            },
            "style": "form",
            "explode": true
          }
        ],
        "tags": [
          "Transfers"
        ]
      }
    },
    "/v2/transfers/outgoing/active": {
      "get": {
        "summary": "List of outgoing active transfers",
        "responses": {
          "200": {
            "description": "A list of outgoing active transfers for this license",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/Pagination"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/MetrcOutgoingTransfer"
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "licenseNumber",
            "description": "The unique identifier for the license associated with this request.",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "example": "LIC-00001"
            }
          },
          {
            "name": "page",
            "description": "The index of the page to be returned.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 1,
              "example": 1
            }
          },
          {
            "name": "pageSize",
            "description": "The number of objects per page to be returned.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 100,
              "example": 100
            }
          },
          {
            "name": "strictPagination",
            "description": "Toggles strict pagination. Defaults to `false` (disabled)\n\n  - If enabled, requesting an out of bounds page will throw a 400. \n  - If disabled, requesting an out of bounds page will return a 200 and an empty page.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false,
              "example": true
            }
          },
          {
            "description": "Defines the collection sort order.",
            "name": "sort",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string",
              "example": "label:asc"
            }
          },
          {
            "name": "filterLogic",
            "description": "Describes how the filters, if any, should be applied",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "and",
                "or"
              ],
              "default": "and",
              "example": "and"
            }
          },
          {
            "description": "One or more collection filters.",
            "name": "filter",
            "in": "query",
            "required": false,
            "schema": {
              "type": "array",
              "example": "label__endswith:0003",
              "items": {
                "type": "string"
              }
            },
            "style": "form",
            "explode": true
          }
        ],
        "tags": [
          "Transfers"
        ]
      }
    },
    "/v2/transfers/outgoing/inactive": {
      "get": {
        "summary": "List of outgoing inactive transfers",
        "responses": {
          "200": {
            "description": "A list of outgoing inactive transfers for this license",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/Pagination"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/MetrcOutgoingTransfer"
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "licenseNumber",
            "description": "The unique identifier for the license associated with this request.",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "example": "LIC-00001"
            }
          },
          {
            "name": "page",
            "description": "The index of the page to be returned.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 1,
              "example": 1
            }
          },
          {
            "name": "pageSize",
            "description": "The number of objects per page to be returned.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 100,
              "example": 100
            }
          },
          {
            "name": "strictPagination",
            "description": "Toggles strict pagination. Defaults to `false` (disabled)\n\n  - If enabled, requesting an out of bounds page will throw a 400. \n  - If disabled, requesting an out of bounds page will return a 200 and an empty page.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false,
              "example": true
            }
          },
          {
            "description": "Defines the collection sort order.",
            "name": "sort",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string",
              "example": "label:asc"
            }
          },
          {
            "name": "filterLogic",
            "description": "Describes how the filters, if any, should be applied",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "and",
                "or"
              ],
              "default": "and",
              "example": "and"
            }
          },
          {
            "description": "One or more collection filters.",
            "name": "filter",
            "in": "query",
            "required": false,
            "schema": {
              "type": "array",
              "example": "label__endswith:0003",
              "items": {
                "type": "string"
              }
            },
            "style": "form",
            "explode": true
          }
        ],
        "tags": [
          "Transfers"
        ]
      }
    },
    "/v2/transfers/rejected": {
      "get": {
        "summary": "List of rejected transfers",
        "responses": {
          "200": {
            "description": "A list of rejected transfers for this license",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/Pagination"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/MetrcOutgoingTransfer"
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "licenseNumber",
            "description": "The unique identifier for the license associated with this request.",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "example": "LIC-00001"
            }
          },
          {
            "name": "page",
            "description": "The index of the page to be returned.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 1,
              "example": 1
            }
          },
          {
            "name": "pageSize",
            "description": "The number of objects per page to be returned.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 100,
              "example": 100
            }
          },
          {
            "name": "strictPagination",
            "description": "Toggles strict pagination. Defaults to `false` (disabled)\n\n  - If enabled, requesting an out of bounds page will throw a 400. \n  - If disabled, requesting an out of bounds page will return a 200 and an empty page.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false,
              "example": true
            }
          },
          {
            "description": "Defines the collection sort order.",
            "name": "sort",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string",
              "example": "label:asc"
            }
          },
          {
            "name": "filterLogic",
            "description": "Describes how the filters, if any, should be applied",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "and",
                "or"
              ],
              "default": "and",
              "example": "and"
            }
          },
          {
            "description": "One or more collection filters.",
            "name": "filter",
            "in": "query",
            "required": false,
            "schema": {
              "type": "array",
              "example": "label__endswith:0003",
              "items": {
                "type": "string"
              }
            },
            "style": "form",
            "explode": true
          }
        ],
        "tags": [
          "Transfers"
        ]
      }
    },
    "/v2/transfers/manifest": {
      "get": {
        "summary": "Get the manifest PDF for a transfer.",
        "responses": {
          "200": {
            "description": "PDF of the manifest",
            "content": {
              "application/pdf": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "licenseNumber",
            "description": "The unique identifier for the license associated with this request.",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "example": "LIC-00001"
            }
          },
          {
            "name": "manifestNumber",
            "description": "The unique identifier for the desired manifest.",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "example": 1234567
            }
          }
        ],
        "tags": [
          "Transfers",
          "Single Transfer",
          "PDF",
          "Manifests"
        ]
      }
    },
    "/v2/transfers/deliveries": {
      "get": {
        "summary": "List of deliveries for a single transfer",
        "responses": {
          "200": {
            "description": "A list of deliveries for a single transfer",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/Pagination"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/MetrcTransferDelivery"
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "licenseNumber",
            "description": "The unique identifier for the license associated with this request.",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "example": "LIC-00001"
            }
          },
          {
            "name": "manifestNumber",
            "description": "The unique identifier for the desired manifest.",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "example": 1234567
            }
          },
          {
            "name": "page",
            "description": "The index of the page to be returned.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 1,
              "example": 1
            }
          },
          {
            "name": "pageSize",
            "description": "The number of objects per page to be returned.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 100,
              "example": 100
            }
          },
          {
            "name": "strictPagination",
            "description": "Toggles strict pagination. Defaults to `false` (disabled)\n\n  - If enabled, requesting an out of bounds page will throw a 400. \n  - If disabled, requesting an out of bounds page will return a 200 and an empty page.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false,
              "example": true
            }
          },
          {
            "description": "Defines the collection sort order.",
            "name": "sort",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string",
              "example": "label:asc"
            }
          },
          {
            "name": "filterLogic",
            "description": "Describes how the filters, if any, should be applied",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "and",
                "or"
              ],
              "default": "and",
              "example": "and"
            }
          },
          {
            "description": "One or more collection filters.",
            "name": "filter",
            "in": "query",
            "required": false,
            "schema": {
              "type": "array",
              "example": "label__endswith:0003",
              "items": {
                "type": "string"
              }
            },
            "style": "form",
            "explode": true
          }
        ],
        "tags": [
          "Single Transfer",
          "Transfers"
        ]
      }
    },
    "/v2/transfers/transporter-details": {
      "get": {
        "summary": "List of transporter detailss for a single transfer",
        "responses": {
          "200": {
            "description": "A list of transporter details for a single tarnsfer",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/Pagination"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/MetrcTransferTransporterDetails"
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "licenseNumber",
            "description": "The unique identifier for the license associated with this request.",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "example": "LIC-00001"
            }
          },
          {
            "name": "manifestNumber",
            "description": "The unique identifier for the desired manifest.",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "example": 1234567
            }
          },
          {
            "name": "page",
            "description": "The index of the page to be returned.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 1,
              "example": 1
            }
          },
          {
            "name": "pageSize",
            "description": "The number of objects per page to be returned.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 100,
              "example": 100
            }
          },
          {
            "name": "strictPagination",
            "description": "Toggles strict pagination. Defaults to `false` (disabled)\n\n  - If enabled, requesting an out of bounds page will throw a 400. \n  - If disabled, requesting an out of bounds page will return a 200 and an empty page.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false,
              "example": true
            }
          },
          {
            "description": "Defines the collection sort order.",
            "name": "sort",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string",
              "example": "label:asc"
            }
          },
          {
            "name": "filterLogic",
            "description": "Describes how the filters, if any, should be applied",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "and",
                "or"
              ],
              "default": "and",
              "example": "and"
            }
          },
          {
            "description": "One or more collection filters.",
            "name": "filter",
            "in": "query",
            "required": false,
            "schema": {
              "type": "array",
              "example": "label__endswith:0003",
              "items": {
                "type": "string"
              }
            },
            "style": "form",
            "explode": true
          }
        ],
        "tags": [
          "Single Transfer",
          "Transfers"
        ]
      }
    },
    "/v2/transfers/transporters": {
      "get": {
        "summary": "List of transporters for a single delivery",
        "responses": {
          "200": {
            "description": "A list of transporters for a single delivery",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/Pagination"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/MetrcTransferTransporter"
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "licenseNumber",
            "description": "The unique identifier for the license associated with this request.",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "example": "LIC-00001"
            }
          },
          {
            "name": "deliveryId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "example": 1234567
            }
          },
          {
            "name": "page",
            "description": "The index of the page to be returned.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 1,
              "example": 1
            }
          },
          {
            "name": "pageSize",
            "description": "The number of objects per page to be returned.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 100,
              "example": 100
            }
          },
          {
            "name": "strictPagination",
            "description": "Toggles strict pagination. Defaults to `false` (disabled)\n\n  - If enabled, requesting an out of bounds page will throw a 400. \n  - If disabled, requesting an out of bounds page will return a 200 and an empty page.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false,
              "example": true
            }
          },
          {
            "description": "Defines the collection sort order.",
            "name": "sort",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string",
              "example": "label:asc"
            }
          },
          {
            "name": "filterLogic",
            "description": "Describes how the filters, if any, should be applied",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "and",
                "or"
              ],
              "default": "and",
              "example": "and"
            }
          },
          {
            "description": "One or more collection filters.",
            "name": "filter",
            "in": "query",
            "required": false,
            "schema": {
              "type": "array",
              "example": "label__endswith:0003",
              "items": {
                "type": "string"
              }
            },
            "style": "form",
            "explode": true
          }
        ],
        "tags": [
          "Single Transfer",
          "Transfers"
        ]
      }
    },
    "/v2/transfers/packages": {
      "get": {
        "summary": "List of packages for a single delivery",
        "responses": {
          "200": {
            "description": "A list of packages for a single delivery",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/Pagination"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/MetrcTransferDelivery"
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "licenseNumber",
            "description": "The unique identifier for the license associated with this request.",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "example": "LIC-00001"
            }
          },
          {
            "name": "deliveryId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "example": 1234567
            }
          },
          {
            "name": "page",
            "description": "The index of the page to be returned.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 1,
              "example": 1
            }
          },
          {
            "name": "pageSize",
            "description": "The number of objects per page to be returned.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 100,
              "example": 100
            }
          },
          {
            "name": "strictPagination",
            "description": "Toggles strict pagination. Defaults to `false` (disabled)\n\n  - If enabled, requesting an out of bounds page will throw a 400. \n  - If disabled, requesting an out of bounds page will return a 200 and an empty page.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false,
              "example": true
            }
          },
          {
            "description": "Defines the collection sort order.",
            "name": "sort",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string",
              "example": "label:asc"
            }
          },
          {
            "name": "filterLogic",
            "description": "Describes how the filters, if any, should be applied",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "and",
                "or"
              ],
              "default": "and",
              "example": "and"
            }
          },
          {
            "description": "One or more collection filters.",
            "name": "filter",
            "in": "query",
            "required": false,
            "schema": {
              "type": "array",
              "example": "label__endswith:0003",
              "items": {
                "type": "string"
              }
            },
            "style": "form",
            "explode": true
          }
        ],
        "tags": [
          "Single Transfer",
          "Transfers"
        ]
      }
    },
    "/v2/transfers/history": {
      "get": {
        "summary": "List of transfer history objects for a single transfer",
        "responses": {
          "200": {
            "description": "A list of history objects for the specified transfer.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/Pagination"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/MetrcHistory"
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "The transfer with manifestNumber={manifestNumber} was not found in the specified license, or you do not have access to view this transfer's history"
          }
        },
        "parameters": [
          {
            "name": "licenseNumber",
            "description": "The unique identifier for the license associated with this request.",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "example": "LIC-00001"
            }
          },
          {
            "name": "manifestNumber",
            "description": "The unique identifier for the desired manifest.",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "example": 1234567
            }
          },
          {
            "name": "page",
            "description": "The index of the page to be returned.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 1,
              "example": 1
            }
          },
          {
            "name": "pageSize",
            "description": "The number of objects per page to be returned.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 100,
              "example": 100
            }
          },
          {
            "name": "strictPagination",
            "description": "Toggles strict pagination. Defaults to `false` (disabled)\n\n  - If enabled, requesting an out of bounds page will throw a 400. \n  - If disabled, requesting an out of bounds page will return a 200 and an empty page.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false,
              "example": true
            }
          },
          {
            "description": "Defines the collection sort order.",
            "name": "sort",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string",
              "example": "label:asc"
            }
          },
          {
            "name": "filterLogic",
            "description": "Describes how the filters, if any, should be applied",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "and",
                "or"
              ],
              "default": "and",
              "example": "and"
            }
          },
          {
            "description": "One or more collection filters.",
            "name": "filter",
            "in": "query",
            "required": false,
            "schema": {
              "type": "array",
              "example": "label__endswith:0003",
              "items": {
                "type": "string"
              }
            },
            "style": "form",
            "explode": true
          }
        ],
        "tags": [
          "Single Transfer",
          "Transfers",
          "History"
        ]
      }
    },
    "/v2/transfers/create/inputs": {
      "get": {
        "summary": "Input data used for creating new transers",
        "responses": {
          "200": {
            "description": "A dictionary of data used for creating new transfers",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "adding": {
                      "type": "boolean",
                      "description": "Indicates if the entity is being added.",
                      "example": true
                    },
                    "daysWholesalePriceCanEdit": {
                      "type": "integer",
                      "description": "Number of days the wholesale price can be edited.",
                      "example": 0
                    },
                    "defaultPhoneNumberForQuestions": {
                      "type": "string",
                      "description": "Default phone number for questions.",
                      "example": "1231231234"
                    },
                    "destinationFacilities": {
                      "type": "array",
                      "description": "List of destination facilities.",
                      "items": {
                        "type": "object"
                      }
                    },
                    "details": {
                      "type": "object",
                      "description": "Additional details.",
                      "nullable": true
                    },
                    "drivers": {
                      "type": "array",
                      "description": "List of drivers associated with the entity.",
                      "items": {
                        "$ref": "#/components/schemas/MetrcDriver"
                      }
                    },
                    "editDeliveryDetailsOnly": {
                      "type": "boolean",
                      "description": "Indicates if only delivery details can be edited.",
                      "example": false
                    },
                    "editWholesalePriceOnly": {
                      "type": "boolean",
                      "description": "Indicates if only the wholesale price can be edited.",
                      "example": false
                    },
                    "facilities": {
                      "type": "object",
                      "description": "Details of the facilities."
                    },
                    "isOutgoingInactive": {
                      "type": "boolean",
                      "description": "Indicates if the outgoing status is inactive.",
                      "example": false
                    },
                    "items": {
                      "type": "object",
                      "description": "List of items.",
                      "nullable": true
                    },
                    "packages": {
                      "type": "array",
                      "description": "List of packages.",
                      "items": {
                        "type": "object"
                      }
                    },
                    "selectedDeliveryIds": {
                      "type": "array",
                      "description": "List of selected delivery IDs.",
                      "items": {
                        "type": "integer"
                      }
                    },
                    "selectedTransferIds": {
                      "type": "array",
                      "description": "List of selected transfer IDs.",
                      "items": {
                        "type": "integer"
                      }
                    },
                    "selectedTransferTemplateIds": {
                      "type": "object",
                      "description": "List of selected transfer template IDs.",
                      "nullable": true
                    },
                    "transferTypes": {
                      "type": "array",
                      "description": "List of transfer types.",
                      "items": {
                        "type": "object",
                        "properties": {
                          "facilityTypes": {
                            "type": "array",
                            "description": "List of facility types.",
                            "items": {
                              "type": "object",
                              "properties": {
                                "facilityTypeId": {
                                  "type": "integer",
                                  "description": "Unique identifier of the facility type.",
                                  "example": 1
                                },
                                "facilityTypeName": {
                                  "type": "string",
                                  "description": "Name of the facility type.",
                                  "example": "Medical Cultivation"
                                }
                              }
                            }
                          },
                          "forExternalIncomingShipments": {
                            "type": "boolean",
                            "description": "Indicates if the transfer type is for external incoming shipments.",
                            "example": false
                          },
                          "forExternalOutgoingShipments": {
                            "type": "boolean",
                            "description": "Indicates if the transfer type is for external outgoing shipments.",
                            "example": false
                          },
                          "forLicensedShipments": {
                            "type": "boolean",
                            "description": "Indicates if the transfer type is for licensed shipments.",
                            "example": true
                          },
                          "id": {
                            "type": "integer",
                            "description": "Unique identifier of the transfer type.",
                            "example": 1
                          },
                          "maxDiscrepancyPercentage": {
                            "type": "number",
                            "description": "Maximum allowable discrepancy percentage.",
                            "nullable": true
                          },
                          "maximumWholesalePrice": {
                            "type": "number",
                            "description": "Maximum wholesale price allowed.",
                            "nullable": true
                          },
                          "minimumWholesalePrice": {
                            "type": "number",
                            "description": "Minimum wholesale price allowed.",
                            "nullable": true
                          },
                          "name": {
                            "type": "string",
                            "description": "Name of the transfer type.",
                            "example": "Affiliated Transfer"
                          },
                          "recipientAddressFieldsEnabled": {
                            "type": "boolean",
                            "description": "Indicates if recipient address fields are enabled.",
                            "example": true
                          },
                          "recipientLicenseNameFieldEnabled": {
                            "type": "boolean",
                            "description": "Indicates if the recipient license name field is enabled.",
                            "example": true
                          },
                          "recipientLicenseNumberFieldEnabled": {
                            "type": "boolean",
                            "description": "Indicates if the recipient license number field is enabled.",
                            "example": true
                          },
                          "recipientLicenseNumberFieldLabel": {
                            "type": "string",
                            "description": "Label for the recipient license number field.",
                            "example": "License No."
                          },
                          "requiresDestinationGrossWeight": {
                            "type": "boolean",
                            "description": "Indicates if the destination gross weight is required.",
                            "example": false
                          },
                          "requiresPackagesGrossWeight": {
                            "type": "boolean",
                            "description": "Indicates if the package gross weight is required.",
                            "example": true
                          },
                          "shipperAddressFieldsEnabled": {
                            "type": "boolean",
                            "description": "Indicates if the shipper address fields are enabled.",
                            "example": true
                          },
                          "shipperLicenseNameFieldEnabled": {
                            "type": "boolean",
                            "description": "Indicates if the shipper license name field is enabled.",
                            "example": true
                          },
                          "shipperLicenseNumberFieldEnabled": {
                            "type": "boolean",
                            "description": "Indicates if the shipper license number field is enabled.",
                            "example": true
                          },
                          "shipperLicenseNumberFieldLabel": {
                            "type": "string",
                            "description": "Label for the shipper license number field.",
                            "example": "License No."
                          },
                          "transactionType": {
                            "type": "string",
                            "description": "Type of transaction.",
                            "example": "Standard"
                          },
                          "transactionTypeName": {
                            "type": "string",
                            "description": "Name of the transaction type.",
                            "example": "Standard"
                          },
                          "transporterFieldsEnabled": {
                            "type": "boolean",
                            "description": "Indicates if transporter fields are enabled.",
                            "example": true
                          }
                        }
                      }
                    },
                    "transporterFacilities": {
                      "type": "array",
                      "description": "List of transporter facilities.",
                      "items": {
                        "type": "object"
                      },
                      "example": []
                    },
                    "unitsOfMeasure": {
                      "type": "array",
                      "description": "List of units of measure.",
                      "items": {
                        "$ref": "#/components/schemas/UnitOfMeasure"
                      }
                    },
                    "vehicles": {
                      "type": "array",
                      "description": "List of vehicles associated with the facility.",
                      "items": {
                        "$ref": "#/components/schemas/MetrcVehicle"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "licenseNumber",
            "description": "The unique identifier for the license associated with this request.",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "example": "LIC-00001"
            }
          }
        ],
        "tags": [
          "Transfers",
          "Create Transfer"
        ]
      }
    },
    "/v2/transfers/create": {
      "post": {
        "summary": "Create one or more transfers",
        "description": "**Refer to the request body schema for details on formatting your request**\n",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "object",
                  "description": "A schema representing a shipment with details about destinations, transporters, and packages.",
                  "properties": {
                    "destinations": {
                      "type": "array",
                      "description": "List of destinations for the shipment.",
                      "items": {
                        "type": "object",
                        "properties": {
                          "recipientId": {
                            "type": "number",
                            "format": "int32",
                            "description": "Facility ID of the destination facility.\nTo find eligible destination facilities, use the [Destinations](#/Create%20Transfer/get_v2_packages_create_transfer_destination_list) endpoint.\n",
                            "example": 123456
                          },
                          "plannedRoute": {
                            "type": "string",
                            "description": "Planned route for the shipment.",
                            "example": "Keep going, you can't miss it"
                          },
                          "transferTypeId": {
                            "type": "number",
                            "format": "integer",
                            "description": "Identifier for the type of transfer.",
                            "example": 8
                          },
                          "estimatedDepartureDateTime": {
                            "type": "string",
                            "format": "date-time",
                            "description": "Estimated departure date and time.",
                            "example": "2023-05-23T21:22:35"
                          },
                          "estimatedArrivalDateTime": {
                            "type": "string",
                            "format": "date-time",
                            "description": "Estimated arrival date and time.",
                            "example": "2023-05-23T21:22:35"
                          },
                          "grossWeight": {
                            "type": "number",
                            "format": "float",
                            "description": "Gross weight of the transfer. \n*Only applicable in some Metrc states*\n",
                            "example": 123.45,
                            "nullable": true
                          },
                          "grossUnitOfWeightId": {
                            "type": "number",
                            "format": "integer",
                            "description": "Identifier for the unit of weight.",
                            "example": 4
                          },
                          "transporters": {
                            "type": "array",
                            "description": "List of transporters for the transfer.",
                            "items": {
                              "type": "object",
                              "properties": {
                                "transporterId": {
                                  "type": "number",
                                  "format": "int32",
                                  "description": "Facility ID of the transporter facility. To find eligible transporter facilities, use the [Transporters](#/Create%20Transfer/get_v2_packages_create_transfer_transporter_list) endpoint.",
                                  "example": 12345
                                },
                                "phoneNumberForQuestions": {
                                  "type": "string",
                                  "description": "Phone number for inquiries.",
                                  "example": "1231231234"
                                },
                                "transporterDetails": {
                                  "type": "array",
                                  "description": "Details of the transporter.",
                                  "items": {
                                    "type": "object",
                                    "properties": {
                                      "driverName": {
                                        "type": "string",
                                        "description": "Name of the driver.",
                                        "example": "Jane Smith"
                                      },
                                      "driverOccupationalLicenseNumber": {
                                        "type": "string",
                                        "description": "Occupational license number of the driver.",
                                        "example": "LIC12345"
                                      },
                                      "driverLicenseNumber": {
                                        "type": "string",
                                        "description": "Driver's license number.",
                                        "example": "F11223-11231123"
                                      },
                                      "driverLayoverLeg": {
                                        "type": "string",
                                        "description": "Layover leg details (if any).",
                                        "example": "",
                                        "nullable": true
                                      },
                                      "vehicleMake": {
                                        "type": "string",
                                        "description": "Make of the vehicle.",
                                        "example": "Ford"
                                      },
                                      "vehicleModel": {
                                        "type": "string",
                                        "description": "Model of the vehicle.",
                                        "example": "GT"
                                      },
                                      "vehicleLicensePlateNumber": {
                                        "type": "string",
                                        "description": "License plate number of the vehicle.",
                                        "example": "G838381"
                                      }
                                    },
                                    "required": [
                                      "driverName",
                                      "driverOccupationalLicenseNumber",
                                      "driverLicenseNumber",
                                      "vehicleMake",
                                      "vehicleModel",
                                      "vehicleLicensePlateNumber"
                                    ]
                                  }
                                }
                              },
                              "required": [
                                "transporterId",
                                "phoneNumberForQuestions",
                                "transporterDetails"
                              ]
                            }
                          },
                          "packages": {
                            "type": "array",
                            "description": "List of packages in the transfer.",
                            "items": {
                              "type": "object",
                              "properties": {
                                "id": {
                                  "type": "number",
                                  "format": "integer",
                                  "description": "Identifier of the package.",
                                  "example": 123456
                                },
                                "wholesalePrice": {
                                  "type": "number",
                                  "format": "float",
                                  "description": "Wholesale price of the package.\n*Only required for wholesale transfers*\n",
                                  "example": 200.0,
                                  "nullable": true
                                },
                                "grossWeight": {
                                  "type": "number",
                                  "format": "float",
                                  "description": "Gross weight of the package. \n*Only applicable in some Metrc states*\n",
                                  "example": 123.45,
                                  "nullable": true
                                },
                                "grossUnitOfWeightId": {
                                  "type": "number",
                                  "format": "integer",
                                  "description": "Unit of weight identifier for the package.\n*Only applicable in some Metrc states*\n",
                                  "example": 5,
                                  "nullable": true
                                }
                              },
                              "required": [
                                "id"
                              ]
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The operation completed successfully.\n",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "type": "string",
                      "description": "Describes the nature of this successful operation\n- \"Success\" indicates the request passed validation and was successfully passed to Metrc\n- \"Dry run\" indicates the request passed validation, but the request was not sent to Metrc\n",
                      "example": "Success"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "An error response indicating the request was invalid. Refer to the response body for details.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "object",
                      "properties": {
                        "type": {
                          "type": "string",
                          "example": "BadRequest"
                        },
                        "message": {
                          "type": "string",
                          "example": "400 Bad Request: Invalid request body: 'note' is a required property"
                        },
                        "timestamp": {
                          "type": "string",
                          "format": "date-time",
                          "example": "2024-08-09T12:34:56.789Z"
                        },
                        "url": {
                          "type": "string",
                          "example": "https://api.trackandtrace.tools/some-endpoint"
                        },
                        "status_code": {
                          "type": "integer",
                          "example": 400
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "An error response indicating the server experienced an unexpected error.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "object",
                      "properties": {
                        "type": {
                          "type": "string",
                          "example": "InternalServerError"
                        },
                        "message": {
                          "type": "string",
                          "example": "500 InternalServerError"
                        },
                        "timestamp": {
                          "type": "string",
                          "format": "date-time",
                          "example": "2024-08-09T12:34:56.789Z"
                        },
                        "url": {
                          "type": "string",
                          "example": "https://api.trackandtrace.tools/some-endpoint"
                        },
                        "status_code": {
                          "type": "integer",
                          "example": 500
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "503": {
            "description": "An error response indicating the Metrc servers are experiencing downtime.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "object",
                      "properties": {
                        "type": {
                          "type": "string",
                          "example": "ServiceUnavailable"
                        },
                        "message": {
                          "type": "string",
                          "example": "503 ServiceUnavailable"
                        },
                        "timestamp": {
                          "type": "string",
                          "format": "date-time",
                          "example": "2024-08-09T12:34:56.789Z"
                        },
                        "url": {
                          "type": "string",
                          "example": "https://api.trackandtrace.tools/some-endpoint"
                        },
                        "status_code": {
                          "type": "integer",
                          "example": 503
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "licenseNumber",
            "description": "The unique identifier for the license associated with this request.",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "example": "LIC-00001"
            }
          },
          {
            "name": "submit",
            "in": "query",
            "required": false,
            "description": "Controls whether this request should be forwarded to Metrc.\n- **If present and set to 'true'**: The request will be validated and forwarded to Metrc if validation passes.\n- **If omitted or set to any value other than 'true'**: The request will only be validated.\nExamples:\n  - \"true\": Forward the request to Metrc\n  - \"false\": Execute a dry run\n",
            "schema": {
              "type": "string",
              "example": "true"
            }
          }
        ],
        "tags": [
          "Transfers",
          "Create Transfer"
        ]
      }
    },
    "/v2/transfers/create/destinations": {
      "get": {
        "summary": "List of destination facilities eligible to be used in creating new transfers",
        "responses": {
          "200": {
            "description": "A list of eligible facilities for this license",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/Pagination"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/MetrcFacility"
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "licenseNumber",
            "description": "The unique identifier for the license associated with this request.",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "example": "LIC-00001"
            }
          },
          {
            "name": "page",
            "description": "The index of the page to be returned.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 1,
              "example": 1
            }
          },
          {
            "name": "pageSize",
            "description": "The number of objects per page to be returned.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 100,
              "example": 100
            }
          },
          {
            "name": "strictPagination",
            "description": "Toggles strict pagination. Defaults to `false` (disabled)\n\n  - If enabled, requesting an out of bounds page will throw a 400. \n  - If disabled, requesting an out of bounds page will return a 200 and an empty page.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false,
              "example": true
            }
          },
          {
            "description": "Defines the collection sort order.",
            "name": "sort",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string",
              "example": "label:asc"
            }
          },
          {
            "name": "filterLogic",
            "description": "Describes how the filters, if any, should be applied",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "and",
                "or"
              ],
              "default": "and",
              "example": "and"
            }
          },
          {
            "description": "One or more collection filters.",
            "name": "filter",
            "in": "query",
            "required": false,
            "schema": {
              "type": "array",
              "example": "label__endswith:0003",
              "items": {
                "type": "string"
              }
            },
            "style": "form",
            "explode": true
          }
        ],
        "tags": [
          "Packages",
          "Transfers",
          "Facilities",
          "Create Transfer"
        ]
      }
    },
    "/v2/transfers/create/transporters": {
      "get": {
        "summary": "List of transporter facilities eligible to be used in creating new transfers",
        "responses": {
          "200": {
            "description": "A list of eligible facilities for this license",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/Pagination"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/MetrcFacility"
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "licenseNumber",
            "description": "The unique identifier for the license associated with this request.",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "example": "LIC-00001"
            }
          },
          {
            "name": "page",
            "description": "The index of the page to be returned.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 1,
              "example": 1
            }
          },
          {
            "name": "pageSize",
            "description": "The number of objects per page to be returned.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 100,
              "example": 100
            }
          },
          {
            "name": "strictPagination",
            "description": "Toggles strict pagination. Defaults to `false` (disabled)\n\n  - If enabled, requesting an out of bounds page will throw a 400. \n  - If disabled, requesting an out of bounds page will return a 200 and an empty page.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false,
              "example": true
            }
          },
          {
            "description": "Defines the collection sort order.",
            "name": "sort",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string",
              "example": "label:asc"
            }
          },
          {
            "name": "filterLogic",
            "description": "Describes how the filters, if any, should be applied",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "and",
                "or"
              ],
              "default": "and",
              "example": "and"
            }
          },
          {
            "description": "One or more collection filters.",
            "name": "filter",
            "in": "query",
            "required": false,
            "schema": {
              "type": "array",
              "example": "label__endswith:0003",
              "items": {
                "type": "string"
              }
            },
            "style": "form",
            "explode": true
          }
        ],
        "tags": [
          "Packages",
          "Transfers",
          "Facilities",
          "Create Transfer"
        ]
      }
    },
    "/v2/transfers/incoming/manifest/report": {
      "get": {
        "summary": "Generate a report of all incoming transfer manifests",
        "description": "**Note: this endpoint supports secret key authentication.**\n",
        "responses": {
          "200": {
            "description": "A list of transfer manifests for this license",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "generatedAt": {
                      "type": "string",
                      "format": "date-time",
                      "example": "2024-07-25T00:00:00+00:00"
                    },
                    "filters": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "example": [
                        "manifestNumber__endswith:0003",
                        "productName__contains:kush"
                      ]
                    },
                    "filterLogic": {
                      "type": "string",
                      "description": "The filter logic specified for this report, if any",
                      "example": "and",
                      "nullable": true
                    },
                    "sort": {
                      "type": "string",
                      "description": "The sort order specified for this report, if any",
                      "example": "label:asc",
                      "nullable": true
                    },
                    "licenseNumber": {
                      "type": "string",
                      "description": "The unique identifier for the license associated with this request.",
                      "example": "LIC-00001"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/T3IncomingTransferManifest"
                      }
                    }
                  }
                }
              },
              "text/csv": {
                "schema": {
                  "type": "string",
                  "example": "transfer.manifestNumber,transfer.recipientFacilityLicenseNumber,transfer.recipientFacilityName,package.packageLabel,package.productName,package.shippedQuantity,package.shippedUnitOfMeasureAbbreviation\n1000056,1A4400000000000000001234,Bubba Kush Flower,10,g\n1000056,1A4400000000000000001235,Bubba Kush Flower,10,g\n1000057,1A4400000000000000005678,Bubba Kush Flower,5,g"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "licenseNumber",
            "description": "The unique identifier for the license associated with this request.",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "example": "LIC-00001"
            }
          },
          {
            "name": "secretKey",
            "description": "Your secret key, if you wish to authenticate via query params. Secret keys can be manually generated [here](/v2/pages/secret-key).\n",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "example": "2616ec56-fa2a-4c5b-86c0-acacf23c9ef7"
            }
          },
          {
            "name": "filterLogic",
            "description": "Describes how the filters, if any, should be applied",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "and",
                "or"
              ],
              "default": "and",
              "example": "and"
            }
          },
          {
            "name": "contentType",
            "description": "Specifies how the report should be formatted. Can be returned as json or csv.\n*This can also be defined in the Content-Type header*\n",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "json",
                "csv"
              ],
              "default": "json",
              "example": "json"
            }
          },
          {
            "name": "prependCsvMetadata",
            "description": "Controls if the CSV header metadata should be included in the output.\nWhen set to false, only the column headers and data will be returned.\n",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "true",
                "false"
              ],
              "default": "true",
              "example": "true"
            }
          },
          {
            "description": "Defines the collection sort order.",
            "name": "sort",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string",
              "example": "label:asc"
            }
          },
          {
            "description": "One or more collection filters.",
            "name": "filter",
            "in": "query",
            "required": false,
            "schema": {
              "type": "array",
              "example": "label__endswith:0003",
              "items": {
                "type": "string"
              }
            },
            "style": "form",
            "explode": true
          },
          {
            "name": "fieldnames",
            "description": "Defines which transfer manifest fields should appear in the report data.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "default": "transfer.manifestNumber,transfer.recipientFacilityLicenseNumber,transfer.recipientFacilityName,transporter.transporterFacilityName,transporter.transporterFacilityLicenseNumber,package.packageLabel,package.productName,package.shippedQuantity,package.shippedUnitOfMeasureAbbreviation",
              "example": "transfer.manifestNumber,transfer.recipientFacilityLicenseNumber,transfer.recipientFacilityName,transporter.transporterFacilityName,transporter.transporterFacilityLicenseNumber,package.packageLabel,package.productName,package.shippedQuantity,package.shippedUnitOfMeasureAbbreviation"
            }
          }
        ],
        "tags": [
          "Transfers",
          "Reports",
          "Manifests"
        ]
      }
    },
    "/v2/transfers/outgoing/manifest/report": {
      "get": {
        "summary": "Generate a report of all outgoing transfer manifests",
        "description": "**Note: this endpoint supports secret key authentication.**\n",
        "responses": {
          "200": {
            "description": "A list of transfer manifests for this license",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "generatedAt": {
                      "type": "string",
                      "format": "date-time",
                      "example": "2024-07-25T00:00:00+00:00"
                    },
                    "filters": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "example": [
                        "manifestNumber__endswith:0003",
                        "productName__contains:kush"
                      ]
                    },
                    "filterLogic": {
                      "type": "string",
                      "description": "The filter logic specified for this report, if any",
                      "example": "and",
                      "nullable": true
                    },
                    "sort": {
                      "type": "string",
                      "description": "The sort order specified for this report, if any",
                      "example": "label:asc",
                      "nullable": true
                    },
                    "licenseNumber": {
                      "type": "string",
                      "description": "The unique identifier for the license associated with this request.",
                      "example": "LIC-00001"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/T3OutgoingTransferManifest"
                      }
                    }
                  }
                }
              },
              "text/csv": {
                "schema": {
                  "type": "string",
                  "example": "transfer.manifestNumber,delivery.recipientFacilityLicenseNumber,delivery.recipientFacilityName,package.packageLabel,package.productName,package.shippedQuantity,package.shippedUnitOfMeasureAbbreviation\n1000056,EX00001,Foo Bar LLC,1A4400000000000000001234,Bubba Kush Flower,10\n1000056,EX00001,Foo Bar LLC,1A4400000000000000001235,Bubba Kush Flower,10\n1000057,EX00002,Baz LLC,1A4400000000000000005678,Bubba Kush Flower,5"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "licenseNumber",
            "description": "The unique identifier for the license associated with this request.",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "example": "LIC-00001"
            }
          },
          {
            "name": "secretKey",
            "description": "Your secret key, if you wish to authenticate via query params. Secret keys can be manually generated [here](/v2/pages/secret-key).\n",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "example": "2616ec56-fa2a-4c5b-86c0-acacf23c9ef7"
            }
          },
          {
            "name": "filterLogic",
            "description": "Describes how the filters, if any, should be applied",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "and",
                "or"
              ],
              "default": "and",
              "example": "and"
            }
          },
          {
            "name": "contentType",
            "description": "Specifies how the report should be formatted. Can be returned as json or csv.\n*This can also be defined in the Content-Type header*\n",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "json",
                "csv"
              ],
              "default": "json",
              "example": "json"
            }
          },
          {
            "name": "prependCsvMetadata",
            "description": "Controls if the CSV header metadata should be included in the output.\nWhen set to false, only the column headers and data will be returned.\n",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "true",
                "false"
              ],
              "default": "true",
              "example": "true"
            }
          },
          {
            "description": "Defines the collection sort order.",
            "name": "sort",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string",
              "example": "label:asc"
            }
          },
          {
            "description": "One or more collection filters.",
            "name": "filter",
            "in": "query",
            "required": false,
            "schema": {
              "type": "array",
              "example": "label__endswith:0003",
              "items": {
                "type": "string"
              }
            },
            "style": "form",
            "explode": true
          },
          {
            "name": "fieldnames",
            "description": "Defines which transfer manifest fields should appear in the report data.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "default": "transfer.manifestNumber,delivery.recipientFacilityLicenseNumber,delivery.recipientFacilityName,transporter.transporterFacilityName,transporter.transporterFacilityLicenseNumber,transporterDetails.driverName,transporterDetails.driverVehicleLicenseNumber,transporterDetails.vehicleMake,transporterDetails.vehicleModel,transporterDetails.vehicleLicensePlateNumber,package.packageLabel,package.productName,package.shippedQuantity,package.shippedUnitOfMeasureAbbreviation",
              "example": "transfer.manifestNumber,delivery.recipientFacilityLicenseNumber,delivery.recipientFacilityName,transporter.transporterFacilityName,transporter.transporterFacilityLicenseNumber,transporterDetails.driverName,transporterDetails.driverVehicleLicenseNumber,transporterDetails.vehicleMake,transporterDetails.vehicleModel,transporterDetails.vehicleLicensePlateNumber,package.packageLabel,package.productName,package.shippedQuantity,package.shippedUnitOfMeasureAbbreviation"
            }
          }
        ],
        "tags": [
          "Transfers",
          "Reports",
          "Manifests"
        ]
      }
    },
    "/v2/plants/vegetative": {
      "get": {
        "summary": "List of vegetative plants",
        "description": "NOTE: States such as CA do not use vegetative plants, plant batches are promoted directly to flowering.\n",
        "responses": {
          "200": {
            "description": "A list of vegetative plants for this license",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/Pagination"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/MetrcPlant"
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "licenseNumber",
            "description": "The unique identifier for the license associated with this request.",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "example": "LIC-00001"
            }
          },
          {
            "name": "page",
            "description": "The index of the page to be returned.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 1,
              "example": 1
            }
          },
          {
            "name": "pageSize",
            "description": "The number of objects per page to be returned.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 100,
              "example": 100
            }
          },
          {
            "name": "strictPagination",
            "description": "Toggles strict pagination. Defaults to `false` (disabled)\n\n  - If enabled, requesting an out of bounds page will throw a 400. \n  - If disabled, requesting an out of bounds page will return a 200 and an empty page.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false,
              "example": true
            }
          },
          {
            "description": "Defines the collection sort order.",
            "name": "sort",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string",
              "example": "label:asc"
            }
          },
          {
            "name": "filterLogic",
            "description": "Describes how the filters, if any, should be applied",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "and",
                "or"
              ],
              "default": "and",
              "example": "and"
            }
          },
          {
            "description": "One or more collection filters.",
            "name": "filter",
            "in": "query",
            "required": false,
            "schema": {
              "type": "array",
              "example": "label__endswith:0003",
              "items": {
                "type": "string"
              }
            },
            "style": "form",
            "explode": true
          }
        ],
        "tags": [
          "Plants"
        ]
      }
    },
    "/v2/plants/vegetative/report": {
      "get": {
        "summary": "Generate a report of all vegetative plants",
        "description": "**Note: this endpoint supports secret key authentication.**\n",
        "responses": {
          "200": {
            "description": "A list of vegetative plants for this license",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "generatedAt": {
                      "type": "string",
                      "format": "date-time",
                      "example": "2024-07-25T00:00:00+00:00"
                    },
                    "filters": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "example": [
                        "label__endswith:0003",
                        "item.name__contains:kush"
                      ]
                    },
                    "filterLogic": {
                      "type": "string",
                      "description": "The filter logic specified for this report, if any",
                      "example": "and",
                      "nullable": true
                    },
                    "sort": {
                      "type": "string",
                      "description": "The sort order specified for this report, if any",
                      "example": "label:asc",
                      "nullable": true
                    },
                    "licenseNumber": {
                      "type": "string",
                      "description": "The unique identifier for the license associated with this request.",
                      "example": "LIC-00001"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/MetrcPlant"
                      }
                    }
                  }
                }
              },
              "text/csv": {
                "schema": {
                  "type": "string",
                  "example": "label,strainName,locationName\n1A4400000000000000001234,Wedding Cake,Row 10\n1A4400000000000000005678,Wedding Cake,Row 5"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "licenseNumber",
            "description": "The unique identifier for the license associated with this request.",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "example": "LIC-00001"
            }
          },
          {
            "name": "secretKey",
            "description": "Your secret key, if you wish to authenticate via query params. Secret keys can be manually generated [here](/v2/pages/secret-key).\n",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "example": "2616ec56-fa2a-4c5b-86c0-acacf23c9ef7"
            }
          },
          {
            "name": "filterLogic",
            "description": "Describes how the filters, if any, should be applied",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "and",
                "or"
              ],
              "default": "and",
              "example": "and"
            }
          },
          {
            "name": "contentType",
            "description": "Specifies how the report should be formatted. Can be returned as json or csv.\n*This can also be defined in the Content-Type header*\n",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "json",
                "csv"
              ],
              "default": "json",
              "example": "json"
            }
          },
          {
            "name": "prependCsvMetadata",
            "description": "Controls if the CSV header metadata should be included in the output.\nWhen set to false, only the column headers and data will be returned.\n",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "true",
                "false"
              ],
              "default": "true",
              "example": "true"
            }
          },
          {
            "description": "Defines the collection sort order.",
            "name": "sort",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string",
              "example": "label:asc"
            }
          },
          {
            "description": "One or more collection filters.",
            "name": "filter",
            "in": "query",
            "required": false,
            "schema": {
              "type": "array",
              "example": "label__endswith:0003",
              "items": {
                "type": "string"
              }
            },
            "style": "form",
            "explode": true
          },
          {
            "name": "fieldnames",
            "description": "Defines which plant fields should appear in the report data.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "default": "label,locationName,strainName,plantedDate",
              "example": "label,locationName,strainName,plantedDate"
            }
          }
        ],
        "tags": [
          "Plants",
          "Reports"
        ]
      }
    },
    "/v2/plants/flowering": {
      "get": {
        "summary": "List of flowering plants",
        "responses": {
          "200": {
            "description": "A list of flowering plants for this license",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/Pagination"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/MetrcPlant"
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "licenseNumber",
            "description": "The unique identifier for the license associated with this request.",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "example": "LIC-00001"
            }
          },
          {
            "name": "page",
            "description": "The index of the page to be returned.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 1,
              "example": 1
            }
          },
          {
            "name": "pageSize",
            "description": "The number of objects per page to be returned.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 100,
              "example": 100
            }
          },
          {
            "name": "strictPagination",
            "description": "Toggles strict pagination. Defaults to `false` (disabled)\n\n  - If enabled, requesting an out of bounds page will throw a 400. \n  - If disabled, requesting an out of bounds page will return a 200 and an empty page.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false,
              "example": true
            }
          },
          {
            "description": "Defines the collection sort order.",
            "name": "sort",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string",
              "example": "label:asc"
            }
          },
          {
            "name": "filterLogic",
            "description": "Describes how the filters, if any, should be applied",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "and",
                "or"
              ],
              "default": "and",
              "example": "and"
            }
          },
          {
            "description": "One or more collection filters.",
            "name": "filter",
            "in": "query",
            "required": false,
            "schema": {
              "type": "array",
              "example": "label__endswith:0003",
              "items": {
                "type": "string"
              }
            },
            "style": "form",
            "explode": true
          }
        ],
        "tags": [
          "Plants"
        ]
      }
    },
    "/v2/plants/flowering/report": {
      "get": {
        "summary": "Generate a report of all flowering plants",
        "description": "**Note: this endpoint supports secret key authentication.**\n",
        "responses": {
          "200": {
            "description": "A list of flowering plants for this license",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "generatedAt": {
                      "type": "string",
                      "format": "date-time",
                      "example": "2024-07-25T00:00:00+00:00"
                    },
                    "filters": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "example": [
                        "label__endswith:0003",
                        "item.name__contains:kush"
                      ]
                    },
                    "filterLogic": {
                      "type": "string",
                      "description": "The filter logic specified for this report, if any",
                      "example": "and",
                      "nullable": true
                    },
                    "sort": {
                      "type": "string",
                      "description": "The sort order specified for this report, if any",
                      "example": "label:asc",
                      "nullable": true
                    },
                    "licenseNumber": {
                      "type": "string",
                      "description": "The unique identifier for the license associated with this request.",
                      "example": "LIC-00001"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/MetrcPlant"
                      }
                    }
                  }
                }
              },
              "text/csv": {
                "schema": {
                  "type": "string",
                  "example": "label,strainName,locationName\n1A4400000000000000001234,Wedding Cake,Row 10\n1A4400000000000000005678,Wedding Cake,Row 5"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "licenseNumber",
            "description": "The unique identifier for the license associated with this request.",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "example": "LIC-00001"
            }
          },
          {
            "name": "secretKey",
            "description": "Your secret key, if you wish to authenticate via query params. Secret keys can be manually generated [here](/v2/pages/secret-key).\n",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "example": "2616ec56-fa2a-4c5b-86c0-acacf23c9ef7"
            }
          },
          {
            "name": "filterLogic",
            "description": "Describes how the filters, if any, should be applied",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "and",
                "or"
              ],
              "default": "and",
              "example": "and"
            }
          },
          {
            "name": "contentType",
            "description": "Specifies how the report should be formatted. Can be returned as json or csv.\n*This can also be defined in the Content-Type header*\n",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "json",
                "csv"
              ],
              "default": "json",
              "example": "json"
            }
          },
          {
            "name": "prependCsvMetadata",
            "description": "Controls if the CSV header metadata should be included in the output.\nWhen set to false, only the column headers and data will be returned.\n",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "true",
                "false"
              ],
              "default": "true",
              "example": "true"
            }
          },
          {
            "description": "Defines the collection sort order.",
            "name": "sort",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string",
              "example": "label:asc"
            }
          },
          {
            "description": "One or more collection filters.",
            "name": "filter",
            "in": "query",
            "required": false,
            "schema": {
              "type": "array",
              "example": "label__endswith:0003",
              "items": {
                "type": "string"
              }
            },
            "style": "form",
            "explode": true
          },
          {
            "name": "fieldnames",
            "description": "Defines which plant fields should appear in the report data.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "default": "label,locationName,strainName,plantedDate",
              "example": "label,locationName,strainName,plantedDate"
            }
          }
        ],
        "tags": [
          "Plants",
          "Reports"
        ]
      }
    },
    "/v2/plants/onhold": {
      "get": {
        "summary": "List of on hold plants",
        "responses": {
          "200": {
            "description": "A list of on hold plants for this license",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/Pagination"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/MetrcPlant"
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "licenseNumber",
            "description": "The unique identifier for the license associated with this request.",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "example": "LIC-00001"
            }
          },
          {
            "name": "page",
            "description": "The index of the page to be returned.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 1,
              "example": 1
            }
          },
          {
            "name": "pageSize",
            "description": "The number of objects per page to be returned.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 100,
              "example": 100
            }
          },
          {
            "name": "strictPagination",
            "description": "Toggles strict pagination. Defaults to `false` (disabled)\n\n  - If enabled, requesting an out of bounds page will throw a 400. \n  - If disabled, requesting an out of bounds page will return a 200 and an empty page.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false,
              "example": true
            }
          },
          {
            "description": "Defines the collection sort order.",
            "name": "sort",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string",
              "example": "label:asc"
            }
          },
          {
            "name": "filterLogic",
            "description": "Describes how the filters, if any, should be applied",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "and",
                "or"
              ],
              "default": "and",
              "example": "and"
            }
          },
          {
            "description": "One or more collection filters.",
            "name": "filter",
            "in": "query",
            "required": false,
            "schema": {
              "type": "array",
              "example": "label__endswith:0003",
              "items": {
                "type": "string"
              }
            },
            "style": "form",
            "explode": true
          }
        ],
        "tags": [
          "Plants"
        ]
      }
    },
    "/v2/plants/inactive": {
      "get": {
        "summary": "List of inactive plants",
        "responses": {
          "200": {
            "description": "A list of inactive plants for this license",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/Pagination"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/MetrcPlant"
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "licenseNumber",
            "description": "The unique identifier for the license associated with this request.",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "example": "LIC-00001"
            }
          },
          {
            "name": "page",
            "description": "The index of the page to be returned.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 1,
              "example": 1
            }
          },
          {
            "name": "pageSize",
            "description": "The number of objects per page to be returned.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 100,
              "example": 100
            }
          },
          {
            "name": "strictPagination",
            "description": "Toggles strict pagination. Defaults to `false` (disabled)\n\n  - If enabled, requesting an out of bounds page will throw a 400. \n  - If disabled, requesting an out of bounds page will return a 200 and an empty page.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false,
              "example": true
            }
          },
          {
            "description": "Defines the collection sort order.",
            "name": "sort",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string",
              "example": "label:asc"
            }
          },
          {
            "name": "filterLogic",
            "description": "Describes how the filters, if any, should be applied",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "and",
                "or"
              ],
              "default": "and",
              "example": "and"
            }
          },
          {
            "description": "One or more collection filters.",
            "name": "filter",
            "in": "query",
            "required": false,
            "schema": {
              "type": "array",
              "example": "label__endswith:0003",
              "items": {
                "type": "string"
              }
            },
            "style": "form",
            "explode": true
          }
        ],
        "tags": [
          "Plants"
        ]
      }
    },
    "/v2/plants/history": {
      "get": {
        "summary": "List of history objects for a single plant",
        "responses": {
          "200": {
            "description": "A list of package history objects for the specified plant.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/Pagination"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/MetrcHistory"
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "The plant with id={plantId} was not found in the specified license, or you do not have access to view this plant's history"
          }
        },
        "parameters": [
          {
            "name": "licenseNumber",
            "description": "The unique identifier for the license associated with this request.",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "example": "LIC-00001"
            }
          },
          {
            "name": "plantId",
            "description": "ID of the target plant",
            "in": "query",
            "required": true,
            "schema": {
              "type": "number",
              "example": 123
            }
          },
          {
            "name": "page",
            "description": "The index of the page to be returned.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 1,
              "example": 1
            }
          },
          {
            "name": "pageSize",
            "description": "The number of objects per page to be returned.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 100,
              "example": 100
            }
          },
          {
            "name": "strictPagination",
            "description": "Toggles strict pagination. Defaults to `false` (disabled)\n\n  - If enabled, requesting an out of bounds page will throw a 400. \n  - If disabled, requesting an out of bounds page will return a 200 and an empty page.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false,
              "example": true
            }
          },
          {
            "description": "Defines the collection sort order.",
            "name": "sort",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string",
              "example": "label:asc"
            }
          },
          {
            "name": "filterLogic",
            "description": "Describes how the filters, if any, should be applied",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "and",
                "or"
              ],
              "default": "and",
              "example": "and"
            }
          },
          {
            "description": "One or more collection filters.",
            "name": "filter",
            "in": "query",
            "required": false,
            "schema": {
              "type": "array",
              "example": "label__endswith:0003",
              "items": {
                "type": "string"
              }
            },
            "style": "form",
            "explode": true
          }
        ],
        "tags": [
          "Plants",
          "Single Plant",
          "History"
        ]
      }
    },
    "/v2/plantbatches/active": {
      "get": {
        "summary": "List of active plant batches",
        "description": "NOTE: States such as CA use Metrc plant tags as names, other states allow unrestricted names for plant batches.\n",
        "responses": {
          "200": {
            "description": "A list of active plantbatches for this license",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/Pagination"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/MetrcPlantBatch"
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "licenseNumber",
            "description": "The unique identifier for the license associated with this request.",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "example": "LIC-00001"
            }
          },
          {
            "name": "page",
            "description": "The index of the page to be returned.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 1,
              "example": 1
            }
          },
          {
            "name": "pageSize",
            "description": "The number of objects per page to be returned.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 100,
              "example": 100
            }
          },
          {
            "name": "strictPagination",
            "description": "Toggles strict pagination. Defaults to `false` (disabled)\n\n  - If enabled, requesting an out of bounds page will throw a 400. \n  - If disabled, requesting an out of bounds page will return a 200 and an empty page.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false,
              "example": true
            }
          },
          {
            "description": "Defines the collection sort order.",
            "name": "sort",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string",
              "example": "label:asc"
            }
          },
          {
            "name": "filterLogic",
            "description": "Describes how the filters, if any, should be applied",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "and",
                "or"
              ],
              "default": "and",
              "example": "and"
            }
          },
          {
            "description": "One or more collection filters.",
            "name": "filter",
            "in": "query",
            "required": false,
            "schema": {
              "type": "array",
              "example": "label__endswith:0003",
              "items": {
                "type": "string"
              }
            },
            "style": "form",
            "explode": true
          }
        ],
        "tags": [
          "Plant Batches"
        ]
      }
    },
    "/v2/plantbatches/active/report": {
      "get": {
        "summary": "Generate a report of all active plant batches",
        "description": "**Note: this endpoint supports secret key authentication.**\n",
        "responses": {
          "200": {
            "description": "A list of active plant batches for this license",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "generatedAt": {
                      "type": "string",
                      "format": "date-time",
                      "example": "2024-07-25T00:00:00+00:00"
                    },
                    "filters": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "example": [
                        "name__endswith:0003",
                        "strainName__contains:kush"
                      ]
                    },
                    "filterLogic": {
                      "type": "string",
                      "description": "The filter logic specified for this report, if any",
                      "example": "and",
                      "nullable": true
                    },
                    "sort": {
                      "type": "string",
                      "description": "The sort order specified for this report, if any",
                      "example": "label:asc",
                      "nullable": true
                    },
                    "licenseNumber": {
                      "type": "string",
                      "description": "The unique identifier for the license associated with this request.",
                      "example": "LIC-00001"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/MetrcPlantBatch"
                      }
                    }
                  }
                }
              },
              "text/csv": {
                "schema": {
                  "type": "string",
                  "example": "name,strainName,locationName\n1A4400000000000000001234,Wedding Cake,Row 10\n1A4400000000000000005678,Wedding Cake,Row 5"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "licenseNumber",
            "description": "The unique identifier for the license associated with this request.",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "example": "LIC-00001"
            }
          },
          {
            "name": "secretKey",
            "description": "Your secret key, if you wish to authenticate via query params. Secret keys can be manually generated [here](/v2/pages/secret-key).\n",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "example": "2616ec56-fa2a-4c5b-86c0-acacf23c9ef7"
            }
          },
          {
            "name": "filterLogic",
            "description": "Describes how the filters, if any, should be applied",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "and",
                "or"
              ],
              "default": "and",
              "example": "and"
            }
          },
          {
            "name": "contentType",
            "description": "Specifies how the report should be formatted. Can be returned as json or csv.\n*This can also be defined in the Content-Type header*\n",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "json",
                "csv"
              ],
              "default": "json",
              "example": "json"
            }
          },
          {
            "name": "prependCsvMetadata",
            "description": "Controls if the CSV header metadata should be included in the output.\nWhen set to false, only the column headers and data will be returned.\n",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "true",
                "false"
              ],
              "default": "true",
              "example": "true"
            }
          },
          {
            "description": "Defines the collection sort order.",
            "name": "sort",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string",
              "example": "label:asc"
            }
          },
          {
            "description": "One or more collection filters.",
            "name": "filter",
            "in": "query",
            "required": false,
            "schema": {
              "type": "array",
              "example": "label__endswith:0003",
              "items": {
                "type": "string"
              }
            },
            "style": "form",
            "explode": true
          },
          {
            "name": "fieldnames",
            "description": "Defines which plant fields should appear in the report data.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "default": "name,locationName,strainName,plantedDate,untrackedCount",
              "example": "name,locationName,strainName,plantedDate,untrackedCount"
            }
          }
        ],
        "tags": [
          "Plant Batches",
          "Reports"
        ]
      }
    },
    "/v2/plantbatches/onhold": {
      "get": {
        "summary": "List of on hold plantbatches",
        "responses": {
          "200": {
            "description": "A list of on hold plantbatches for this license",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/Pagination"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/MetrcPlantBatch"
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "licenseNumber",
            "description": "The unique identifier for the license associated with this request.",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "example": "LIC-00001"
            }
          },
          {
            "name": "page",
            "description": "The index of the page to be returned.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 1,
              "example": 1
            }
          },
          {
            "name": "pageSize",
            "description": "The number of objects per page to be returned.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 100,
              "example": 100
            }
          },
          {
            "name": "strictPagination",
            "description": "Toggles strict pagination. Defaults to `false` (disabled)\n\n  - If enabled, requesting an out of bounds page will throw a 400. \n  - If disabled, requesting an out of bounds page will return a 200 and an empty page.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false,
              "example": true
            }
          },
          {
            "description": "Defines the collection sort order.",
            "name": "sort",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string",
              "example": "label:asc"
            }
          },
          {
            "name": "filterLogic",
            "description": "Describes how the filters, if any, should be applied",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "and",
                "or"
              ],
              "default": "and",
              "example": "and"
            }
          },
          {
            "description": "One or more collection filters.",
            "name": "filter",
            "in": "query",
            "required": false,
            "schema": {
              "type": "array",
              "example": "label__endswith:0003",
              "items": {
                "type": "string"
              }
            },
            "style": "form",
            "explode": true
          }
        ],
        "tags": [
          "Plant Batches"
        ]
      }
    },
    "/v2/plantbatches/inactive": {
      "get": {
        "summary": "List of inactive plantbatches",
        "responses": {
          "200": {
            "description": "A list of inactive plantbatches for this license",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/Pagination"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/MetrcPlantBatch"
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "licenseNumber",
            "description": "The unique identifier for the license associated with this request.",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "example": "LIC-00001"
            }
          },
          {
            "name": "page",
            "description": "The index of the page to be returned.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 1,
              "example": 1
            }
          },
          {
            "name": "pageSize",
            "description": "The number of objects per page to be returned.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 100,
              "example": 100
            }
          },
          {
            "name": "strictPagination",
            "description": "Toggles strict pagination. Defaults to `false` (disabled)\n\n  - If enabled, requesting an out of bounds page will throw a 400. \n  - If disabled, requesting an out of bounds page will return a 200 and an empty page.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false,
              "example": true
            }
          },
          {
            "description": "Defines the collection sort order.",
            "name": "sort",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string",
              "example": "label:asc"
            }
          },
          {
            "name": "filterLogic",
            "description": "Describes how the filters, if any, should be applied",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "and",
                "or"
              ],
              "default": "and",
              "example": "and"
            }
          },
          {
            "description": "One or more collection filters.",
            "name": "filter",
            "in": "query",
            "required": false,
            "schema": {
              "type": "array",
              "example": "label__endswith:0003",
              "items": {
                "type": "string"
              }
            },
            "style": "form",
            "explode": true
          }
        ],
        "tags": [
          "Plant Batches"
        ]
      }
    },
    "/v2/plantbatches/history": {
      "get": {
        "summary": "List of history objects for a single plant batch",
        "description": "NOTE: only supports INACTIVE plant batches\n",
        "responses": {
          "200": {
            "description": "A list of package history objects for the specified plant batch.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/Pagination"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/MetrcHistory"
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "The plant batch with id={plantBatchId} was not found in the specified license, or you do not have access to view this plant batch's history"
          }
        },
        "parameters": [
          {
            "name": "licenseNumber",
            "description": "The unique identifier for the license associated with this request.",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "example": "LIC-00001"
            }
          },
          {
            "name": "plantBatchId",
            "description": "ID of the target plant batch",
            "in": "query",
            "required": true,
            "schema": {
              "type": "number",
              "example": 123
            }
          },
          {
            "name": "page",
            "description": "The index of the page to be returned.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 1,
              "example": 1
            }
          },
          {
            "name": "pageSize",
            "description": "The number of objects per page to be returned.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 100,
              "example": 100
            }
          },
          {
            "name": "strictPagination",
            "description": "Toggles strict pagination. Defaults to `false` (disabled)\n\n  - If enabled, requesting an out of bounds page will throw a 400. \n  - If disabled, requesting an out of bounds page will return a 200 and an empty page.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false,
              "example": true
            }
          },
          {
            "description": "Defines the collection sort order.",
            "name": "sort",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string",
              "example": "label:asc"
            }
          },
          {
            "name": "filterLogic",
            "description": "Describes how the filters, if any, should be applied",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "and",
                "or"
              ],
              "default": "and",
              "example": "and"
            }
          },
          {
            "description": "One or more collection filters.",
            "name": "filter",
            "in": "query",
            "required": false,
            "schema": {
              "type": "array",
              "example": "label__endswith:0003",
              "items": {
                "type": "string"
              }
            },
            "style": "form",
            "explode": true
          }
        ],
        "tags": [
          "Plant Batches",
          "Single Plant Batch",
          "History"
        ]
      }
    },
    "/v2/harvests/active": {
      "get": {
        "summary": "List of active harvests",
        "responses": {
          "200": {
            "description": "A list of active harvests for this license",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/Pagination"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/MetrcHarvest"
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "licenseNumber",
            "description": "The unique identifier for the license associated with this request.",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "example": "LIC-00001"
            }
          },
          {
            "name": "page",
            "description": "The index of the page to be returned.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 1,
              "example": 1
            }
          },
          {
            "name": "pageSize",
            "description": "The number of objects per page to be returned.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 100,
              "example": 100
            }
          },
          {
            "name": "strictPagination",
            "description": "Toggles strict pagination. Defaults to `false` (disabled)\n\n  - If enabled, requesting an out of bounds page will throw a 400. \n  - If disabled, requesting an out of bounds page will return a 200 and an empty page.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false,
              "example": true
            }
          },
          {
            "description": "Defines the collection sort order.",
            "name": "sort",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string",
              "example": "label:asc"
            }
          },
          {
            "name": "filterLogic",
            "description": "Describes how the filters, if any, should be applied",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "and",
                "or"
              ],
              "default": "and",
              "example": "and"
            }
          },
          {
            "description": "One or more collection filters.",
            "name": "filter",
            "in": "query",
            "required": false,
            "schema": {
              "type": "array",
              "example": "label__endswith:0003",
              "items": {
                "type": "string"
              }
            },
            "style": "form",
            "explode": true
          }
        ],
        "tags": [
          "Harvests"
        ]
      }
    },
    "/v2/harvests/active/report": {
      "get": {
        "summary": "Generate a report of all active harvests",
        "description": "**Note: this endpoint supports secret key authentication.**\n",
        "responses": {
          "200": {
            "description": "A list of active harvests for this license",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "generatedAt": {
                      "type": "string",
                      "format": "date-time",
                      "example": "2024-07-25T00:00:00+00:00"
                    },
                    "filters": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "example": [
                        "name__endswith:0003",
                        "name__contains:kush"
                      ]
                    },
                    "filterLogic": {
                      "type": "string",
                      "description": "The filter logic specified for this report, if any",
                      "example": "and",
                      "nullable": true
                    },
                    "sort": {
                      "type": "string",
                      "description": "The sort order specified for this report, if any",
                      "example": "label:asc",
                      "nullable": true
                    },
                    "licenseNumber": {
                      "type": "string",
                      "description": "The unique identifier for the license associated with this request.",
                      "example": "LIC-00001"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/MetrcHarvest"
                      }
                    }
                  }
                }
              },
              "text/csv": {
                "schema": {
                  "type": "string",
                  "example": "name,dryingLocationName,plantCount\nHarvest001,Curing Room,100\nHarvest002,Curing Room,85"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "licenseNumber",
            "description": "The unique identifier for the license associated with this request.",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "example": "LIC-00001"
            }
          },
          {
            "name": "secretKey",
            "description": "Your secret key, if you wish to authenticate via query params. Secret keys can be manually generated [here](/v2/pages/secret-key).\n",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "example": "2616ec56-fa2a-4c5b-86c0-acacf23c9ef7"
            }
          },
          {
            "name": "filterLogic",
            "description": "Describes how the filters, if any, should be applied",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "and",
                "or"
              ],
              "default": "and",
              "example": "and"
            }
          },
          {
            "name": "contentType",
            "description": "Specifies how the report should be formatted. Can be returned as json or csv.\n*This can also be defined in the Content-Type header*\n",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "json",
                "csv"
              ],
              "default": "json",
              "example": "json"
            }
          },
          {
            "name": "prependCsvMetadata",
            "description": "Controls if the CSV header metadata should be included in the output.\nWhen set to false, only the column headers and data will be returned.\n",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "true",
                "false"
              ],
              "default": "true",
              "example": "true"
            }
          },
          {
            "description": "Defines the collection sort order.",
            "name": "sort",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string",
              "example": "label:asc"
            }
          },
          {
            "description": "One or more collection filters.",
            "name": "filter",
            "in": "query",
            "required": false,
            "schema": {
              "type": "array",
              "example": "label__endswith:0003",
              "items": {
                "type": "string"
              }
            },
            "style": "form",
            "explode": true
          },
          {
            "name": "fieldnames",
            "description": "Defines which plant fields should appear in the report data.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "default": "name,harvestStartDate,dryingLocationName,plantCount,currentWeight,totalWetWeight,totalPackagedWeight,totalWasteWeight,unitOfWeightAbbreviation",
              "example": "name,harvestStartDate,dryingLocationName,plantCount,currentWeight,totalWetWeight,totalPackagedWeight,totalWasteWeight,unitOfWeightAbbreviation"
            }
          }
        ],
        "tags": [
          "Harvests",
          "Reports"
        ]
      }
    },
    "/v2/harvests/onhold": {
      "get": {
        "summary": "List of on hold harvests",
        "responses": {
          "200": {
            "description": "A list of on hold harvests for this license",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/Pagination"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/MetrcHarvest"
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "licenseNumber",
            "description": "The unique identifier for the license associated with this request.",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "example": "LIC-00001"
            }
          },
          {
            "name": "page",
            "description": "The index of the page to be returned.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 1,
              "example": 1
            }
          },
          {
            "name": "pageSize",
            "description": "The number of objects per page to be returned.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 100,
              "example": 100
            }
          },
          {
            "name": "strictPagination",
            "description": "Toggles strict pagination. Defaults to `false` (disabled)\n\n  - If enabled, requesting an out of bounds page will throw a 400. \n  - If disabled, requesting an out of bounds page will return a 200 and an empty page.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false,
              "example": true
            }
          },
          {
            "description": "Defines the collection sort order.",
            "name": "sort",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string",
              "example": "label:asc"
            }
          },
          {
            "name": "filterLogic",
            "description": "Describes how the filters, if any, should be applied",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "and",
                "or"
              ],
              "default": "and",
              "example": "and"
            }
          },
          {
            "description": "One or more collection filters.",
            "name": "filter",
            "in": "query",
            "required": false,
            "schema": {
              "type": "array",
              "example": "label__endswith:0003",
              "items": {
                "type": "string"
              }
            },
            "style": "form",
            "explode": true
          }
        ],
        "tags": [
          "Harvests"
        ]
      }
    },
    "/v2/harvests/inactive": {
      "get": {
        "summary": "List of inactive harvests",
        "responses": {
          "200": {
            "description": "A list of inactive harvests for this license",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/Pagination"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/MetrcHarvest"
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "licenseNumber",
            "description": "The unique identifier for the license associated with this request.",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "example": "LIC-00001"
            }
          },
          {
            "name": "page",
            "description": "The index of the page to be returned.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 1,
              "example": 1
            }
          },
          {
            "name": "pageSize",
            "description": "The number of objects per page to be returned.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 100,
              "example": 100
            }
          },
          {
            "name": "strictPagination",
            "description": "Toggles strict pagination. Defaults to `false` (disabled)\n\n  - If enabled, requesting an out of bounds page will throw a 400. \n  - If disabled, requesting an out of bounds page will return a 200 and an empty page.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false,
              "example": true
            }
          },
          {
            "description": "Defines the collection sort order.",
            "name": "sort",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string",
              "example": "label:asc"
            }
          },
          {
            "name": "filterLogic",
            "description": "Describes how the filters, if any, should be applied",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "and",
                "or"
              ],
              "default": "and",
              "example": "and"
            }
          },
          {
            "description": "One or more collection filters.",
            "name": "filter",
            "in": "query",
            "required": false,
            "schema": {
              "type": "array",
              "example": "label__endswith:0003",
              "items": {
                "type": "string"
              }
            },
            "style": "form",
            "explode": true
          }
        ],
        "tags": [
          "Harvests"
        ]
      }
    },
    "/v2/harvests/inactive/report": {
      "get": {
        "summary": "Generate a report of all active harvests",
        "description": "**Note: this endpoint supports secret key authentication.**\n",
        "responses": {
          "200": {
            "description": "A list of active harvests for this license",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "generatedAt": {
                      "type": "string",
                      "format": "date-time",
                      "example": "2024-07-25T00:00:00+00:00"
                    },
                    "filters": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "example": [
                        "name__endswith:0003",
                        "name__contains:kush"
                      ]
                    },
                    "filterLogic": {
                      "type": "string",
                      "description": "The filter logic specified for this report, if any",
                      "example": "and",
                      "nullable": true
                    },
                    "sort": {
                      "type": "string",
                      "description": "The sort order specified for this report, if any",
                      "example": "label:asc",
                      "nullable": true
                    },
                    "licenseNumber": {
                      "type": "string",
                      "description": "The unique identifier for the license associated with this request.",
                      "example": "LIC-00001"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/MetrcHarvest"
                      }
                    }
                  }
                }
              },
              "text/csv": {
                "schema": {
                  "type": "string",
                  "example": "name,dryingLocationName,plantCount\nHarvest001,Curing Room,100\nHarvest002,Curing Room,85"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "licenseNumber",
            "description": "The unique identifier for the license associated with this request.",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "example": "LIC-00001"
            }
          },
          {
            "name": "secretKey",
            "description": "Your secret key, if you wish to authenticate via query params. Secret keys can be manually generated [here](/v2/pages/secret-key).\n",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "example": "2616ec56-fa2a-4c5b-86c0-acacf23c9ef7"
            }
          },
          {
            "name": "filterLogic",
            "description": "Describes how the filters, if any, should be applied",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "and",
                "or"
              ],
              "default": "and",
              "example": "and"
            }
          },
          {
            "name": "contentType",
            "description": "Specifies how the report should be formatted. Can be returned as json or csv.\n*This can also be defined in the Content-Type header*\n",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "json",
                "csv"
              ],
              "default": "json",
              "example": "json"
            }
          },
          {
            "name": "prependCsvMetadata",
            "description": "Controls if the CSV header metadata should be included in the output.\nWhen set to false, only the column headers and data will be returned.\n",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "true",
                "false"
              ],
              "default": "true",
              "example": "true"
            }
          },
          {
            "description": "Defines the collection sort order.",
            "name": "sort",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string",
              "example": "label:asc"
            }
          },
          {
            "description": "One or more collection filters.",
            "name": "filter",
            "in": "query",
            "required": false,
            "schema": {
              "type": "array",
              "example": "label__endswith:0003",
              "items": {
                "type": "string"
              }
            },
            "style": "form",
            "explode": true
          },
          {
            "name": "fieldnames",
            "description": "Defines which plant fields should appear in the report data.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "default": "name,harvestStartDate,dryingLocationName,plantCount,currentWeight,totalWetWeight,totalPackagedWeight,totalWasteWeight,unitOfWeightAbbreviation",
              "example": "name,harvestStartDate,dryingLocationName,plantCount,currentWeight,totalWetWeight,totalPackagedWeight,totalWasteWeight,unitOfWeightAbbreviation"
            }
          }
        ],
        "tags": [
          "Harvests",
          "Reports"
        ]
      }
    },
    "/v2/harvests/history": {
      "get": {
        "summary": "List of history objects for a single harvest.",
        "description": "NOTE: only supports INACTIVE harvests\n",
        "responses": {
          "200": {
            "description": "A list of history objects for the specified harvest.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/Pagination"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/MetrcHistory"
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "The harvest with id={harvestId} was not found in the specified license, or you do not have access to view this harvest's history"
          }
        },
        "parameters": [
          {
            "name": "licenseNumber",
            "description": "The unique identifier for the license associated with this request.",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "example": "LIC-00001"
            }
          },
          {
            "name": "plantId",
            "description": "ID of the target harvest",
            "in": "query",
            "required": true,
            "schema": {
              "type": "number",
              "example": 123
            }
          },
          {
            "name": "page",
            "description": "The index of the page to be returned.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 1,
              "example": 1
            }
          },
          {
            "name": "pageSize",
            "description": "The number of objects per page to be returned.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 100,
              "example": 100
            }
          },
          {
            "name": "strictPagination",
            "description": "Toggles strict pagination. Defaults to `false` (disabled)\n\n  - If enabled, requesting an out of bounds page will throw a 400. \n  - If disabled, requesting an out of bounds page will return a 200 and an empty page.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false,
              "example": true
            }
          },
          {
            "description": "Defines the collection sort order.",
            "name": "sort",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string",
              "example": "label:asc"
            }
          },
          {
            "name": "filterLogic",
            "description": "Describes how the filters, if any, should be applied",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "and",
                "or"
              ],
              "default": "and",
              "example": "and"
            }
          },
          {
            "description": "One or more collection filters.",
            "name": "filter",
            "in": "query",
            "required": false,
            "schema": {
              "type": "array",
              "example": "label__endswith:0003",
              "items": {
                "type": "string"
              }
            },
            "style": "form",
            "explode": true
          }
        ],
        "tags": [
          "Harvests",
          "Single Harvest",
          "History"
        ]
      }
    },
    "/v2/search": {
      "get": {
        "summary": "Generic text search endpoint",
        "description": "Queries all active endpoints in Metrc and returns matches\n\n**A T3+ subscription is not required to use this endpoint**\n",
        "responses": {
          "200": {
            "description": "The search results for this query",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "endpointId": {
                            "description": "ID of the endpoint that returned this object",
                            "$ref": "#/components/schemas/EndpointId"
                          },
                          "score": {
                            "type": "number",
                            "description": "The search score for this result. A higher score means a better match.",
                            "format": "float"
                          },
                          "matchedEntry": {
                            "type": "object",
                            "description": "The object that matched this query"
                          }
                        }
                      },
                      "example": [
                        {
                          "endpointId": "METRC_ACTIVE_ITEMS",
                          "matchedEntry": {
                            "administrationMethod": "N/A",
                            "allergens": "",
                            "approvalStatusDateTime": "2023-08-20T15:11:10+00:00",
                            "approvalStatusName": "Approved",
                            "dataModel": "MetrcItem",
                            "defaultLabTestingStateName": "NotSubmitted",
                            "description": "",
                            "expirationConfigurationState": "Off",
                            "expirationDateConfiguration": "Off",
                            "expirationDateDaysInAdvance": null,
                            "facilityLicenseNumber": null,
                            "facilityName": null,
                            "id": 12345,
                            "index": "ACTIVE_ITEM",
                            "isArchived": false,
                            "isUsed": false,
                            "itemBrandId": 0,
                            "itemBrandName": null,
                            "labelImages": [],
                            "labelPhotoDescription": "",
                            "lastModified": null,
                            "licenseNumber": "Ex00001",
                            "name": "Wedding Cake - 3.5g Prepack",
                            "numberOfDoses": 14,
                            "packagingImages": [],
                            "packagingPhotoDescription": "",
                            "processingJobCategoryId": null,
                            "processingJobCategoryName": null,
                            "productCategoryId": 401,
                            "productCategoryName": "Bud/Flower (Final Packaging)",
                            "productCategoryTypeName": "Buds",
                            "productImages": [],
                            "productPDFDocuments": [],
                            "productPhotoDescription": "",
                            "publicIngredients": "Cannabis flower",
                            "quantityTypeName": "WeightBased",
                            "retrievedAt": "2024-08-28T01:19:48.123456",
                            "sellByConfigurationState": "Off",
                            "sellByDateConfiguration": "Off",
                            "sellByDateDaysInAdvance": null,
                            "servingSize": "0.25g",
                            "strainName": "Wedding Cake",
                            "supplyDurationDays": null,
                            "unitCbdContent": null,
                            "unitCbdContentDose": null,
                            "unitCbdContentDoseUnitOfMeasureAbbreviation": null,
                            "unitCbdContentUnitOfMeasureAbbreviation": null,
                            "unitCbdPercent": null,
                            "unitOfMeasureId": 4,
                            "unitOfMeasureName": "Grams",
                            "unitQuantity": null,
                            "unitQuantityUnitOfMeasureAbbreviation": null,
                            "unitThcContent": null,
                            "unitThcContentDose": null,
                            "unitThcContentDoseUnitOfMeasureAbbreviation": null,
                            "unitThcContentUnitOfMeasureAbbreviation": null,
                            "unitThcContentUnitOfMeasureId": null,
                            "unitThcPercent": null,
                            "unitVolume": null,
                            "unitVolumeUnitOfMeasureAbbreviation": null,
                            "unitWeight": null,
                            "unitWeightUnitOfMeasureAbbreviation": null,
                            "unitWeightUnitOfMeasureId": null,
                            "useByConfigurationState": "Off",
                            "useByDateConfiguration": "Off",
                            "useByDateDaysInAdvance": null
                          },
                          "score": 0.12244897959183673
                        },
                        {
                          "endpointId": "METRC_TRANSFERRED_PACKAGES",
                          "score": 0.08333333333333333,
                          "matchedEntry": {
                            "actualDepartureDateTime": "2024-07-17T07:00:00-05:00",
                            "dataModel": "MetrcTransferredPackage",
                            "grossUnitOfWeightAbbreviation": "g",
                            "grossWeight": 222.0,
                            "id": 123456,
                            "index": "TRANSFERRED_PACKAGE",
                            "itemStrainName": "Blue Dream",
                            "labTestingStateName": "TestPassed",
                            "licenseNumber": "EX00001",
                            "manifestNumber": "1234566",
                            "packageId": 1234566,
                            "packageLabel": "1A40C0300000000000000025",
                            "productCategoryName": "Shake/Trim",
                            "productName": "Blue Dream",
                            "receivedDateTime": "2024-07-17T00:00:00-05:00",
                            "receivedQuantity": 222.0,
                            "receivedUnitOfMeasureAbbreviation": "g",
                            "receiverWholesalePrice": 0.01,
                            "recipientFacilityLicenseNumber": "MAN000036",
                            "recipientFacilityName": "Foobar LLC",
                            "retrievedAt": "2024-08-28T15:01:11.123456",
                            "shipmentPackageStateName": "Accepted",
                            "shippedQuantity": 222.0,
                            "shippedUnitOfMeasureAbbreviation": "g",
                            "shipperWholesalePrice": 0.01,
                            "sourceHarvestNames": "BD0001",
                            "sourcePackageLabels": "1A4000000000000000000290, 1A4000000000000000000292"
                          }
                        }
                      ]
                    },
                    "queriedMetrcEndpointIds": {
                      "description": "Endpoints which were successfully queried.",
                      "type": "array",
                      "example": [
                        "ACTIVE_ITEMS",
                        "ACTIVE_HARVESTS",
                        "ACTIVE_PLANTBATCHES",
                        "ACTIVE_PACKAGES",
                        "INTRANSIT_PACKAGES",
                        "TRANSFERRED_PACKAGES",
                        "VEGETATIVE_PLANTS",
                        "FLOWERING_PLANTS"
                      ],
                      "items": {
                        "$ref": "#/components/schemas/EndpointId"
                      }
                    },
                    "failedMetrcEndpointIds": {
                      "description": "Endpoints which could not be queried, either due to Metrc error or lack of permissions.",
                      "type": "array",
                      "example": [],
                      "items": {
                        "$ref": "#/components/schemas/EndpointId"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "licenseNumber",
            "description": "The unique identifier for the license associated with this request.",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "example": "LIC-00001"
            }
          },
          {
            "name": "query",
            "description": "Search query",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "example": "0003"
            }
          },
          {
            "name": "endpointIds",
            "description": "Restricts the queried enpoints to increase result speed. If not provided, all endpoints are queried.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "example": "METRC_VEGETATIVE_PLANTS,METRC_FLOWERING_PLANTS"
            }
          }
        ],
        "tags": [
          "Search",
          "Free"
        ]
      }
    },
    "/v2/sales/active": {
      "get": {
        "summary": "List of active sales",
        "responses": {
          "200": {
            "description": "A list of active sales for this license",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/Pagination"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/MetrcSalesReceipt"
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "licenseNumber",
            "description": "The unique identifier for the license associated with this request.",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "example": "LIC-00001"
            }
          },
          {
            "name": "page",
            "description": "The index of the page to be returned.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 1,
              "example": 1
            }
          },
          {
            "name": "pageSize",
            "description": "The number of objects per page to be returned.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 100,
              "example": 100
            }
          },
          {
            "name": "strictPagination",
            "description": "Toggles strict pagination. Defaults to `false` (disabled)\n\n  - If enabled, requesting an out of bounds page will throw a 400. \n  - If disabled, requesting an out of bounds page will return a 200 and an empty page.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false,
              "example": true
            }
          },
          {
            "description": "Defines the collection sort order.",
            "name": "sort",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string",
              "example": "label:asc"
            }
          },
          {
            "name": "filterLogic",
            "description": "Describes how the filters, if any, should be applied",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "and",
                "or"
              ],
              "default": "and",
              "example": "and"
            }
          },
          {
            "description": "One or more collection filters.",
            "name": "filter",
            "in": "query",
            "required": false,
            "schema": {
              "type": "array",
              "example": "label__endswith:0003",
              "items": {
                "type": "string"
              }
            },
            "style": "form",
            "explode": true
          }
        ],
        "tags": [
          "Sales Receipts"
        ]
      }
    },
    "/v2/sales/active/report": {
      "get": {
        "summary": "Generate a report of all active sales",
        "description": "**Note: this endpoint supports secret key authentication.**\n",
        "responses": {
          "200": {
            "description": "A list of active sales receipts for this license",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "generatedAt": {
                      "type": "string",
                      "format": "date-time",
                      "example": "2024-07-25T00:00:00+00:00"
                    },
                    "filters": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "example": [
                        "receiptNumber__endswith:0003"
                      ]
                    },
                    "filterLogic": {
                      "type": "string",
                      "description": "The filter logic specified for this report, if any",
                      "example": "and",
                      "nullable": true
                    },
                    "sort": {
                      "type": "string",
                      "description": "The sort order specified for this report, if any",
                      "example": "receiptNumber:asc",
                      "nullable": true
                    },
                    "licenseNumber": {
                      "type": "string",
                      "description": "The unique identifier for the license associated with this request.",
                      "example": "LIC-00001"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/MetrcSalesReceipt"
                      }
                    }
                  }
                }
              },
              "text/csv": {
                "schema": {
                  "type": "string",
                  "example": "receiptNumber,salesDateTime,totalPackages,totalPrice\n0001234567,01-01-2024T01:01:01,5,100.50\n0001234568,01-01-2024T01:01:01,6,23.50"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "licenseNumber",
            "description": "The unique identifier for the license associated with this request.",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "example": "LIC-00001"
            }
          },
          {
            "name": "secretKey",
            "description": "Your secret key, if you wish to authenticate via query params. Secret keys can be manually generated [here](/v2/pages/secret-key).\n",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "example": "2616ec56-fa2a-4c5b-86c0-acacf23c9ef7"
            }
          },
          {
            "name": "filterLogic",
            "description": "Describes how the filters, if any, should be applied",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "and",
                "or"
              ],
              "default": "and",
              "example": "and"
            }
          },
          {
            "name": "contentType",
            "description": "Specifies how the report should be formatted. Can be returned as json or csv.\n*This can also be defined in the Content-Type header*\n",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "json",
                "csv"
              ],
              "default": "json",
              "example": "json"
            }
          },
          {
            "name": "prependCsvMetadata",
            "description": "Controls if the CSV header metadata should be included in the output.\nWhen set to false, only the column headers and data will be returned.\n",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "true",
                "false"
              ],
              "default": "true",
              "example": "true"
            }
          },
          {
            "description": "Defines the collection sort order.",
            "name": "sort",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string",
              "example": "label:asc"
            }
          },
          {
            "description": "One or more collection filters.",
            "name": "filter",
            "in": "query",
            "required": false,
            "schema": {
              "type": "array",
              "example": "label__endswith:0003",
              "items": {
                "type": "string"
              }
            },
            "style": "form",
            "explode": true
          },
          {
            "name": "fieldnames",
            "description": "Defines which sales receipt fields should appear in the report data.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "default": "receiptNumber,salesDateTime,totalPackages,totalPrice",
              "example": "receiptNumber,salesDateTime,totalPackages,totalPrice"
            }
          }
        ],
        "tags": [
          "Sales Receipts",
          "Reports"
        ]
      }
    },
    "/v2/sales/inactive": {
      "get": {
        "summary": "List of inactive sales",
        "responses": {
          "200": {
            "description": "A list of inactive sales for this license",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/Pagination"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/MetrcSalesReceipt"
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "licenseNumber",
            "description": "The unique identifier for the license associated with this request.",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "example": "LIC-00001"
            }
          },
          {
            "name": "page",
            "description": "The index of the page to be returned.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 1,
              "example": 1
            }
          },
          {
            "name": "pageSize",
            "description": "The number of objects per page to be returned.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 100,
              "example": 100
            }
          },
          {
            "name": "strictPagination",
            "description": "Toggles strict pagination. Defaults to `false` (disabled)\n\n  - If enabled, requesting an out of bounds page will throw a 400. \n  - If disabled, requesting an out of bounds page will return a 200 and an empty page.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false,
              "example": true
            }
          },
          {
            "description": "Defines the collection sort order.",
            "name": "sort",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string",
              "example": "label:asc"
            }
          },
          {
            "name": "filterLogic",
            "description": "Describes how the filters, if any, should be applied",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "and",
                "or"
              ],
              "default": "and",
              "example": "and"
            }
          },
          {
            "description": "One or more collection filters.",
            "name": "filter",
            "in": "query",
            "required": false,
            "schema": {
              "type": "array",
              "example": "label__endswith:0003",
              "items": {
                "type": "string"
              }
            },
            "style": "form",
            "explode": true
          }
        ],
        "tags": [
          "Sales Receipts"
        ]
      }
    },
    "/v2/sales/transactions": {
      "get": {
        "summary": "List of transactions for a single sales receipt",
        "responses": {
          "200": {
            "description": "A list of transactions for the specified sales receipt",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/Pagination"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/MetrcTransaction"
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "salesReceiptId",
            "description": "ID of the target sales receipt",
            "in": "query",
            "required": true,
            "schema": {
              "type": "number",
              "example": 123
            }
          },
          {
            "name": "licenseNumber",
            "description": "The unique identifier for the license associated with this request.",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "example": "LIC-00001"
            }
          },
          {
            "name": "page",
            "description": "The index of the page to be returned.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 1,
              "example": 1
            }
          },
          {
            "name": "pageSize",
            "description": "The number of objects per page to be returned.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 100,
              "example": 100
            }
          },
          {
            "name": "strictPagination",
            "description": "Toggles strict pagination. Defaults to `false` (disabled)\n\n  - If enabled, requesting an out of bounds page will throw a 400. \n  - If disabled, requesting an out of bounds page will return a 200 and an empty page.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false,
              "example": true
            }
          },
          {
            "description": "Defines the collection sort order.",
            "name": "sort",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string",
              "example": "label:asc"
            }
          },
          {
            "name": "filterLogic",
            "description": "Describes how the filters, if any, should be applied",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "and",
                "or"
              ],
              "default": "and",
              "example": "and"
            }
          },
          {
            "description": "One or more collection filters.",
            "name": "filter",
            "in": "query",
            "required": false,
            "schema": {
              "type": "array",
              "example": "label__endswith:0003",
              "items": {
                "type": "string"
              }
            },
            "style": "form",
            "explode": true
          }
        ],
        "tags": [
          "Sales Receipts",
          "Single Sales Receipt"
        ]
      }
    },
    "/v2/sales/unfinalize": {
      "post": {
        "summary": "Unfinalize sales receipts",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "integer",
                      "description": "The sales receipt ID",
                      "example": 12345
                    }
                  },
                  "required": [
                    "id"
                  ],
                  "additionalProperties": false
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The operation completed successfully.\n",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "type": "string",
                      "description": "Describes the nature of this successful operation\n- \"Success\" indicates the request passed validation and was successfully passed to Metrc\n- \"Dry run\" indicates the request passed validation, but the request was not sent to Metrc\n",
                      "example": "Success"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "An error response indicating the request was invalid. Refer to the response body for details.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "object",
                      "properties": {
                        "type": {
                          "type": "string",
                          "example": "BadRequest"
                        },
                        "message": {
                          "type": "string",
                          "example": "400 Bad Request: Invalid request body: 'note' is a required property"
                        },
                        "timestamp": {
                          "type": "string",
                          "format": "date-time",
                          "example": "2024-08-09T12:34:56.789Z"
                        },
                        "url": {
                          "type": "string",
                          "example": "https://api.trackandtrace.tools/some-endpoint"
                        },
                        "status_code": {
                          "type": "integer",
                          "example": 400
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "An error response indicating the server experienced an unexpected error.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "object",
                      "properties": {
                        "type": {
                          "type": "string",
                          "example": "InternalServerError"
                        },
                        "message": {
                          "type": "string",
                          "example": "500 InternalServerError"
                        },
                        "timestamp": {
                          "type": "string",
                          "format": "date-time",
                          "example": "2024-08-09T12:34:56.789Z"
                        },
                        "url": {
                          "type": "string",
                          "example": "https://api.trackandtrace.tools/some-endpoint"
                        },
                        "status_code": {
                          "type": "integer",
                          "example": 500
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "503": {
            "description": "An error response indicating the Metrc servers are experiencing downtime.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "object",
                      "properties": {
                        "type": {
                          "type": "string",
                          "example": "ServiceUnavailable"
                        },
                        "message": {
                          "type": "string",
                          "example": "503 ServiceUnavailable"
                        },
                        "timestamp": {
                          "type": "string",
                          "format": "date-time",
                          "example": "2024-08-09T12:34:56.789Z"
                        },
                        "url": {
                          "type": "string",
                          "example": "https://api.trackandtrace.tools/some-endpoint"
                        },
                        "status_code": {
                          "type": "integer",
                          "example": 503
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "licenseNumber",
            "description": "The unique identifier for the license associated with this request.",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "example": "LIC-00001"
            }
          },
          {
            "name": "submit",
            "in": "query",
            "required": false,
            "description": "Controls whether this request should be forwarded to Metrc.\n- **If present and set to 'true'**: The request will be validated and forwarded to Metrc if validation passes.\n- **If omitted or set to any value other than 'true'**: The request will only be validated.\nExamples:\n  - \"true\": Forward the request to Metrc\n  - \"false\": Execute a dry run\n",
            "schema": {
              "type": "string",
              "example": "true"
            }
          }
        ],
        "tags": [
          "Sales Receipts",
          "Modify Sales Receipts"
        ]
      }
    },
    "/v2/sales/void": {
      "post": {
        "summary": "Void one sales receipt",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "integer",
                    "description": "The sales receipt ID",
                    "example": 12345
                  }
                },
                "required": [
                  "id"
                ],
                "additionalProperties": false
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The operation completed successfully.\n",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "type": "string",
                      "description": "Describes the nature of this successful operation\n- \"Success\" indicates the request passed validation and was successfully passed to Metrc\n- \"Dry run\" indicates the request passed validation, but the request was not sent to Metrc\n",
                      "example": "Success"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "An error response indicating the request was invalid. Refer to the response body for details.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "object",
                      "properties": {
                        "type": {
                          "type": "string",
                          "example": "BadRequest"
                        },
                        "message": {
                          "type": "string",
                          "example": "400 Bad Request: Invalid request body: 'note' is a required property"
                        },
                        "timestamp": {
                          "type": "string",
                          "format": "date-time",
                          "example": "2024-08-09T12:34:56.789Z"
                        },
                        "url": {
                          "type": "string",
                          "example": "https://api.trackandtrace.tools/some-endpoint"
                        },
                        "status_code": {
                          "type": "integer",
                          "example": 400
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "An error response indicating the server experienced an unexpected error.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "object",
                      "properties": {
                        "type": {
                          "type": "string",
                          "example": "InternalServerError"
                        },
                        "message": {
                          "type": "string",
                          "example": "500 InternalServerError"
                        },
                        "timestamp": {
                          "type": "string",
                          "format": "date-time",
                          "example": "2024-08-09T12:34:56.789Z"
                        },
                        "url": {
                          "type": "string",
                          "example": "https://api.trackandtrace.tools/some-endpoint"
                        },
                        "status_code": {
                          "type": "integer",
                          "example": 500
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "503": {
            "description": "An error response indicating the Metrc servers are experiencing downtime.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "object",
                      "properties": {
                        "type": {
                          "type": "string",
                          "example": "ServiceUnavailable"
                        },
                        "message": {
                          "type": "string",
                          "example": "503 ServiceUnavailable"
                        },
                        "timestamp": {
                          "type": "string",
                          "format": "date-time",
                          "example": "2024-08-09T12:34:56.789Z"
                        },
                        "url": {
                          "type": "string",
                          "example": "https://api.trackandtrace.tools/some-endpoint"
                        },
                        "status_code": {
                          "type": "integer",
                          "example": 503
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "licenseNumber",
            "description": "The unique identifier for the license associated with this request.",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "example": "LIC-00001"
            }
          },
          {
            "name": "submit",
            "in": "query",
            "required": false,
            "description": "Controls whether this request should be forwarded to Metrc.\n- **If present and set to 'true'**: The request will be validated and forwarded to Metrc if validation passes.\n- **If omitted or set to any value other than 'true'**: The request will only be validated.\nExamples:\n  - \"true\": Forward the request to Metrc\n  - \"false\": Execute a dry run\n",
            "schema": {
              "type": "string",
              "example": "true"
            }
          }
        ],
        "tags": [
          "Sales Receipts",
          "Modify Sales Receipts"
        ]
      }
    },
    "/v2/files/labels/label-template-layouts": {
      "get": {
        "summary": "Returns a list of label template layouts",
        "responses": {
          "200": {
            "description": "A list of label template layouts",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "data": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "id": {
                                "type": "integer",
                                "example": 10
                              },
                              "labelTemplateLayoutId": {
                                "type": "string",
                                "example": "AVERY_8160__2_625Wx1_0H"
                              },
                              "description": {
                                "type": "string",
                                "example": "8.5\"x11\" sheet of Avery 8160 labels (2.625\"x1\")"
                              },
                              "requiresT3plus": {
                                "type": "boolean",
                                "example": false
                              },
                              "enabled": {
                                "type": "boolean",
                                "example": true
                              },
                              "visible": {
                                "type": "boolean",
                                "example": true
                              },
                              "printerTypes": {
                                "type": "array",
                                "items": {
                                  "type": "string"
                                },
                                "example": [
                                  "LASER",
                                  "INKJET"
                                ]
                              },
                              "labelTemplateLayoutConfig": {
                                "type": "object",
                                "properties": {
                                  "numRows": {
                                    "type": "integer",
                                    "example": 10
                                  },
                                  "xGapIn": {
                                    "type": "number",
                                    "format": "float",
                                    "example": 0.125
                                  },
                                  "yGapIn": {
                                    "type": "number",
                                    "format": "float",
                                    "example": 0.0
                                  },
                                  "numColumns": {
                                    "type": "integer",
                                    "example": 3
                                  },
                                  "pageSizeXIn": {
                                    "type": "number",
                                    "format": "float",
                                    "example": 8.5
                                  },
                                  "pageSizeYIn": {
                                    "type": "number",
                                    "format": "float",
                                    "example": 11.0
                                  },
                                  "labelWidthIn": {
                                    "type": "number",
                                    "format": "float",
                                    "example": 2.625
                                  },
                                  "labelHeightIn": {
                                    "type": "number",
                                    "format": "float",
                                    "example": 1.0
                                  },
                                  "labelPaddingXIn": {
                                    "type": "number",
                                    "format": "float",
                                    "example": 0.0625
                                  },
                                  "labelPaddingYIn": {
                                    "type": "number",
                                    "format": "float",
                                    "example": 0.0625
                                  },
                                  "pageMarginTopIn": {
                                    "type": "number",
                                    "format": "float",
                                    "example": 0.5
                                  },
                                  "pageMarginLeftIn": {
                                    "type": "number",
                                    "format": "float",
                                    "example": 0.1875
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Labels",
          "PDF",
          "Free"
        ]
      }
    },
    "/v2/files/labels/label-content-layouts": {
      "get": {
        "summary": "Returns a list of label content layouts",
        "responses": {
          "200": {
            "description": "A list of label content layouts",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "data": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "id": {
                                "type": "string",
                                "example": "COL_CODE128_TEXT"
                              },
                              "description": {
                                "type": "string",
                                "example": "Code128 barcode, with text below"
                              },
                              "requiresT3plus": {
                                "type": "boolean",
                                "example": true
                              },
                              "minAspectRatio": {
                                "type": "number",
                                "format": "float",
                                "example": 2.5
                              },
                              "maxAspectRatio": {
                                "type": "number",
                                "format": "float",
                                "example": 2.5
                              },
                              "elements": {
                                "type": "array",
                                "items": {
                                  "type": "object",
                                  "properties": {
                                    "description": {
                                      "type": "string",
                                      "example": "Code 128 barcode scannable value"
                                    },
                                    "element_type": {
                                      "type": "string",
                                      "example": "CODE128_BARCODE"
                                    },
                                    "labelContentDataKey": {
                                      "type": "string",
                                      "description": "The value",
                                      "example": "text1"
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Labels",
          "PDF",
          "Free"
        ]
      }
    },
    "/v2/files/labels/generate": {
      "post": {
        "summary": "Generate a PDF of labels.",
        "description": "Layout IDs can be found by querying the label template layout and label content layout endpoints.\n\nT3 Free users can only generate watermarked labels. Watermarks can be removed with a T3+ subscription.\n",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "labelTemplateLayoutId": {
                    "type": "string",
                    "description": "The identifier for the label template configuration",
                    "example": "AVERY_8160__2_625Wx1_0H"
                  },
                  "labelContentLayoutId": {
                    "type": "string",
                    "description": "The identifier for the label content configuration.",
                    "example": "COL_TEXT_CODE128_TEXT"
                  },
                  "labelContentData": {
                    "type": "array",
                    "description": "A list of label content data objects to be filled into labels.  Refer to the label content layout information for which of these fields are required and where they will be inserted.",
                    "items": {
                      "type": "object",
                      "additionalProperties": false,
                      "properties": {
                        "text1": {
                          "type": "string",
                          "example": "text1"
                        },
                        "text2": {
                          "type": "string",
                          "example": "text2"
                        },
                        "text3": {
                          "type": "string",
                          "example": "text3"
                        },
                        "text4": {
                          "type": "string",
                          "example": "text4"
                        },
                        "text5": {
                          "type": "string",
                          "example": "text5"
                        },
                        "text6": {
                          "type": "string",
                          "example": "text6"
                        },
                        "text7": {
                          "type": "string",
                          "example": "text7"
                        },
                        "text8": {
                          "type": "string",
                          "example": "text8"
                        }
                      }
                    }
                  },
                  "renderingOptions": {
                    "type": "object",
                    "description": "Options for controlling how the barcode will render.",
                    "additionalProperties": false,
                    "properties": {
                      "debug": {
                        "type": "boolean"
                      },
                      "enablePromo": {
                        "type": "boolean"
                      },
                      "reversePrintOrder": {
                        "type": "boolean"
                      },
                      "rotationDegrees": {
                        "type": "number",
                        "format": "float"
                      },
                      "barcodeBarThickness": {
                        "type": "number",
                        "format": "float",
                        "description": "Controls how thick a barcode's bars will appear. Useful for low-DPI thermal printers.\nTested values: - Zebra printers with a Code128 should use 0.94 - Dymo printers with a Code128 should use 0.8\n- 1.0 is normal rendering.  - 0.9 is 10% thinner - 1.1 is 10% thicker",
                        "example": 1.0
                      },
                      "labelMarginThickness": {
                        "type": "number",
                        "format": "float",
                        "description": "Controls width of a label's margins. Useful for thermal printers with slighly skewed printing.\n- 1.0 is normal margin.  - 0.9 is 10% thinner - 1.1 is 10% thicker",
                        "example": 1.0
                      }
                    }
                  },
                  "debug": {
                    "type": "boolean",
                    "description": "When set to true, draws bounding boxes around the label containers, the printable area, and the individual elements per label."
                  },
                  "forcePromo": {
                    "type": "boolean",
                    "description": "When set to true, force-enables the T3 promo bar on all generated labels irrespective of T3+ subscription status."
                  },
                  "disposition": {
                    "type": "string",
                    "description": "Specifies whether the PDF should be opened inline or downloaded as an attachment.",
                    "enum": [
                      "inline",
                      "attachment"
                    ],
                    "default": "inline"
                  }
                },
                "required": [
                  "labelTemplateLayoutId",
                  "labelContentLayoutId",
                  "labelContentData"
                ],
                "additionalProperties": false
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "PDF of the labels",
            "content": {
              "application/pdf": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          }
        },
        "tags": [
          "Labels",
          "PDF",
          "Free"
        ]
      }
    },
    "/v2/files/labels/content-data/packages/active": {
      "post": {
        "summary": "For a given list of active packages, returns the needed ContentDataList to render the labels.",
        "description": "\nLayout IDs can be found by querying the label template layout and label content layout endpoints.\n",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "labelTemplateLayoutId": {
                    "type": "string",
                    "description": "The identifier for the label template configuration",
                    "example": "AVERY_8160__2_625Wx1_0H"
                  },
                  "labelContentLayoutId": {
                    "type": "string",
                    "description": "The identifier for the label content configuration.",
                    "example": "COL_TEXT_CODE128_TEXT"
                  },
                  "data": {
                    "type": "array",
                    "description": "An array of tags",
                    "example": [
                      "1A4000F8CDD6DCB30CA66725",
                      "1A4000455B81126C39BF2711",
                      "1A40007AE1592E6F22223385",
                      "1A40001820F953BF76585015",
                      "1A400014F8F91738716D2309",
                      "1A4000AF188D230BE3AF2306"
                    ],
                    "items": {
                      "type": "string"
                    }
                  },
                  "renderingOptions": {
                    "type": "object",
                    "description": "Options for controlling how the barcode will render.",
                    "additionalProperties": false,
                    "properties": {
                      "barcodeBarThickness": {
                        "description": "Controls how thick a barcode's bars will appear. Useful for low-DPI thermal printers.\nTested values: - Zebra printers with a Code128 should use 0.94 - Dymo printers with a Code128 should use 0.8\n- 1.0 is normal rendering.  - 0.9 is 10% thinner - 1.1 is 10% thicker",
                        "example": 1.0
                      },
                      "labelMarginThickness": {
                        "description": "Controls width of a label's margins. Useful for thermal printers with slighly skewed printing.\n- 1.0 is normal margin.  - 0.9 is 10% thinner - 1.1 is 10% thicker",
                        "example": 1.0
                      }
                    }
                  },
                  "debug": {
                    "type": "boolean",
                    "description": "When set to true, draws bounding boxes around the label containers, the printable area, and the individual elements per label."
                  }
                },
                "required": [
                  "labelTemplateLayoutId",
                  "labelContentLayoutId",
                  "data"
                ],
                "additionalProperties": false
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "List of LabelContentData objects compiled from the packages and template",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/T3LabelContentData"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Labels",
          "Packages",
          "Free"
        ]
      }
    },
    "/v2/files/labels/content-data/packages/intransit": {
      "post": {
        "summary": "For a given list of in transit packages, returns the needed ContentDataList to render the labels.",
        "description": "\nLayout IDs can be found by querying the label template layout and label content layout endpoints.\n",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "labelTemplateLayoutId": {
                    "type": "string",
                    "description": "The identifier for the label template configuration",
                    "example": "AVERY_8160__2_625Wx1_0H"
                  },
                  "labelContentLayoutId": {
                    "type": "string",
                    "description": "The identifier for the label content configuration.",
                    "example": "COL_TEXT_CODE128_TEXT"
                  },
                  "data": {
                    "type": "array",
                    "description": "An array of tags",
                    "example": [
                      "1A4000F8CDD6DCB30CA66725",
                      "1A4000455B81126C39BF2711",
                      "1A40007AE1592E6F22223385",
                      "1A40001820F953BF76585015",
                      "1A400014F8F91738716D2309",
                      "1A4000AF188D230BE3AF2306"
                    ],
                    "items": {
                      "type": "string"
                    }
                  },
                  "renderingOptions": {
                    "type": "object",
                    "description": "Options for controlling how the barcode will render.",
                    "additionalProperties": false,
                    "properties": {
                      "barcodeBarThickness": {
                        "description": "Controls how thick a barcode's bars will appear. Useful for low-DPI thermal printers.\nTested values: - Zebra printers with a Code128 should use 0.94 - Dymo printers with a Code128 should use 0.8\n- 1.0 is normal rendering.  - 0.9 is 10% thinner - 1.1 is 10% thicker",
                        "example": 1.0
                      },
                      "labelMarginThickness": {
                        "description": "Controls width of a label's margins. Useful for thermal printers with slighly skewed printing.\n- 1.0 is normal margin.  - 0.9 is 10% thinner - 1.1 is 10% thicker",
                        "example": 1.0
                      }
                    }
                  },
                  "debug": {
                    "type": "boolean",
                    "description": "When set to true, draws bounding boxes around the label containers, the printable area, and the individual elements per label."
                  }
                },
                "required": [
                  "labelTemplateLayoutId",
                  "labelContentLayoutId",
                  "data"
                ],
                "additionalProperties": false
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "List of LabelContentData objects compiled from the packages and template",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/T3LabelContentData"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Labels",
          "Packages",
          "Free"
        ]
      }
    }
  },
  "components": {
    "securitySchemes": {
      "BearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT",
        "description": "Standard Authorization header using the Bearer scheme. Example: \"Authorization: Bearer {token}\""
      }
    },
    "responses": {
      "SuccessMutationResponse": {
        "description": "The operation completed successfully.\n",
        "content": {
          "application/json": {
            "schema": {
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Describes the nature of this successful operation\n- \"Success\" indicates the request passed validation and was successfully passed to Metrc\n- \"Dry run\" indicates the request passed validation, but the request was not sent to Metrc\n",
                  "example": "Success"
                }
              }
            }
          }
        }
      },
      "BadRequestMutationResponse": {
        "description": "An error response indicating the request was invalid. Refer to the response body for details.",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "object",
                  "properties": {
                    "type": {
                      "type": "string",
                      "example": "BadRequest"
                    },
                    "message": {
                      "type": "string",
                      "example": "400 Bad Request: Invalid request body: 'note' is a required property"
                    },
                    "timestamp": {
                      "type": "string",
                      "format": "date-time",
                      "example": "2024-08-09T12:34:56.789Z"
                    },
                    "url": {
                      "type": "string",
                      "example": "https://api.trackandtrace.tools/some-endpoint"
                    },
                    "status_code": {
                      "type": "integer",
                      "example": 400
                    }
                  }
                }
              }
            }
          }
        }
      },
      "InternalServerErrorMutationResponse": {
        "description": "An error response indicating the server experienced an unexpected error.",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "object",
                  "properties": {
                    "type": {
                      "type": "string",
                      "example": "InternalServerError"
                    },
                    "message": {
                      "type": "string",
                      "example": "500 InternalServerError"
                    },
                    "timestamp": {
                      "type": "string",
                      "format": "date-time",
                      "example": "2024-08-09T12:34:56.789Z"
                    },
                    "url": {
                      "type": "string",
                      "example": "https://api.trackandtrace.tools/some-endpoint"
                    },
                    "status_code": {
                      "type": "integer",
                      "example": 500
                    }
                  }
                }
              }
            }
          }
        }
      },
      "ServiceUnavailableMutationResponse": {
        "description": "An error response indicating the Metrc servers are experiencing downtime.",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "object",
                  "properties": {
                    "type": {
                      "type": "string",
                      "example": "ServiceUnavailable"
                    },
                    "message": {
                      "type": "string",
                      "example": "503 ServiceUnavailable"
                    },
                    "timestamp": {
                      "type": "string",
                      "format": "date-time",
                      "example": "2024-08-09T12:34:56.789Z"
                    },
                    "url": {
                      "type": "string",
                      "example": "https://api.trackandtrace.tools/some-endpoint"
                    },
                    "status_code": {
                      "type": "integer",
                      "example": 503
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "schemas": {
      "AccessToken": {
        "type": "string",
        "description": "A JSON web token used to send authenticated API requests",
        "example": "eyJhbGciOiJSUzI1NiIsImtpZCI6IjE2ODciLCJ0eXAiOiJKV1QifQ.eyJpc3MiOiJodHRwczovL2V4YW1wbGUuY29tIiwic3ViIjoiMTIzNDU2Nzg5MCIsIm5hbWUiOiJKYW5lIERvZSIsImF1ZCI6Imh0dHBzOi8vZXhhbXBsZS5jb20vYXBpIiwiZXhwIjoxNjA5MzYwMDAwfQ.Q8B8u5h5wvxgK3xN-zsmBbs3_HwPkjFz8wq_Fk2JYfw"
      },
      "RefreshToken": {
        "type": "string",
        "description": "Refresh token used to acquire a new access token",
        "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiYWJjMTIzIiwidXNlcm5hbWUiOiJleGFtcGxlVXNlciIsImV4cCI6MTYwOTM1OTAwMH0.HJbO67hFNph5t6KjKQ1T1-EKn9H7hvhb34bTft1zDsQ"
      },
      "JWTData": {
        "type": "object",
        "properties": {
          "authMode": {
            "type": "string",
            "example": "CREDENTIALS"
          },
          "credentialKey": {
            "type": "string",
            "example": "mo.metrc.com__MyMetrcUsername"
          },
          "hasT3plus": {
            "type": "boolean",
            "example": true
          },
          "username": {
            "type": "string",
            "example": "MyMetrcUsername"
          },
          "hostname": {
            "type": "string",
            "example": "mo.metrc.com"
          }
        }
      },
      "SearchResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "endpointId": {
                  "description": "ID of the endpoint that returned this object",
                  "$ref": "#/components/schemas/EndpointId"
                },
                "score": {
                  "type": "number",
                  "description": "The search score for this result. A higher score means a better match.",
                  "format": "float"
                },
                "matchedEntry": {
                  "type": "object",
                  "description": "The object that matched this query"
                }
              }
            },
            "example": [
              {
                "endpointId": "METRC_ACTIVE_ITEMS",
                "matchedEntry": {
                  "administrationMethod": "N/A",
                  "allergens": "",
                  "approvalStatusDateTime": "2023-08-20T15:11:10+00:00",
                  "approvalStatusName": "Approved",
                  "dataModel": "MetrcItem",
                  "defaultLabTestingStateName": "NotSubmitted",
                  "description": "",
                  "expirationConfigurationState": "Off",
                  "expirationDateConfiguration": "Off",
                  "expirationDateDaysInAdvance": null,
                  "facilityLicenseNumber": null,
                  "facilityName": null,
                  "id": 12345,
                  "index": "ACTIVE_ITEM",
                  "isArchived": false,
                  "isUsed": false,
                  "itemBrandId": 0,
                  "itemBrandName": null,
                  "labelImages": [],
                  "labelPhotoDescription": "",
                  "lastModified": null,
                  "licenseNumber": "Ex00001",
                  "name": "Wedding Cake - 3.5g Prepack",
                  "numberOfDoses": 14,
                  "packagingImages": [],
                  "packagingPhotoDescription": "",
                  "processingJobCategoryId": null,
                  "processingJobCategoryName": null,
                  "productCategoryId": 401,
                  "productCategoryName": "Bud/Flower (Final Packaging)",
                  "productCategoryTypeName": "Buds",
                  "productImages": [],
                  "productPDFDocuments": [],
                  "productPhotoDescription": "",
                  "publicIngredients": "Cannabis flower",
                  "quantityTypeName": "WeightBased",
                  "retrievedAt": "2024-08-28T01:19:48.123456",
                  "sellByConfigurationState": "Off",
                  "sellByDateConfiguration": "Off",
                  "sellByDateDaysInAdvance": null,
                  "servingSize": "0.25g",
                  "strainName": "Wedding Cake",
                  "supplyDurationDays": null,
                  "unitCbdContent": null,
                  "unitCbdContentDose": null,
                  "unitCbdContentDoseUnitOfMeasureAbbreviation": null,
                  "unitCbdContentUnitOfMeasureAbbreviation": null,
                  "unitCbdPercent": null,
                  "unitOfMeasureId": 4,
                  "unitOfMeasureName": "Grams",
                  "unitQuantity": null,
                  "unitQuantityUnitOfMeasureAbbreviation": null,
                  "unitThcContent": null,
                  "unitThcContentDose": null,
                  "unitThcContentDoseUnitOfMeasureAbbreviation": null,
                  "unitThcContentUnitOfMeasureAbbreviation": null,
                  "unitThcContentUnitOfMeasureId": null,
                  "unitThcPercent": null,
                  "unitVolume": null,
                  "unitVolumeUnitOfMeasureAbbreviation": null,
                  "unitWeight": null,
                  "unitWeightUnitOfMeasureAbbreviation": null,
                  "unitWeightUnitOfMeasureId": null,
                  "useByConfigurationState": "Off",
                  "useByDateConfiguration": "Off",
                  "useByDateDaysInAdvance": null
                },
                "score": 0.12244897959183673
              },
              {
                "endpointId": "METRC_TRANSFERRED_PACKAGES",
                "score": 0.08333333333333333,
                "matchedEntry": {
                  "actualDepartureDateTime": "2024-07-17T07:00:00-05:00",
                  "dataModel": "MetrcTransferredPackage",
                  "grossUnitOfWeightAbbreviation": "g",
                  "grossWeight": 222.0,
                  "id": 123456,
                  "index": "TRANSFERRED_PACKAGE",
                  "itemStrainName": "Blue Dream",
                  "labTestingStateName": "TestPassed",
                  "licenseNumber": "EX00001",
                  "manifestNumber": "1234566",
                  "packageId": 1234566,
                  "packageLabel": "1A40C0300000000000000025",
                  "productCategoryName": "Shake/Trim",
                  "productName": "Blue Dream",
                  "receivedDateTime": "2024-07-17T00:00:00-05:00",
                  "receivedQuantity": 222.0,
                  "receivedUnitOfMeasureAbbreviation": "g",
                  "receiverWholesalePrice": 0.01,
                  "recipientFacilityLicenseNumber": "MAN000036",
                  "recipientFacilityName": "Foobar LLC",
                  "retrievedAt": "2024-08-28T15:01:11.123456",
                  "shipmentPackageStateName": "Accepted",
                  "shippedQuantity": 222.0,
                  "shippedUnitOfMeasureAbbreviation": "g",
                  "shipperWholesalePrice": 0.01,
                  "sourceHarvestNames": "BD0001",
                  "sourcePackageLabels": "1A4000000000000000000290, 1A4000000000000000000292"
                }
              }
            ]
          },
          "queriedMetrcEndpointIds": {
            "description": "Endpoints which were successfully queried.",
            "type": "array",
            "example": [
              "ACTIVE_ITEMS",
              "ACTIVE_HARVESTS",
              "ACTIVE_PLANTBATCHES",
              "ACTIVE_PACKAGES",
              "INTRANSIT_PACKAGES",
              "TRANSFERRED_PACKAGES",
              "VEGETATIVE_PLANTS",
              "FLOWERING_PLANTS"
            ],
            "items": {
              "$ref": "#/components/schemas/EndpointId"
            }
          },
          "failedMetrcEndpointIds": {
            "description": "Endpoints which could not be queried, either due to Metrc error or lack of permissions.",
            "type": "array",
            "example": [],
            "items": {
              "$ref": "#/components/schemas/EndpointId"
            }
          }
        }
      },
      "EndpointId": {
        "type": "string",
        "description": "Uniquely identifies a Metrc endpoint used to query data.",
        "example": "ACTIVE_PACKAGES",
        "enum": [
          "ACTIVE_HARVESTS",
          "ONHOLD_HARVESTS",
          "INACTIVE_HARVESTS",
          "ACTIVE_ITEMS",
          "ACTIVE_PACKAGES",
          "ONHOLD_PACKAGES",
          "INACTIVE_PACKAGES",
          "INTRANSIT_PACKAGES",
          "TRANSFERRED_PACKAGES",
          "PACKAGE_HISTORY",
          "PACKAGE_LABRESULTS",
          "PACKAGE_SOURCE_HARVESTS",
          "CREATE_PACKAGES_SOURCE_PACKAGES",
          "CREATE_PACKAGES_SOURCE_ITEMS",
          "ACTIVE_PLANTBATCHES",
          "ONHOLD_PLANTBATCHES",
          "INACTIVE_PLANTBATCHES",
          "VEGETATIVE_PLANTS",
          "FLOWERING_PLANTS",
          "ONHOLD_PLANTS",
          "INACTIVE_PLANTS",
          "INCOMING_ACTIVE_TRANSFERS",
          "INCOMING_INACTIVE_TRANSFERS",
          "OUTGOING_ACTIVE_TRANSFERS",
          "OUTGOING_INACTIVE_TRANSFERS",
          "OUTGOING_REJECTED_TRANSFERS",
          "TRANSFER_DELIVERIES",
          "TRANSFER_TRANSPORTER_DETAILS",
          "DELIVERY_TRANSPORTERS",
          "TRANSFER_PACKAGES",
          "TRANSFER_HISTORY",
          "CREATE_TRANSFER_DESTINATIONS",
          "CREATE_DELIVERY_TRANSPORTERS",
          "PACKAGE_LABRESULTS_DOCUMENT",
          "CREATE_PACKAGES_FROM_PACKAGES",
          "CREATE_PACKAGES_INPUTS",
          "CREATE_TRANSFERS",
          "TRANSFER_MANIFEST",
          "CREATE_TRANSFER_INPUTS",
          "ADD_PACKAGE_NOTES"
        ]
      },
      "SecretKey": {
        "type": "string",
        "description": "The generated secret key",
        "example": "2616ec56-fa2a-4c5b-86c0-acacf23c9ef7"
      },
      "MetrcCredentialAuthPayload": {
        "properties": {
          "username": {
            "type": "string",
            "description": "Your Metrc username",
            "example": "johndoe"
          },
          "password": {
            "type": "string",
            "description": "Your Metrc password",
            "example": "secretpassword"
          },
          "hostname": {
            "type": "string",
            "description": "The Metrc hostname you use to login. For example, a California user would use ca.metrc.com.",
            "enum": [
              "ak.metrc.com",
              "al.metrc.com",
              "ca.metrc.com",
              "co.metrc.com",
              "il.metrc.com",
              "ky.metrc.com",
              "la.metrc.com",
              "ma.metrc.com",
              "md.metrc.com",
              "me.metrc.com",
              "mi.metrc.com",
              "mn.metrc.com",
              "mo.metrc.com",
              "ms.metrc.com",
              "mt.metrc.com",
              "nj.metrc.com",
              "nv.metrc.com",
              "oh.metrc.com",
              "ok.metrc.com",
              "or.metrc.com",
              "sd.metrc.com",
              "wv.metrc.com"
            ],
            "example": "ca.metrc.com"
          },
          "otp": {
            "type": "string",
            "nullable": true,
            "description": "(MI only) a valid one-time password",
            "example": 123456
          }
        },
        "required": [
          "username",
          "password",
          "hostname"
        ],
        "additionalProperties": false
      },
      "Pagination": {
        "type": "object",
        "properties": {
          "page": {
            "type": "integer",
            "example": 1
          },
          "totalPages": {
            "type": "integer",
            "example": 3
          },
          "pageSize": {
            "type": "integer",
            "example": 100
          },
          "total": {
            "type": "integer",
            "example": 235
          }
        }
      },
      "T3GenerateLabelsPayload": {
        "type": "object",
        "properties": {
          "labelTemplateLayoutId": {
            "type": "string",
            "description": "The identifier for the label template configuration",
            "example": "AVERY_8160__2_625Wx1_0H"
          },
          "labelContentLayoutId": {
            "type": "string",
            "description": "The identifier for the label content configuration.",
            "example": "COL_TEXT_CODE128_TEXT"
          },
          "labelContentData": {
            "type": "array",
            "description": "A list of label content data objects to be filled into labels.  Refer to the label content layout information for which of these fields are required and where they will be inserted.",
            "items": {
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "text1": {
                  "type": "string",
                  "example": "text1"
                },
                "text2": {
                  "type": "string",
                  "example": "text2"
                },
                "text3": {
                  "type": "string",
                  "example": "text3"
                },
                "text4": {
                  "type": "string",
                  "example": "text4"
                },
                "text5": {
                  "type": "string",
                  "example": "text5"
                },
                "text6": {
                  "type": "string",
                  "example": "text6"
                },
                "text7": {
                  "type": "string",
                  "example": "text7"
                },
                "text8": {
                  "type": "string",
                  "example": "text8"
                }
              }
            }
          },
          "renderingOptions": {
            "type": "object",
            "description": "Options for controlling how the barcode will render.",
            "additionalProperties": false,
            "properties": {
              "debug": {
                "type": "boolean"
              },
              "enablePromo": {
                "type": "boolean"
              },
              "reversePrintOrder": {
                "type": "boolean"
              },
              "rotationDegrees": {
                "type": "number",
                "format": "float"
              },
              "barcodeBarThickness": {
                "type": "number",
                "format": "float",
                "description": "Controls how thick a barcode's bars will appear. Useful for low-DPI thermal printers.\nTested values: - Zebra printers with a Code128 should use 0.94 - Dymo printers with a Code128 should use 0.8\n- 1.0 is normal rendering.  - 0.9 is 10% thinner - 1.1 is 10% thicker",
                "example": 1.0
              },
              "labelMarginThickness": {
                "type": "number",
                "format": "float",
                "description": "Controls width of a label's margins. Useful for thermal printers with slighly skewed printing.\n- 1.0 is normal margin.  - 0.9 is 10% thinner - 1.1 is 10% thicker",
                "example": 1.0
              }
            }
          },
          "debug": {
            "type": "boolean",
            "description": "When set to true, draws bounding boxes around the label containers, the printable area, and the individual elements per label."
          },
          "forcePromo": {
            "type": "boolean",
            "description": "When set to true, force-enables the T3 promo bar on all generated labels irrespective of T3+ subscription status."
          },
          "disposition": {
            "type": "string",
            "description": "Specifies whether the PDF should be opened inline or downloaded as an attachment.",
            "enum": [
              "inline",
              "attachment"
            ],
            "default": "inline"
          }
        },
        "required": [
          "labelTemplateLayoutId",
          "labelContentLayoutId",
          "labelContentData"
        ],
        "additionalProperties": false
      },
      "T3LabelContentLayoutsResponse": {
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "data": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "COL_CODE128_TEXT"
                    },
                    "description": {
                      "type": "string",
                      "example": "Code128 barcode, with text below"
                    },
                    "requiresT3plus": {
                      "type": "boolean",
                      "example": true
                    },
                    "minAspectRatio": {
                      "type": "number",
                      "format": "float",
                      "example": 2.5
                    },
                    "maxAspectRatio": {
                      "type": "number",
                      "format": "float",
                      "example": 2.5
                    },
                    "elements": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "description": {
                            "type": "string",
                            "example": "Code 128 barcode scannable value"
                          },
                          "element_type": {
                            "type": "string",
                            "example": "CODE128_BARCODE"
                          },
                          "labelContentDataKey": {
                            "type": "string",
                            "description": "The value",
                            "example": "text1"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "T3LabelTemplateLayoutsResponse": {
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "data": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "integer",
                      "example": 10
                    },
                    "labelTemplateLayoutId": {
                      "type": "string",
                      "example": "AVERY_8160__2_625Wx1_0H"
                    },
                    "description": {
                      "type": "string",
                      "example": "8.5\"x11\" sheet of Avery 8160 labels (2.625\"x1\")"
                    },
                    "requiresT3plus": {
                      "type": "boolean",
                      "example": false
                    },
                    "enabled": {
                      "type": "boolean",
                      "example": true
                    },
                    "visible": {
                      "type": "boolean",
                      "example": true
                    },
                    "printerTypes": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "example": [
                        "LASER",
                        "INKJET"
                      ]
                    },
                    "labelTemplateLayoutConfig": {
                      "type": "object",
                      "properties": {
                        "numRows": {
                          "type": "integer",
                          "example": 10
                        },
                        "xGapIn": {
                          "type": "number",
                          "format": "float",
                          "example": 0.125
                        },
                        "yGapIn": {
                          "type": "number",
                          "format": "float",
                          "example": 0.0
                        },
                        "numColumns": {
                          "type": "integer",
                          "example": 3
                        },
                        "pageSizeXIn": {
                          "type": "number",
                          "format": "float",
                          "example": 8.5
                        },
                        "pageSizeYIn": {
                          "type": "number",
                          "format": "float",
                          "example": 11.0
                        },
                        "labelWidthIn": {
                          "type": "number",
                          "format": "float",
                          "example": 2.625
                        },
                        "labelHeightIn": {
                          "type": "number",
                          "format": "float",
                          "example": 1.0
                        },
                        "labelPaddingXIn": {
                          "type": "number",
                          "format": "float",
                          "example": 0.0625
                        },
                        "labelPaddingYIn": {
                          "type": "number",
                          "format": "float",
                          "example": 0.0625
                        },
                        "pageMarginTopIn": {
                          "type": "number",
                          "format": "float",
                          "example": 0.5
                        },
                        "pageMarginLeftIn": {
                          "type": "number",
                          "format": "float",
                          "example": 0.1875
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "T3IncomingTransferManifest": {
        "type": "object",
        "properties": {
          "transfer.dataModel": {
            "type": "string",
            "description": "Name of this object's data model",
            "example": "MetrcPackage"
          },
          "transfer.retrievedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp of when this object was pulled from Metrc"
          },
          "transfer.licenseNumber": {
            "type": "string",
            "description": "License number used to access this object"
          },
          "transfer.index": {
            "type": "string",
            "description": "Describes the current state of this object at the time it was returned from the API. This cannot be used to sort or filter.",
            "example": "ACTIVE_INCOMING_TRANSFER",
            "enum": [
              "ACTIVE_INCOMING_TRANSFER",
              "INACTIVE_INCOMING_TRANSFER"
            ]
          },
          "transfer.id": {
            "type": "integer",
            "format": "int64",
            "description": "Unique identifier for the transfer",
            "example": 1234567
          },
          "transfer.manifestNumber": {
            "type": "string",
            "description": "Unique manifest number associated with the transfer",
            "example": "0001234567"
          },
          "transfer.shipmentLicenseTypeName": {
            "type": "string",
            "description": "Type of license for the shipment",
            "example": "Licensed"
          },
          "transfer.shipperFacilityLicenseNumber": {
            "type": "string",
            "description": "License number of the shipper's facility",
            "example": "LIC-00002"
          },
          "transfer.shipperFacilityName": {
            "type": "string",
            "description": "Name of the shipper's facility",
            "example": "Fire Manufacturing, Inc."
          },
          "transfer.name": {
            "type": "string",
            "nullable": true,
            "description": "Name of the transfer"
          },
          "transfer.transporterFacilityLicenseNumber": {
            "type": "string",
            "description": "License number of the transporter facility",
            "example": ""
          },
          "transfer.transporterFacilityName": {
            "type": "string",
            "description": "Name of the transporter facility",
            "example": ""
          },
          "transfer.driverName": {
            "type": "string",
            "description": "Name of the driver",
            "example": ""
          },
          "transfer.driverOccupationalLicenseNumber": {
            "type": "string",
            "description": "Occupational license number of the driver",
            "example": ""
          },
          "transfer.driverVehicleLicenseNumber": {
            "type": "string",
            "description": "License number of the vehicle used by the driver",
            "example": ""
          },
          "transfer.vehicleMake": {
            "type": "string",
            "description": "Make of the vehicle used for transport",
            "example": ""
          },
          "transfer.vehicleModel": {
            "type": "string",
            "description": "Model of the vehicle used for transport",
            "example": ""
          },
          "transfer.vehicleLicensePlateNumber": {
            "type": "string",
            "description": "License plate number of the vehicle",
            "example": ""
          },
          "transfer.deliveryFacilities": {
            "type": "string",
            "description": "Details of the delivery facilities",
            "example": "LIC-00001 (Dank Dispensary LLC)"
          },
          "transfer.deliveryCount": {
            "type": "integer",
            "format": "int32",
            "description": "Number of deliveries in the transfer",
            "example": 1
          },
          "transfer.receivedDeliveryCount": {
            "type": "integer",
            "format": "int32",
            "description": "Number of deliveries received",
            "example": 0
          },
          "transfer.packageCount": {
            "type": "integer",
            "format": "int32",
            "description": "Total number of packages in the transfer",
            "example": 8
          },
          "transfer.receivedPackageCount": {
            "type": "integer",
            "format": "int32",
            "description": "Number of packages received",
            "example": 0
          },
          "transfer.containsPlantPackage": {
            "type": "boolean",
            "description": "Indicates if the transfer contains plant packages",
            "example": false
          },
          "transfer.containsProductPackage": {
            "type": "boolean",
            "description": "Indicates if the transfer contains product packages",
            "example": true
          },
          "transfer.containsTradeSample": {
            "type": "boolean",
            "description": "Indicates if the transfer contains trade samples",
            "example": false
          },
          "transfer.containsDonation": {
            "type": "boolean",
            "description": "Indicates if the transfer contains donations",
            "example": false
          },
          "transfer.containsTestingSample": {
            "type": "boolean",
            "description": "Indicates if the transfer contains testing samples",
            "example": false
          },
          "transfer.containsProductRequiresRemediation": {
            "type": "boolean",
            "description": "Indicates if the transfer contains products that require remediation",
            "example": false
          },
          "transfer.containsRemediatedProductPackage": {
            "type": "boolean",
            "description": "Indicates if the transfer contains remediated product packages",
            "example": false
          },
          "transfer.editCount": {
            "type": "integer",
            "format": "int32",
            "description": "Number of times the transfer record has been edited",
            "example": 1
          },
          "transfer.canEdit": {
            "type": "boolean",
            "description": "Indicates if the transfer record can be edited",
            "example": true
          },
          "transfer.canEditOutgoingInactive": {
            "type": "boolean",
            "description": "Indicates if the transfer record can be edited when outgoing and inactive",
            "example": false
          },
          "transfer.isVoided": {
            "type": "boolean",
            "description": "Indicates if the transfer has been voided",
            "example": false
          },
          "transfer.createdDateTime": {
            "type": "string",
            "format": "date-time",
            "description": "The date and time when the transfer was created",
            "example": "2024-07-25T13:00:00+00:00"
          },
          "transfer.createdByUserName": {
            "type": "string",
            "description": "Username of the person who created the transfer record",
            "example": "Mike Smith"
          },
          "transfer.lastModified": {
            "type": "string",
            "format": "date-time",
            "description": "The date and time when the transfer was last modified",
            "example": "2024-07-25T00:00:00+00:00"
          },
          "transfer.deliveryId": {
            "type": "integer",
            "format": "int64",
            "description": "Unique identifier for the delivery associated with the transfer",
            "example": 1234566
          },
          "transfer.recipientFacilityId": {
            "type": "integer",
            "format": "int32",
            "description": "The ID of the recipient facility.",
            "example": 456
          },
          "transfer.recipientFacilityLicenseNumber": {
            "type": "string",
            "description": "License number of the recipient facility",
            "example": "LIC-00001"
          },
          "transfer.recipientFacilityName": {
            "type": "string",
            "description": "Name of the recipient facility",
            "example": "Dank Dispensary LLC"
          },
          "transfer.shipmentTypeName": {
            "type": "string",
            "description": "Type of shipment",
            "example": "Unaffiliated Transfer"
          },
          "transfer.shipmentTransactionTypeName": {
            "type": "string",
            "description": "Type of shipment transaction",
            "example": "Wholesale"
          },
          "transfer.estimatedDepartureDateTime": {
            "type": "string",
            "format": "date-time",
            "description": "Estimated date and time of departure",
            "example": "2024-07-26T06:00:00.000"
          },
          "transfer.actualDepartureDateTime": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "description": "Actual date and time of departure"
          },
          "transfer.estimatedArrivalDateTime": {
            "type": "string",
            "format": "date-time",
            "description": "Estimated date and time of arrival",
            "example": "2024-07-26T17:00:00.000"
          },
          "transfer.actualArrivalDateTime": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "description": "Actual date and time of arrival"
          },
          "transfer.deliveryPackageCount": {
            "type": "integer",
            "format": "int32",
            "description": "Number of packages in the delivery",
            "example": 8
          },
          "transfer.deliveryReceivedPackageCount": {
            "type": "integer",
            "format": "int32",
            "description": "Number of packages received in the delivery",
            "example": 0
          },
          "transfer.receivedByName": {
            "type": "string",
            "nullable": true,
            "description": "Name of the person who received the delivery"
          },
          "transfer.receivedDateTime": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "description": "Date and time when the delivery was received"
          },
          "transfer.estimatedReturnDepartureDateTime": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "description": "Estimated date and time of return departure"
          },
          "transfer.actualReturnDepartureDateTime": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "description": "Actual date and time of return departure"
          },
          "transfer.estimatedReturnArrivalDateTime": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "description": "Estimated date and time of return arrival"
          },
          "transfer.actualReturnArrivalDateTime": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "description": "Actual date and time of return arrival"
          },
          "transfer.rejectedPackagesReturned": {
            "type": "boolean",
            "description": "Indicates if rejected packages were returned",
            "example": false
          },
          "transfer.transporterAllApprovalDate": {
            "type": "string",
            "format": "date-time",
            "description": "Date and time when all transporters were approved",
            "example": "2024-07-25T13:00:00+00:00"
          },
          "transfer.destinationsAllApprovalDate": {
            "type": "string",
            "format": "date-time",
            "description": "Date and time when all destinations were approved",
            "example": "2024-07-25T13:00:00+00:00"
          },
          "transfer.transportersAutomaticallyApproved": {
            "type": "boolean",
            "description": "Indicates if transporters were automatically approved",
            "example": true
          },
          "transfer.destinationsAutomaticallyApproved": {
            "type": "boolean",
            "description": "Indicates if destinations were automatically approved",
            "example": true
          },
          "transfer.approvalRejectDateTime": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "description": "Date and time when the approval was rejected"
          },
          "transfer.approvalRejectedByUser": {
            "type": "string",
            "description": "Username of the person who rejected the approval",
            "example": "Mike Smith"
          },
          "transfer.approvalRejectedFacilityLicenseNumber": {
            "type": "string",
            "nullable": true,
            "description": "License number of the facility where approval was rejected"
          },
          "transfer.approvalRejectReasonId": {
            "type": "string",
            "nullable": true,
            "description": "Reason ID for the approval rejection"
          },
          "transfer.tollingAgreementFileSystemId": {
            "type": "number",
            "example": 0
          },
          "transfer.invoiceNumber": {
            "type": "string",
            "example": ""
          },
          "transporter.dataModel": {
            "type": "string",
            "description": "Name of this object's data model",
            "example": "MetrcPackage"
          },
          "transporter.retrievedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp of when this object was pulled from Metrc"
          },
          "transporter.licenseNumber": {
            "type": "string",
            "description": "License number used to access this object"
          },
          "transporter.transporterFacilityLicenseNumber": {
            "type": "string",
            "description": "The license number of the transporter's facility.",
            "example": "LIC-00001"
          },
          "transporter.transporterFacilityName": {
            "type": "string",
            "description": "The name of the transporter's facility.",
            "example": "Dank Dispensary LLC"
          },
          "transporter.transporterDirectionName": {
            "type": "string",
            "enum": [
              "Outbound"
            ],
            "description": "The direction of the transporter.",
            "example": "Outbound"
          },
          "transporter.transporterApprovalDate": {
            "type": "string",
            "format": "date-time",
            "description": "The date and time when the transporter was approved.",
            "example": "2024-07-26T13:00:00+00:00"
          },
          "transporter.transporterAutoApproval": {
            "type": "boolean",
            "description": "Indicates if the transporter was automatically approved.",
            "example": true
          },
          "transporter.driverName": {
            "type": "string",
            "description": "The name of the driver.",
            "example": "John Doe"
          },
          "transporter.driverOccupationalLicenseNumber": {
            "type": "string",
            "description": "The occupational license number of the driver.",
            "example": "DL123456789"
          },
          "transporter.driverVehicleLicenseNumber": {
            "type": "string",
            "description": "The vehicle license number of the driver.",
            "example": "ABC1234"
          },
          "transporter.driverLayoverLeg": {
            "type": "string",
            "nullable": true,
            "description": "Information about the driver's layover leg."
          },
          "transporter.vehicleMake": {
            "type": "string",
            "description": "The make of the vehicle.",
            "example": "Ford"
          },
          "transporter.vehicleModel": {
            "type": "string",
            "description": "The model of the vehicle.",
            "example": "F-150"
          },
          "transporter.vehicleLicensePlateNumber": {
            "type": "string",
            "description": "The license plate number of the vehicle.",
            "example": "XYZ7890"
          },
          "transporter.acceptedDateTime": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "description": "The date and time when the transporter was accepted.",
            "example": "2024-07-26T13:00:00-05:00"
          },
          "transporter.isLayover": {
            "type": "boolean",
            "description": "Indicates if the transport includes a layover.",
            "example": false
          },
          "transporter.estimatedDepartureDateTime": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "description": "The estimated date and time of departure.",
            "example": "2024-07-26T14:00:00+00:00"
          },
          "transporter.actualDepartureDateTime": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "description": "The actual date and time of departure."
          },
          "transporter.estimatedArrivalDateTime": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "description": "The estimated date and time of arrival.",
            "example": "2024-07-26T15:00:00+00:00"
          },
          "transporter.actualArrivalDateTime": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "description": "The actual date and time of arrival."
          },
          "package.id": {
            "type": "integer",
            "description": "Unique identifier for the item",
            "example": 1234567,
            "nullable": false
          },
          "package.dataModel": {
            "type": "string",
            "description": "Name of this object's data model",
            "example": "MetrcPackage"
          },
          "package.retrievedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp of when this object was pulled from Metrc"
          },
          "package.licenseNumber": {
            "type": "string",
            "description": "License number used to access this object"
          },
          "package.index": {
            "type": "string",
            "description": "Describes the current state of this object at the time it was returned from the API. This cannot be used to sort or filter.",
            "example": "TRANSFERRED_PACKAGE",
            "enum": [
              "TRANSFERRED_PACKAGE"
            ]
          },
          "package.packageId": {
            "type": "integer",
            "description": "Identifier for the package",
            "example": 9876543,
            "nullable": false
          },
          "package.recipientFacilityLicenseNumber": {
            "type": "string",
            "description": "License number of the recipient facility",
            "example": "LIC-00001",
            "nullable": false
          },
          "package.recipientFacilityName": {
            "type": "string",
            "description": "Name of the recipient facility",
            "example": "Dank Dispensary LLC",
            "nullable": false
          },
          "package.manifestNumber": {
            "type": "string",
            "description": "Manifest number associated with the shipment",
            "example": "0001234567",
            "nullable": false
          },
          "package.packageLabel": {
            "type": "string",
            "description": "Label of the package",
            "example": "1A4000000000000000006310",
            "nullable": false
          },
          "package.sourceHarvestNames": {
            "type": "string",
            "description": "Names of the source harvests",
            "example": "Sunset Sherbet",
            "nullable": true
          },
          "package.sourcePackageLabels": {
            "type": "string",
            "description": "Labels of the source packages",
            "example": "1A4000000000000000005267",
            "nullable": true
          },
          "package.productName": {
            "type": "string",
            "description": "Name of the product",
            "example": "Sunset Sherbet | 3.5g",
            "nullable": false
          },
          "package.productCategoryName": {
            "type": "string",
            "description": "Category name of the product",
            "example": "Bud/Flower (Final Packaging)",
            "nullable": false
          },
          "package.itemStrainName": {
            "type": "string",
            "description": "Strain name of the item",
            "example": "Sunset Sherbet",
            "nullable": false
          },
          "package.labTestingStateName": {
            "type": "string",
            "description": "Lab testing status of the item",
            "example": "TestPassed",
            "enum": [
              "TestPassed",
              "TestFailed",
              "Pending"
            ],
            "nullable": false
          },
          "package.shippedQuantity": {
            "type": "number",
            "description": "Quantity shipped",
            "format": "double",
            "example": 1224.0,
            "nullable": false
          },
          "package.shippedUnitOfMeasureAbbreviation": {
            "type": "string",
            "description": "Unit of measure for the shipped quantity",
            "example": "g",
            "nullable": false
          },
          "package.grossWeight": {
            "type": "number",
            "description": "Gross weight of the package",
            "format": "double",
            "example": 224.0,
            "nullable": false
          },
          "package.grossUnitOfWeightAbbreviation": {
            "type": "string",
            "description": "Unit of measure for the gross weight",
            "example": "g",
            "nullable": false
          },
          "package.shipperWholesalePrice": {
            "type": "number",
            "description": "Wholesale price from the shipper",
            "format": "double",
            "nullable": true
          },
          "package.receivedQuantity": {
            "type": "number",
            "description": "Quantity received",
            "format": "double",
            "example": 1224.0,
            "nullable": false
          },
          "package.receivedUnitOfMeasureAbbreviation": {
            "type": "string",
            "description": "Unit of measure for the received quantity",
            "example": "g",
            "nullable": false
          },
          "package.receiverWholesalePrice": {
            "type": "number",
            "description": "Wholesale price to the receiver",
            "format": "double",
            "nullable": true
          },
          "package.shipmentPackageStateName": {
            "type": "string",
            "description": "State of the shipment package",
            "example": "Accepted",
            "enum": [
              "Accepted",
              "Rejected",
              "Pending"
            ],
            "nullable": false
          },
          "package.actualDepartureDateTime": {
            "type": "string",
            "description": "Actual departure date and time",
            "format": "date-time",
            "nullable": true
          },
          "package.receivedDateTime": {
            "type": "string",
            "description": "Date and time when the package was received",
            "format": "date-time",
            "example": "2024-07-26T00:00:00-05:00",
            "nullable": false
          },
          "package.processingJobTypeName": {
            "type": "string",
            "nullable": true
          }
        },
        "required": [
          "package.grossUnitOfWeightAbbreviation",
          "package.grossWeight",
          "package.id",
          "package.itemStrainName",
          "package.labTestingStateName",
          "package.manifestNumber",
          "package.packageId",
          "package.packageLabel",
          "package.productCategoryName",
          "package.productName",
          "package.receivedDateTime",
          "package.receivedQuantity",
          "package.receivedUnitOfMeasureAbbreviation",
          "package.recipientFacilityLicenseNumber",
          "package.recipientFacilityName",
          "package.shipmentPackageStateName",
          "package.shippedQuantity",
          "package.shippedUnitOfMeasureAbbreviation"
        ]
      },
      "T3OutgoingTransferManifest": {
        "type": "object",
        "properties": {
          "transfer.dataModel": {
            "type": "string",
            "description": "Name of this object's data model",
            "example": "MetrcPackage"
          },
          "transfer.retrievedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp of when this object was pulled from Metrc"
          },
          "transfer.licenseNumber": {
            "type": "string",
            "description": "License number used to access this object"
          },
          "transfer.index": {
            "type": "string",
            "description": "Describes the current state of this object at the time it was returned from the API. This cannot be used to sort or filter.",
            "example": "ACTIVE_OUTGOING_TRANSFER",
            "enum": [
              "ACTIVE_OUTGOING_TRANSFER",
              "INACTIVE_OUTGOING_TRANSFER",
              "REJECTED_TRANSFER"
            ]
          },
          "transfer.id": {
            "type": "integer",
            "format": "int64",
            "description": "Unique identifier for the transfer",
            "example": 1234567
          },
          "transfer.manifestNumber": {
            "type": "string",
            "description": "Unique manifest number associated with the transfer",
            "example": "0001234567"
          },
          "transfer.shipmentLicenseTypeName": {
            "type": "string",
            "description": "Type of license for the shipment",
            "example": "Licensed"
          },
          "transfer.shipperFacilityLicenseNumber": {
            "type": "string",
            "description": "License number of the shipper's facility",
            "example": "LIC-00002"
          },
          "transfer.shipperFacilityName": {
            "type": "string",
            "description": "Name of the shipper's facility",
            "example": "Fire Manufacturing, Inc."
          },
          "transfer.name": {
            "type": "string",
            "nullable": true,
            "description": "Name of the transfer"
          },
          "transfer.transporterFacilityLicenseNumber": {
            "type": "string",
            "description": "License number of the transporter facility",
            "example": ""
          },
          "transfer.transporterFacilityName": {
            "type": "string",
            "description": "Name of the transporter facility",
            "example": ""
          },
          "transfer.driverName": {
            "type": "string",
            "description": "Name of the driver",
            "example": ""
          },
          "transfer.driverOccupationalLicenseNumber": {
            "type": "string",
            "description": "Occupational license number of the driver",
            "example": ""
          },
          "transfer.driverVehicleLicenseNumber": {
            "type": "string",
            "description": "License number of the vehicle used by the driver",
            "example": ""
          },
          "transfer.vehicleMake": {
            "type": "string",
            "description": "Make of the vehicle used for transport",
            "example": ""
          },
          "transfer.vehicleModel": {
            "type": "string",
            "description": "Model of the vehicle used for transport",
            "example": ""
          },
          "transfer.vehicleLicensePlateNumber": {
            "type": "string",
            "description": "License plate number of the vehicle",
            "example": ""
          },
          "transfer.deliveryFacilities": {
            "type": "string",
            "description": "Details of the delivery facilities",
            "example": "LIC-00001 (Dank Dispensary LLC)"
          },
          "transfer.deliveryCount": {
            "type": "integer",
            "format": "int32",
            "description": "Number of deliveries in the transfer",
            "example": 1
          },
          "transfer.receivedDeliveryCount": {
            "type": "integer",
            "format": "int32",
            "description": "Number of deliveries received",
            "example": 0
          },
          "transfer.packageCount": {
            "type": "integer",
            "format": "int32",
            "description": "Total number of packages in the transfer",
            "example": 8
          },
          "transfer.receivedPackageCount": {
            "type": "integer",
            "format": "int32",
            "description": "Number of packages received",
            "example": 0
          },
          "transfer.containsPlantPackage": {
            "type": "boolean",
            "description": "Indicates if the transfer contains plant packages",
            "example": false
          },
          "transfer.containsProductPackage": {
            "type": "boolean",
            "description": "Indicates if the transfer contains product packages",
            "example": true
          },
          "transfer.containsTradeSample": {
            "type": "boolean",
            "description": "Indicates if the transfer contains trade samples",
            "example": false
          },
          "transfer.containsDonation": {
            "type": "boolean",
            "description": "Indicates if the transfer contains donations",
            "example": false
          },
          "transfer.containsTestingSample": {
            "type": "boolean",
            "description": "Indicates if the transfer contains testing samples",
            "example": false
          },
          "transfer.containsProductRequiresRemediation": {
            "type": "boolean",
            "description": "Indicates if the transfer contains products that require remediation",
            "example": false
          },
          "transfer.containsRemediatedProductPackage": {
            "type": "boolean",
            "description": "Indicates if the transfer contains remediated product packages",
            "example": false
          },
          "transfer.editCount": {
            "type": "integer",
            "format": "int32",
            "description": "Number of times the transfer record has been edited",
            "example": 1
          },
          "transfer.canEdit": {
            "type": "boolean",
            "description": "Indicates if the transfer record can be edited",
            "example": true
          },
          "transfer.canEditOutgoingInactive": {
            "type": "boolean",
            "description": "Indicates if the transfer record can be edited when outgoing and inactive",
            "example": false
          },
          "transfer.isVoided": {
            "type": "boolean",
            "description": "Indicates if the transfer has been voided",
            "example": false
          },
          "transfer.createdDateTime": {
            "type": "string",
            "format": "date-time",
            "description": "The date and time when the transfer was created",
            "example": "2024-07-25T13:00:00+00:00"
          },
          "transfer.createdByUserName": {
            "type": "string",
            "description": "Username of the person who created the transfer record",
            "example": "Mike Smith"
          },
          "transfer.lastModified": {
            "type": "string",
            "format": "date-time",
            "description": "The date and time when the transfer was last modified",
            "example": "2024-07-25T00:00:00+00:00"
          },
          "transfer.deliveryId": {
            "type": "integer",
            "format": "int64",
            "description": "Unique identifier for the delivery associated with the transfer",
            "example": 1234566
          },
          "transfer.recipientFacilityId": {
            "type": "integer",
            "format": "int32",
            "description": "The ID of the recipient facility.",
            "example": 456
          },
          "transfer.recipientFacilityLicenseNumber": {
            "type": "string",
            "description": "License number of the recipient facility",
            "example": "LIC-00001"
          },
          "transfer.recipientFacilityName": {
            "type": "string",
            "description": "Name of the recipient facility",
            "example": "Dank Dispensary LLC"
          },
          "transfer.shipmentTypeName": {
            "type": "string",
            "description": "Type of shipment",
            "example": "Unaffiliated Transfer"
          },
          "transfer.shipmentTransactionTypeName": {
            "type": "string",
            "description": "Type of shipment transaction",
            "example": "Wholesale"
          },
          "transfer.estimatedDepartureDateTime": {
            "type": "string",
            "format": "date-time",
            "description": "Estimated date and time of departure",
            "example": "2024-07-26T06:00:00.000"
          },
          "transfer.actualDepartureDateTime": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "description": "Actual date and time of departure"
          },
          "transfer.estimatedArrivalDateTime": {
            "type": "string",
            "format": "date-time",
            "description": "Estimated date and time of arrival",
            "example": "2024-07-26T17:00:00.000"
          },
          "transfer.actualArrivalDateTime": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "description": "Actual date and time of arrival"
          },
          "transfer.deliveryPackageCount": {
            "type": "integer",
            "format": "int32",
            "description": "Number of packages in the delivery",
            "example": 8
          },
          "transfer.deliveryReceivedPackageCount": {
            "type": "integer",
            "format": "int32",
            "description": "Number of packages received in the delivery",
            "example": 0
          },
          "transfer.receivedByName": {
            "type": "string",
            "nullable": true,
            "description": "Name of the person who received the delivery"
          },
          "transfer.receivedDateTime": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "description": "Date and time when the delivery was received"
          },
          "transfer.estimatedReturnDepartureDateTime": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "description": "Estimated date and time of return departure"
          },
          "transfer.actualReturnDepartureDateTime": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "description": "Actual date and time of return departure"
          },
          "transfer.estimatedReturnArrivalDateTime": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "description": "Estimated date and time of return arrival"
          },
          "transfer.actualReturnArrivalDateTime": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "description": "Actual date and time of return arrival"
          },
          "transfer.rejectedPackagesReturned": {
            "type": "boolean",
            "description": "Indicates if rejected packages were returned",
            "example": false
          },
          "transfer.transporterAllApprovalDate": {
            "type": "string",
            "format": "date-time",
            "description": "Date and time when all transporters were approved",
            "example": "2024-07-25T13:00:00+00:00"
          },
          "transfer.destinationsAllApprovalDate": {
            "type": "string",
            "format": "date-time",
            "description": "Date and time when all destinations were approved",
            "example": "2024-07-25T13:00:00+00:00"
          },
          "transfer.transportersAutomaticallyApproved": {
            "type": "boolean",
            "description": "Indicates if transporters were automatically approved",
            "example": true
          },
          "transfer.destinationsAutomaticallyApproved": {
            "type": "boolean",
            "description": "Indicates if destinations were automatically approved",
            "example": true
          },
          "transfer.approvalRejectDateTime": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "description": "Date and time when the approval was rejected"
          },
          "transfer.approvalRejectedByUser": {
            "type": "string",
            "description": "Username of the person who rejected the approval",
            "example": "Mike Smith"
          },
          "transfer.approvalRejectedFacilityLicenseNumber": {
            "type": "string",
            "nullable": true,
            "description": "License number of the facility where approval was rejected"
          },
          "transfer.approvalRejectReasonId": {
            "type": "string",
            "nullable": true,
            "description": "Reason ID for the approval rejection"
          },
          "transfer.tollingAgreementFileSystemId": {
            "type": "number",
            "example": 0
          },
          "transfer.invoiceNumber": {
            "type": "string",
            "example": ""
          },
          "transporter.dataModel": {
            "type": "string",
            "description": "Name of this object's data model",
            "example": "MetrcPackage"
          },
          "transporter.retrievedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp of when this object was pulled from Metrc"
          },
          "transporter.licenseNumber": {
            "type": "string",
            "description": "License number used to access this object"
          },
          "transporter.transporterFacilityLicenseNumber": {
            "type": "string",
            "description": "The license number of the transporter's facility.",
            "example": "LIC-00001"
          },
          "transporter.transporterFacilityName": {
            "type": "string",
            "description": "The name of the transporter's facility.",
            "example": "Dank Dispensary LLC"
          },
          "transporter.transporterDirectionName": {
            "type": "string",
            "enum": [
              "Outbound"
            ],
            "description": "The direction of the transporter.",
            "example": "Outbound"
          },
          "transporter.transporterApprovalDate": {
            "type": "string",
            "format": "date-time",
            "description": "The date and time when the transporter was approved.",
            "example": "2024-07-26T13:00:00+00:00"
          },
          "transporter.transporterAutoApproval": {
            "type": "boolean",
            "description": "Indicates if the transporter was automatically approved.",
            "example": true
          },
          "transporter.driverName": {
            "type": "string",
            "description": "The name of the driver.",
            "example": "John Doe"
          },
          "transporter.driverOccupationalLicenseNumber": {
            "type": "string",
            "description": "The occupational license number of the driver.",
            "example": "DL123456789"
          },
          "transporter.driverVehicleLicenseNumber": {
            "type": "string",
            "description": "The vehicle license number of the driver.",
            "example": "ABC1234"
          },
          "transporter.driverLayoverLeg": {
            "type": "string",
            "nullable": true,
            "description": "Information about the driver's layover leg."
          },
          "transporter.vehicleMake": {
            "type": "string",
            "description": "The make of the vehicle.",
            "example": "Ford"
          },
          "transporter.vehicleModel": {
            "type": "string",
            "description": "The model of the vehicle.",
            "example": "F-150"
          },
          "transporter.vehicleLicensePlateNumber": {
            "type": "string",
            "description": "The license plate number of the vehicle.",
            "example": "XYZ7890"
          },
          "transporter.acceptedDateTime": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "description": "The date and time when the transporter was accepted.",
            "example": "2024-07-26T13:00:00-05:00"
          },
          "transporter.isLayover": {
            "type": "boolean",
            "description": "Indicates if the transport includes a layover.",
            "example": false
          },
          "transporter.estimatedDepartureDateTime": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "description": "The estimated date and time of departure.",
            "example": "2024-07-26T14:00:00+00:00"
          },
          "transporter.actualDepartureDateTime": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "description": "The actual date and time of departure."
          },
          "transporter.estimatedArrivalDateTime": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "description": "The estimated date and time of arrival.",
            "example": "2024-07-26T15:00:00+00:00"
          },
          "transporter.actualArrivalDateTime": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "description": "The actual date and time of arrival."
          },
          "transporterDetails.dataModel": {
            "type": "string",
            "description": "Name of this object's data model",
            "example": "MetrcPackage"
          },
          "transporterDetails.retrievedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp of when this object was pulled from Metrc"
          },
          "transporterDetails.licenseNumber": {
            "type": "string",
            "description": "License number used to access this object"
          },
          "transporterDetails.shipmentPlanId": {
            "type": "integer",
            "example": 12345,
            "description": "Unique identifier for the shipment plan."
          },
          "transporterDetails.shipmentDeliveryId": {
            "type": "integer",
            "example": 67890,
            "description": "Unique identifier for the shipment delivery."
          },
          "transporterDetails.transporterDirection": {
            "type": "string",
            "enum": [
              "Outbound"
            ],
            "example": "Outbound",
            "description": "Direction of the transporter."
          },
          "transporterDetails.transporterFacilityId": {
            "type": "integer",
            "example": 54321,
            "description": "Unique identifier for the transporter facility."
          },
          "transporterDetails.lineNumber": {
            "type": "integer",
            "example": 1,
            "description": "Line number in the shipment details."
          },
          "transporterDetails.driverName": {
            "type": "string",
            "example": "John Doe",
            "description": "Name of the driver."
          },
          "transporterDetails.driverOccupationalLicenseNumber": {
            "type": "string",
            "example": "AB1234567",
            "description": "Occupational license number of the driver."
          },
          "transporterDetails.driverVehicleLicenseNumber": {
            "type": "string",
            "example": "XYZ987654",
            "description": "Vehicle license number of the driver."
          },
          "transporterDetails.driverLayoverLeg": {
            "type": "string",
            "nullable": true,
            "example": "Leg1",
            "description": "Layover leg details for the driver, if applicable."
          },
          "transporterDetails.vehicleMake": {
            "type": "string",
            "example": "Ford",
            "description": "Make of the vehicle."
          },
          "transporterDetails.vehicleModel": {
            "type": "string",
            "example": "Transit",
            "description": "Model of the vehicle."
          },
          "transporterDetails.vehicleLicensePlateNumber": {
            "type": "string",
            "example": "XYZ-1234",
            "description": "License plate number of the vehicle."
          },
          "transporterDetails.actualDriverStartDateTime": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "example": "2024-07-26T08:30:00Z",
            "description": "Actual start date and time for the driver."
          },
          "transporterDetails.isVoided": {
            "type": "boolean",
            "example": false,
            "description": "Indicates if the record is voided."
          },
          "transporterDetails.receivedDateTime": {
            "type": "string",
            "format": "date-time",
            "example": "2024-07-25T18:47:20+00:00",
            "description": "The date and time when the shipment was received."
          },
          "transporterDetails.receivedDeliveryCount": {
            "type": "integer",
            "example": 1,
            "description": "The number of deliveries received."
          },
          "delivery.id": {
            "type": "number",
            "description": "The transfer delivery ID",
            "example": 12345
          },
          "delivery.dataModel": {
            "type": "string",
            "description": "Name of this object's data model",
            "example": "MetrcPackage"
          },
          "delivery.retrievedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp of when this object was pulled from Metrc"
          },
          "delivery.licenseNumber": {
            "type": "string",
            "description": "License number used to access this object"
          },
          "delivery.actualArrivalDateTime": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "description": "The actual arrival date and time."
          },
          "delivery.actualDepartureDateTime": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "description": "The actual departure date and time."
          },
          "delivery.actualReturnArrivalDateTime": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "description": "The actual return arrival date and time."
          },
          "delivery.actualReturnDepartureDateTime": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "description": "The actual return departure date and time."
          },
          "delivery.deliveryPackageCount": {
            "type": "integer",
            "format": "int32",
            "description": "The number of packages delivered.",
            "example": 5
          },
          "delivery.deliveryReceivedPackageCount": {
            "type": "integer",
            "format": "int32",
            "description": "The number of packages received.",
            "example": 4
          },
          "delivery.estimatedArrivalDateTime": {
            "type": "string",
            "format": "date-time",
            "description": "The estimated arrival date and time.",
            "example": "2024-07-25T15:30:00Z"
          },
          "delivery.estimatedDepartureDateTime": {
            "type": "string",
            "format": "date-time",
            "description": "The estimated departure date and time.",
            "example": "2024-07-25T13:30:00Z"
          },
          "delivery.estimatedReturnArrivalDateTime": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "description": "The estimated return arrival date and time."
          },
          "delivery.estimatedReturnDepartureDateTime": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "description": "The estimated return departure date and time."
          },
          "delivery.grossUnitOfWeightAbbreviation": {
            "type": "string",
            "nullable": true,
            "description": "The abbreviation for the unit of gross weight.",
            "example": "kg"
          },
          "delivery.grossUnitOfWeightId": {
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "description": "The ID for the unit of gross weight.",
            "example": 1
          },
          "delivery.grossWeight": {
            "type": "number",
            "format": "float",
            "nullable": true,
            "description": "The gross weight.",
            "example": 100.5
          },
          "delivery.plannedRoute": {
            "type": "string",
            "description": "The planned route for the transfer.",
            "example": "Route A"
          },
          "delivery.receivedByName": {
            "type": "string",
            "nullable": true,
            "description": "The name of the person who received the shipment."
          },
          "delivery.receivedDateTime": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "description": "The date and time when the shipment was received."
          },
          "delivery.recipientFacilityId": {
            "type": "integer",
            "format": "int32",
            "description": "The ID of the recipient facility.",
            "example": 456
          },
          "delivery.recipientFacilityLicenseNumber": {
            "type": "string",
            "description": "The license number of the recipient facility.",
            "example": "AB12345"
          },
          "delivery.recipientFacilityName": {
            "type": "string",
            "description": "The name of the recipient facility.",
            "example": "Facility A"
          },
          "delivery.rejectedPackagesReturned": {
            "type": "boolean",
            "description": "Indicates whether rejected packages were returned.",
            "example": false
          },
          "delivery.shipmentTransactionTypeName": {
            "type": "string",
            "description": "The name of the shipment transaction type.",
            "example": "Regular"
          },
          "delivery.shipmentTypeName": {
            "type": "string",
            "description": "The name of the shipment type.",
            "example": "Transfer",
            "enum": [
              "Transfer"
            ]
          },
          "delivery.recipientApprovalDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "description": "The date and time when the recipient approved the shipment upon receipt."
          },
          "delivery.recipientAutoApproval": {
            "type": "boolean",
            "description": "Indicates whether the recipient's approval of the shipment is automatically granted, typically when there are no issues with the received packages.",
            "example": false
          },
          "delivery.tollingAgreementFileSystemId": {
            "type": "number",
            "example": 0
          },
          "delivery.invoiceNumber": {
            "type": "string",
            "example": ""
          },
          "package.id": {
            "type": "integer",
            "description": "Unique identifier for the item",
            "example": 1234567,
            "nullable": false
          },
          "package.dataModel": {
            "type": "string",
            "description": "Name of this object's data model",
            "example": "MetrcPackage"
          },
          "package.retrievedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp of when this object was pulled from Metrc"
          },
          "package.licenseNumber": {
            "type": "string",
            "description": "License number used to access this object"
          },
          "package.index": {
            "type": "string",
            "description": "Describes the current state of this object at the time it was returned from the API. This cannot be used to sort or filter.",
            "example": "TRANSFERRED_PACKAGE",
            "enum": [
              "TRANSFERRED_PACKAGE"
            ]
          },
          "package.packageId": {
            "type": "integer",
            "description": "Identifier for the package",
            "example": 9876543,
            "nullable": false
          },
          "package.recipientFacilityLicenseNumber": {
            "type": "string",
            "description": "License number of the recipient facility",
            "example": "LIC-00001",
            "nullable": false
          },
          "package.recipientFacilityName": {
            "type": "string",
            "description": "Name of the recipient facility",
            "example": "Dank Dispensary LLC",
            "nullable": false
          },
          "package.manifestNumber": {
            "type": "string",
            "description": "Manifest number associated with the shipment",
            "example": "0001234567",
            "nullable": false
          },
          "package.packageLabel": {
            "type": "string",
            "description": "Label of the package",
            "example": "1A4000000000000000006310",
            "nullable": false
          },
          "package.sourceHarvestNames": {
            "type": "string",
            "description": "Names of the source harvests",
            "example": "Sunset Sherbet",
            "nullable": true
          },
          "package.sourcePackageLabels": {
            "type": "string",
            "description": "Labels of the source packages",
            "example": "1A4000000000000000005267",
            "nullable": true
          },
          "package.productName": {
            "type": "string",
            "description": "Name of the product",
            "example": "Sunset Sherbet | 3.5g",
            "nullable": false
          },
          "package.productCategoryName": {
            "type": "string",
            "description": "Category name of the product",
            "example": "Bud/Flower (Final Packaging)",
            "nullable": false
          },
          "package.itemStrainName": {
            "type": "string",
            "description": "Strain name of the item",
            "example": "Sunset Sherbet",
            "nullable": false
          },
          "package.labTestingStateName": {
            "type": "string",
            "description": "Lab testing status of the item",
            "example": "TestPassed",
            "enum": [
              "TestPassed",
              "TestFailed",
              "Pending"
            ],
            "nullable": false
          },
          "package.shippedQuantity": {
            "type": "number",
            "description": "Quantity shipped",
            "format": "double",
            "example": 1224.0,
            "nullable": false
          },
          "package.shippedUnitOfMeasureAbbreviation": {
            "type": "string",
            "description": "Unit of measure for the shipped quantity",
            "example": "g",
            "nullable": false
          },
          "package.grossWeight": {
            "type": "number",
            "description": "Gross weight of the package",
            "format": "double",
            "example": 224.0,
            "nullable": false
          },
          "package.grossUnitOfWeightAbbreviation": {
            "type": "string",
            "description": "Unit of measure for the gross weight",
            "example": "g",
            "nullable": false
          },
          "package.shipperWholesalePrice": {
            "type": "number",
            "description": "Wholesale price from the shipper",
            "format": "double",
            "nullable": true
          },
          "package.receivedQuantity": {
            "type": "number",
            "description": "Quantity received",
            "format": "double",
            "example": 1224.0,
            "nullable": false
          },
          "package.receivedUnitOfMeasureAbbreviation": {
            "type": "string",
            "description": "Unit of measure for the received quantity",
            "example": "g",
            "nullable": false
          },
          "package.receiverWholesalePrice": {
            "type": "number",
            "description": "Wholesale price to the receiver",
            "format": "double",
            "nullable": true
          },
          "package.shipmentPackageStateName": {
            "type": "string",
            "description": "State of the shipment package",
            "example": "Accepted",
            "enum": [
              "Accepted",
              "Rejected",
              "Pending"
            ],
            "nullable": false
          },
          "package.actualDepartureDateTime": {
            "type": "string",
            "description": "Actual departure date and time",
            "format": "date-time",
            "nullable": true
          },
          "package.receivedDateTime": {
            "type": "string",
            "description": "Date and time when the package was received",
            "format": "date-time",
            "example": "2024-07-26T00:00:00-05:00",
            "nullable": false
          },
          "package.processingJobTypeName": {
            "type": "string",
            "nullable": true
          }
        },
        "required": [
          "package.grossUnitOfWeightAbbreviation",
          "package.grossWeight",
          "package.id",
          "package.itemStrainName",
          "package.labTestingStateName",
          "package.manifestNumber",
          "package.packageId",
          "package.packageLabel",
          "package.productCategoryName",
          "package.productName",
          "package.receivedDateTime",
          "package.receivedQuantity",
          "package.receivedUnitOfMeasureAbbreviation",
          "package.recipientFacilityLicenseNumber",
          "package.recipientFacilityName",
          "package.shipmentPackageStateName",
          "package.shippedQuantity",
          "package.shippedUnitOfMeasureAbbreviation"
        ]
      },
      "T3LabelContentData": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "text1": {
            "type": "string",
            "example": "text1"
          },
          "text2": {
            "type": "string",
            "example": "text2"
          },
          "text3": {
            "type": "string",
            "example": "text3"
          },
          "text4": {
            "type": "string",
            "example": "text4"
          },
          "text5": {
            "type": "string",
            "example": "text5"
          },
          "text6": {
            "type": "string",
            "example": "text6"
          },
          "text7": {
            "type": "string",
            "example": "text7"
          },
          "text8": {
            "type": "string",
            "example": "text8"
          }
        }
      },
      "T3LabelContentDataListResponse": {
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/T3LabelContentData"
            }
          }
        }
      },
      "T3LabelContentLayoutElementType": {
        "type": "string",
        "enum": [
          "TEXT",
          "CODE128_BARCODE",
          "CODE39_BARCODE",
          "QR_CODE",
          "IMAGE",
          "BOX",
          "TABLE"
        ]
      },
      "T3LabelContentLayoutElementTextResizeStrategy": {
        "type": "string",
        "enum": [
          "ALLOW_OVERFLOW",
          "TRUNCATE_TEXT",
          "SHRINK_TEXT"
        ]
      },
      "T3LabelContentLayoutConfig": {
        "type": "object",
        "description": "Data describing how each label will be laid out, including a list of pieces and how they are arranged.",
        "properties": {
          "enabled": {
            "type": "boolean"
          },
          "visible": {
            "type": "boolean"
          },
          "requires_t3plus": {
            "type": "boolean"
          },
          "description": {
            "type": "string"
          },
          "aspect_ratio": {
            "type": "number",
            "format": "float"
          },
          "min_aspect_ratio": {
            "type": "number",
            "format": "float"
          },
          "max_aspect_ratio": {
            "type": "number",
            "format": "float"
          },
          "label_content_layout_elements": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/T3LabelContentLayoutElement"
            }
          },
          "label_content_data_json_schema": {
            "type": "object",
            "nullable": true
          }
        }
      },
      "T3LabelContentLayoutElement": {
        "type": "object",
        "description": "Describes the bounding rectangle and styling of one piece of a label layout.",
        "properties": {
          "description": {
            "type": "string"
          },
          "element_type": {
            "$ref": "#/components/schemas/T3LabelContentLayoutElementType"
          },
          "x_start_fraction": {
            "description": "The left edge of the bounding box for this element, represented as a fraction of the total width of the content layout.",
            "type": "number",
            "format": "float",
            "default": 0
          },
          "x_end_fraction": {
            "description": "The right edge of the bounding box for this element, represented as a fraction of the total width of the content layout.",
            "type": "number",
            "format": "float",
            "default": 1
          },
          "y_start_fraction": {
            "description": "The bottom edge of the bounding box for this element, represented as a fraction of the total height of the content layout.",
            "type": "number",
            "format": "float",
            "default": 0
          },
          "y_end_fraction": {
            "type": "number",
            "format": "float",
            "default": 1
          },
          "label_content_data_key": {
            "type": "string",
            "enum": [
              "text1",
              "text2",
              "text3",
              "text4",
              "text5",
              "text6",
              "text7",
              "text8"
            ],
            "nullable": true
          },
          "value_template": {
            "type": "string",
            "nullable": true
          },
          "paragraph_font_name": {
            "type": "string",
            "enum": [
              "Times-Roman",
              "Times-Bold",
              "Times-Italic",
              "Times-BoldItalic",
              "Helvetica",
              "Helvetica-Bold",
              "Helvetica-Oblique",
              "Helvetica-BoldOblique",
              "Courier",
              "Courier-Bold",
              "Courier-Oblique",
              "Courier-BoldOblique",
              "Symbol",
              "ZapfDingbats"
            ],
            "default": "Helvetica"
          },
          "paragraph_font_size": {
            "type": "number",
            "format": "float",
            "default": 6
          },
          "horizontal_paragraph_alignment": {
            "type": "string",
            "enum": [
              "LEFT",
              "CENTER",
              "RIGHT"
            ],
            "default": "CENTER"
          },
          "vertical_paragraph_alignment": {
            "type": "string",
            "enum": [
              "TOP",
              "CENTER",
              "BOTTOM"
            ],
            "default": "CENTER"
          },
          "paragraph_spacing": {
            "type": "number",
            "format": "float",
            "default": 6
          },
          "enabled": {
            "type": "boolean",
            "default": true
          },
          "paragraph_text_resize_strategy": {
            "$ref": "#/components/schemas/T3LabelContentLayoutElementTextResizeStrategy"
          }
        }
      },
      "UnitOfMeasure": {
        "type": "object",
        "properties": {
          "abbreviation": {
            "type": "string",
            "example": "ml"
          },
          "fromBaseFactor": {
            "type": "number",
            "format": "double",
            "example": 29.5735295625
          },
          "id": {
            "type": "integer",
            "example": 10
          },
          "isArchived": {
            "type": "boolean",
            "example": false
          },
          "isBaseUnit": {
            "type": "boolean",
            "example": false
          },
          "name": {
            "type": "string",
            "example": "Milliliters"
          },
          "quantityType": {
            "type": "string",
            "example": "VolumeBased"
          },
          "toBaseFactor": {
            "type": "number",
            "format": "double",
            "example": 0.033814022701843
          }
        }
      },
      "LabTestingStates": {
        "type": "string",
        "example": "TestPassed",
        "enum": [
          "NotSubmitted",
          "SubmittedForTesting",
          "TestFailed",
          "TestPassed",
          "TestingInProgress",
          "AwaitingConfirmation",
          "RetestFailed",
          "RetestPassed",
          "Remediated",
          "SelectedForRandomTesting",
          "NotRequired",
          "ProcessValidated"
        ]
      },
      "MetrcLocation": {
        "type": "object",
        "properties": {
          "forHarvests": {
            "type": "boolean",
            "example": true
          },
          "forPackages": {
            "type": "boolean",
            "example": true
          },
          "forPlantBatches": {
            "type": "boolean",
            "example": true
          },
          "forPlants": {
            "type": "boolean",
            "example": true
          },
          "id": {
            "type": "integer",
            "example": 12345
          },
          "isArchived": {
            "type": "boolean",
            "example": false
          },
          "locationTypeId": {
            "type": "integer",
            "example": 1
          },
          "locationTypeName": {
            "type": "string",
            "example": "Default Location Type"
          },
          "name": {
            "type": "string",
            "example": "Row 01"
          }
        }
      },
      "MetrcRemediationMethod": {
        "properties": {
          "id": {
            "type": "number",
            "format": "int32",
            "description": "The unique identifier for the remediation method.",
            "example": 3
          },
          "name": {
            "type": "string",
            "description": "The name of the remediation method.",
            "example": "Repacking"
          }
        }
      },
      "MetrcLicense": {
        "properties": {
          "licenseName": {
            "type": "string",
            "description": "The facility name for this license",
            "example": "Stinky Farms"
          },
          "licenseNumber": {
            "type": "string",
            "description": "The license number",
            "example": "LIC-00001"
          }
        }
      },
      "MetrcState": {
        "properties": {
          "abbreviation": {
            "type": "string",
            "description": "The state abbreviation",
            "example": "CA"
          },
          "name": {
            "type": "string",
            "description": "The state name",
            "example": "California"
          },
          "hostname": {
            "type": "string",
            "description": "The Metrc hostname for this state",
            "example": "ca.metrc.com"
          }
        }
      },
      "MetrcTag": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "example": 12345
          },
          "hostname": {
            "type": "string",
            "description": "The hostname this object was retrieved from",
            "example": "ca.metrc.com"
          },
          "dataModel": {
            "type": "string",
            "description": "Name of this object's data model",
            "example": "MetrcPackage"
          },
          "retrievedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp of when this object was pulled from Metrc"
          },
          "licenseNumber": {
            "type": "string",
            "description": "License number used to access this object"
          },
          "index": {
            "type": "string",
            "description": "The current state of the tag, such as AVAILALBE.",
            "enum": [
              "AVAILABLE_TAG",
              "USED_TAG",
              "VOID_TAG"
            ],
            "example": "AVAILABLE_TAG"
          },
          "commissionedDateTime": {
            "type": "string",
            "format": "date-time",
            "example": "2022-01-19T07:00:00+00:00"
          },
          "detachedDateTime": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "facilityId": {
            "type": "integer",
            "example": 12345
          },
          "groupTagTypeId": {
            "type": "string",
            "example": "TagType-6"
          },
          "groupTagTypeName": {
            "type": "string",
            "example": "Medical Package"
          },
          "isArchived": {
            "type": "boolean",
            "example": false
          },
          "isUsed": {
            "type": "boolean",
            "example": false
          },
          "label": {
            "type": "string",
            "example": "1A4000000000000000000011"
          },
          "lastModified": {
            "type": "string",
            "format": "date-time",
            "example": "2023-08-29T01:00:00+00:00"
          },
          "maxGroupSize": {
            "type": "integer",
            "example": 1
          },
          "statusName": {
            "type": "string",
            "example": "Received"
          },
          "tagInventoryTypeName": {
            "type": "string",
            "example": "MedicalPackage"
          },
          "tagTypeId": {
            "type": "string",
            "example": "TagType-6"
          },
          "tagTypeName": {
            "type": "string",
            "example": "Medical Package"
          },
          "usedDateTime": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          }
        }
      },
      "MetrcItem": {
        "properties": {
          "id": {
            "type": "number",
            "description": "The item ID",
            "example": 12345
          },
          "hostname": {
            "type": "string",
            "description": "The hostname this object was retrieved from",
            "example": "ca.metrc.com"
          },
          "dataModel": {
            "type": "string",
            "description": "Name of this object's data model",
            "example": "MetrcPackage"
          },
          "retrievedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp of when this object was pulled from Metrc"
          },
          "licenseNumber": {
            "type": "string",
            "description": "License number used to access this object"
          },
          "index": {
            "type": "string",
            "description": "Describes the current state of this object at the time it was returned from the API. This cannot be used to sort or filter.",
            "example": "ACTIVE_ITEM",
            "enum": [
              "ACTIVE_ITEM"
            ]
          },
          "facilityLicenseNumber": {
            "type": "string",
            "description": "The facility license number",
            "example": "123-456789",
            "nullable": true
          },
          "facilityName": {
            "type": "string",
            "description": "The facility name",
            "example": "Green Growers",
            "nullable": true
          },
          "name": {
            "type": "string",
            "description": "The item name",
            "example": "Wedding Cake flower"
          },
          "productCategoryId": {
            "type": "number",
            "description": "The product category ID",
            "example": 401
          },
          "productCategoryName": {
            "type": "string",
            "description": "The product category name",
            "example": "Bud/Flower (Final Packaging)"
          },
          "productCategoryTypeName": {
            "type": "string",
            "description": "The product category type name",
            "example": "Cannabis"
          },
          "expirationDateConfiguration": {
            "type": "string",
            "enum": [
              "Off",
              "Optional"
            ],
            "description": "The expiration date configuration",
            "example": "Off"
          },
          "expirationConfigurationState": {
            "type": "string",
            "enum": [
              "Off"
            ],
            "description": "The expiration configuration state",
            "example": "Off"
          },
          "expirationDateDaysInAdvance": {
            "type": "number",
            "description": "The number of days in advance for the expiration date",
            "nullable": true
          },
          "sellByDateConfiguration": {
            "type": "string",
            "enum": [
              "Off",
              "Optional"
            ],
            "description": "The sell by date configuration",
            "example": "Off"
          },
          "sellByConfigurationState": {
            "type": "string",
            "enum": [
              "Off"
            ],
            "description": "The sell by configuration state",
            "example": "Off"
          },
          "sellByDateDaysInAdvance": {
            "type": "number",
            "description": "The number of days in advance for the sell by date",
            "nullable": true
          },
          "useByDateConfiguration": {
            "type": "string",
            "enum": [
              "Off",
              "Optional"
            ],
            "description": "The use by date configuration",
            "example": "Off"
          },
          "useByConfigurationState": {
            "type": "string",
            "enum": [
              "Off"
            ],
            "description": "The use by configuration state",
            "example": "Off"
          },
          "useByDateDaysInAdvance": {
            "type": "number",
            "description": "The number of days in advance for the use by date",
            "nullable": true
          },
          "quantityTypeName": {
            "type": "string",
            "enum": [
              "WeightBased",
              "CountBased",
              "VolumeBased"
            ],
            "description": "The quantity type name",
            "example": "WeightBased"
          },
          "defaultLabTestingStateName": {
            "type": "string",
            "enum": [
              "NotRequired",
              "NotSubmitted"
            ],
            "description": "The default lab testing state name",
            "example": "NotSubmitted"
          },
          "unitOfMeasureId": {
            "type": "number",
            "description": "The unit of measure ID",
            "example": 4
          },
          "unitOfMeasureName": {
            "type": "string",
            "description": "The unit of measure name",
            "example": "Grams"
          },
          "approvalStatusName": {
            "type": "string",
            "enum": [
              "Approved"
            ],
            "description": "The approval status name",
            "example": "Approved"
          },
          "approvalStatusDateTime": {
            "type": "string",
            "format": "date-time",
            "description": "The date and time of approval status",
            "example": "2023-08-17T22:20:30+00:00"
          },
          "strainName": {
            "type": "string",
            "description": "The strain name",
            "example": "2090 Shit",
            "nullable": true
          },
          "itemBrandId": {
            "type": "number",
            "description": "The item brand ID",
            "example": 0
          },
          "itemBrandName": {
            "type": "string",
            "description": "The item brand name",
            "example": "BrandName",
            "nullable": true
          },
          "administrationMethod": {
            "type": "string",
            "description": "The method of administration",
            "example": "N/A"
          },
          "unitCbdPercent": {
            "type": "number",
            "description": "The unit CBD percentage",
            "nullable": true
          },
          "unitCbdContentDose": {
            "type": "number",
            "description": "The unit CBD content dose",
            "nullable": true
          },
          "unitCbdContentDoseUnitOfMeasureAbbreviation": {
            "type": "string",
            "description": "The unit CBD content dose unit of measure abbreviation",
            "nullable": true
          },
          "unitThcPercent": {
            "type": "number",
            "description": "The unit THC percentage",
            "nullable": true
          },
          "unitThcContentUnitOfMeasureId": {
            "type": "number",
            "description": "The unit THC content unit of measure ID",
            "nullable": true
          },
          "unitThcContentDoseUnitOfMeasureAbbreviation": {
            "type": "string",
            "description": "The unit THC content dose unit of measure abbreviation",
            "nullable": true
          },
          "unitWeight": {
            "type": "number",
            "description": "The unit weight",
            "nullable": true
          },
          "servingSize": {
            "type": "string",
            "description": "The serving size",
            "example": "1g"
          },
          "numberOfDoses": {
            "type": "number",
            "description": "The number of doses",
            "example": 28,
            "nullable": true
          },
          "unitQuantity": {
            "type": "number",
            "description": "The unit quantity",
            "nullable": true
          },
          "unitQuantityUnitOfMeasureAbbreviation": {
            "type": "string",
            "description": "The unit quantity unit of measure abbreviation",
            "nullable": true
          },
          "publicIngredients": {
            "type": "string",
            "description": "The public ingredients",
            "example": "Cannabis Flower"
          },
          "description": {
            "type": "string",
            "description": "The item description",
            "example": ""
          },
          "allergens": {
            "type": "string",
            "description": "The allergens present in the item",
            "example": ""
          },
          "productImages": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "A list of product images"
          },
          "productPhotoDescription": {
            "type": "string",
            "description": "Description of the product photo",
            "example": ""
          },
          "labelImages": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "A list of label images"
          },
          "labelPhotoDescription": {
            "type": "string",
            "description": "Description of the label photo",
            "example": ""
          },
          "packagingImages": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "A list of packaging images"
          },
          "packagingPhotoDescription": {
            "type": "string",
            "description": "Description of the packaging photo",
            "example": ""
          },
          "productPDFDocuments": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "A list of product PDF documents"
          },
          "isUsed": {
            "type": "boolean",
            "description": "Indicates if the item is used",
            "example": false
          },
          "isArchived": {
            "type": "boolean",
            "description": "Indicates if the item is archived",
            "example": false
          },
          "lastModified": {
            "type": "string",
            "format": "date-time",
            "description": "The last modified date and time",
            "nullable": true
          },
          "processingJobCategoryId": {
            "type": "number",
            "description": "The processing job category ID",
            "nullable": true
          },
          "processingJobCategoryName": {
            "type": "string",
            "description": "The processing job category name",
            "nullable": true
          },
          "supplyDurationDays": {
            "type": "number",
            "description": "The supply duration in days",
            "nullable": true
          },
          "unitCbdPercentOverride": {
            "type": "number",
            "description": "Override value for the unit CBD percentage",
            "nullable": true
          },
          "unitCbdContent": {
            "type": "number",
            "description": "The unit CBD content",
            "nullable": true
          },
          "unitCbdContentOverride": {
            "type": "number",
            "description": "Override value for the unit CBD content",
            "nullable": true
          },
          "unitCbdContentDoseUoMId": {
            "type": "number",
            "description": "The unit CBD content dose UoM ID",
            "nullable": true
          },
          "unitCbdContentUnitOfMeasureAbbreviation": {
            "type": "string",
            "description": "The unit CBD content unit of measure abbreviation",
            "nullable": true
          },
          "unitCbdContentUnitOfMeasureId": {
            "type": "number",
            "description": "The unit CBD content unit of measure ID",
            "nullable": true
          },
          "unitCbdContentUoMId": {
            "type": "number",
            "description": "The unit CBD content UoM ID",
            "nullable": true
          },
          "unitThcContent": {
            "type": "number",
            "description": "The unit THC content",
            "nullable": true
          },
          "unitThcContentOverride": {
            "type": "number",
            "description": "Override value for the unit THC content",
            "nullable": true
          },
          "unitThcContentDose": {
            "type": "number",
            "description": "The unit THC content dose",
            "nullable": true
          },
          "unitThcContentDoseUnitOfMeasureId": {
            "type": "number",
            "description": "The unit THC content dose unit of measure ID",
            "nullable": true
          },
          "unitThcContentDoseUoMId": {
            "type": "number",
            "description": "The unit THC content dose UoM ID",
            "nullable": true
          },
          "unitThcContentUnitOfMeasureAbbreviation": {
            "type": "string",
            "description": "The unit THC content unit of measure abbreviation",
            "nullable": true
          },
          "unitThcContentUoMId": {
            "type": "number",
            "description": "The unit THC content UoM ID",
            "nullable": true
          },
          "unitWeightUnitOfMeasureAbbreviation": {
            "type": "string",
            "description": "The unit weight unit of measure abbreviation",
            "nullable": true
          },
          "unitWeightUnitOfMeasureId": {
            "type": "number",
            "description": "The unit weight unit of measure ID",
            "nullable": true
          },
          "unitWeightUoMId": {
            "type": "number",
            "description": "The unit weight UoM ID",
            "nullable": true
          },
          "unitVolume": {
            "type": "number",
            "description": "The unit volume",
            "nullable": true
          },
          "unitVolumeUnitOfMeasureAbbreviation": {
            "type": "string",
            "description": "The unit volume unit of measure abbreviation",
            "nullable": true
          },
          "unitVolumeUnitOfMeasureId": {
            "type": "number",
            "description": "The unit volume unit of measure ID",
            "nullable": true
          },
          "unitVolumeUoMId": {
            "type": "number",
            "description": "The unit volume UoM ID",
            "nullable": true
          },
          "publicIngredientsOverride": {
            "type": "string",
            "description": "Override value for the public ingredients",
            "nullable": true
          },
          "allergensOverride": {
            "type": "string",
            "description": "Override value for the allergens present in the item",
            "nullable": true
          },
          "descriptionOverride": {
            "type": "string",
            "description": "Override value for the item description",
            "nullable": true
          },
          "globalProductName": {
            "type": "string",
            "description": "The global product name",
            "nullable": true
          },
          "productBrandName": {
            "type": "string",
            "description": "The product brand name",
            "nullable": true
          },
          "administrationMethodOverride": {
            "type": "string",
            "description": "Override value for the method of administration",
            "nullable": true
          },
          "unitCbdContentDoseUnitOfMeasureId": {
            "type": "number",
            "description": "The unit CBD content dose unit of measure ID",
            "nullable": true
          },
          "strainId": {
            "type": "number",
            "description": "The strain ID",
            "example": 1234567
          },
          "productCategoryRequiresApproval": {
            "type": "boolean",
            "description": "Indicates if the item's product category requires approval",
            "example": false
          },
          "packagingPhotoDescriptionOverride": {
            "type": "string",
            "nullable": true
          },
          "packagingPhotoOverride": {
            "type": "string",
            "nullable": true
          },
          "labelPhotoDescriptionOverride": {
            "type": "string",
            "nullable": true
          },
          "productPhotoDescriptionOverride": {
            "type": "string",
            "nullable": true
          },
          "brandName": {
            "type": "string",
            "nullable": true
          },
          "productPhotoOverride": {
            "type": "string",
            "nullable": true
          },
          "globalProductId": {
            "type": "number",
            "nullable": true
          },
          "labelPhotoOverride": {
            "type": "string",
            "nullable": true
          },
          "processingJobTypeId": {
            "type": "string",
            "nullable": true
          },
          "processingJobTypeName": {
            "type": "string",
            "nullable": true
          },
          "unitThcPercentOverride": {
            "type": "number",
            "nullable": true
          }
        }
      },
      "MetrcItemListResponse": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/Pagination"
          },
          {
            "type": "object",
            "properties": {
              "data": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/MetrcItem"
                }
              }
            }
          }
        ]
      },
      "UnitOfMeasureAbbreviation": {
        "type": "string",
        "example": "g",
        "enum": [
          "g",
          "mg",
          "kg",
          "oz",
          "lb",
          "ml",
          "l",
          "ea"
        ]
      },
      "MetrcPackage": {
        "properties": {
          "id": {
            "type": "integer",
            "description": "The unique identifier for the package.",
            "example": 1234567
          },
          "hostname": {
            "type": "string",
            "description": "The hostname this object was retrieved from",
            "example": "ca.metrc.com"
          },
          "dataModel": {
            "type": "string",
            "description": "Name of this object's data model",
            "example": "MetrcPackage"
          },
          "retrievedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp of when this object was pulled from Metrc"
          },
          "licenseNumber": {
            "type": "string",
            "description": "License number used to access this object"
          },
          "index": {
            "type": "string",
            "description": "The current state of the package, such as ACTIVE, ONHOLD, INACTIVE, or INTRANSIT.",
            "enum": [
              "ACTIVE_PACKAGE",
              "ONHOLD_PACKAGE",
              "INACTIVE_PACKAGE",
              "INTRANSIT_PACKAGE"
            ],
            "example": "ACTIVE_PACKAGE"
          },
          "archivedDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "description": "The date and time when the package was archived, if applicable."
          },
          "containsRemediatedProduct": {
            "type": "boolean",
            "description": "Indicates if the package contains remediated product.",
            "example": false
          },
          "donationFacilityLicenseNumber": {
            "type": "string",
            "nullable": true,
            "description": "The license number of the facility where the donation occurred, if applicable."
          },
          "donationFacilityName": {
            "type": "string",
            "nullable": true,
            "description": "The name of the facility where the donation occurred, if applicable."
          },
          "facilityLicenseNumber": {
            "type": "string",
            "nullable": true,
            "description": "The license number of the facility associated with the package."
          },
          "facilityName": {
            "type": "string",
            "nullable": true,
            "description": "The name of the facility associated with the package."
          },
          "finishedDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "description": "The date and time when the package was finished, if applicable."
          },
          "initialLabTestingState": {
            "type": "string",
            "description": "The initial state of lab testing for the package, such as NotRequired, TestPassed, or NotSubmitted.",
            "enum": [
              "NotRequired",
              "TestPassed",
              "NotSubmitted"
            ],
            "example": "NotRequired"
          },
          "isArchived": {
            "type": "boolean",
            "description": "Indicates if the package is archived.",
            "example": false
          },
          "isDonation": {
            "type": "boolean",
            "description": "Indicates if the package was a donation.",
            "example": false
          },
          "isDonationPersistent": {
            "type": "boolean",
            "description": "Indicates if the donation status of the package is persistent.",
            "example": false
          },
          "isFinished": {
            "type": "boolean",
            "description": "Indicates if the package is marked as finished.",
            "example": false
          },
          "isInTransit": {
            "type": "boolean",
            "description": "Indicates if the package is currently in transit.",
            "example": false
          },
          "isOnHold": {
            "type": "boolean",
            "description": "Indicates if the package is on hold.",
            "example": false
          },
          "isProcessValidationTestingSample": {
            "type": "boolean",
            "description": "Indicates if the package is a sample for process validation testing.",
            "example": false
          },
          "isProductionBatch": {
            "type": "boolean",
            "description": "Indicates if the package is part of a production batch.",
            "example": false
          },
          "isTestingSample": {
            "type": "boolean",
            "description": "Indicates if the package is a testing sample.",
            "example": false
          },
          "isTradeSample": {
            "type": "boolean",
            "description": "Indicates if the package is a trade sample.",
            "example": false
          },
          "isTradeSamplePersistent": {
            "type": "boolean",
            "description": "Indicates if the trade sample status of the package is persistent.",
            "example": false
          },
          "item": {
            "$ref": "#/components/schemas/MetrcItem",
            "description": "Details of the item associated with the package."
          },
          "itemFromFacilityLicenseNumber": {
            "type": "string",
            "description": "The license number of the facility from which the item originated.",
            "example": "LIC-00001"
          },
          "itemFromFacilityName": {
            "type": "string",
            "description": "The name of the facility from which the item originated.",
            "example": "Dank Dispensary LLC"
          },
          "labTestingStateDate": {
            "type": "string",
            "format": "date-time",
            "description": "The date when the lab testing state was last updated.",
            "example": "2024-07-24"
          },
          "labTestingStateName": {
            "type": "string",
            "description": "The current state of lab testing for the package.",
            "example": "TestPassed"
          },
          "labTestingRecordedDate": {
            "type": "string",
            "format": "date-time",
            "description": "The date and time when the lab testing results were recorded.",
            "example": "2024-07-24T19:00:00+00:00"
          },
          "labTestingPerformedDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "description": "The date and time when the lab testing was performed."
          },
          "labTestStageId": {
            "type": "integer",
            "nullable": true,
            "description": "The identifier for the stage of the lab test, if applicable."
          },
          "labTestResultExpirationDateTime": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "description": "The expiration date and time of the lab test result, if applicable."
          },
          "label": {
            "type": "string",
            "description": "The label identifier for the package.",
            "example": "1A4000000000000000020198"
          },
          "lastModified": {
            "type": "string",
            "format": "date-time",
            "description": "The date and time when the package details were last modified.",
            "example": "2024-07-24T19:00:00+00:00"
          },
          "locationName": {
            "type": "string",
            "nullable": true,
            "description": "The name of the location where the package is stored.",
            "example": "Packaging Room"
          },
          "locationTypeName": {
            "type": "string",
            "nullable": true,
            "description": "The type of location where the package is stored.",
            "example": "Default Location Type"
          },
          "multiHarvest": {
            "type": "boolean",
            "description": "Indicates if the package contains material from multiple harvests.",
            "example": false
          },
          "multiPackage": {
            "type": "boolean",
            "description": "Indicates if the package is part of multiple packages.",
            "example": false
          },
          "multiProductionBatch": {
            "type": "boolean",
            "description": "Indicates if the package is part of multiple production batches.",
            "example": false
          },
          "note": {
            "type": "string",
            "description": "Additional notes or comments about the package.",
            "example": ""
          },
          "packageType": {
            "type": "string",
            "description": "The type of package, such as ImmaturePlant or Product.",
            "enum": [
              "ImmaturePlant",
              "Product"
            ],
            "example": "Product"
          },
          "packagedByFacilityLicenseNumber": {
            "type": "string",
            "description": "The license number of the facility where the package was created.",
            "example": "LIC-00001"
          },
          "packagedByFacilityName": {
            "type": "string",
            "description": "The name of the facility where the package was created.",
            "example": "Dank Dispensary LLC"
          },
          "packagedDate": {
            "type": "string",
            "format": "date-time",
            "description": "The date when the package was created.",
            "example": "2024-07-24"
          },
          "patientLicenseNumber": {
            "type": "string",
            "description": "The license number of the patient, if applicable.",
            "example": ""
          },
          "productRequiresRemediation": {
            "type": "boolean",
            "description": "Indicates if the product in the package requires remediation.",
            "example": false
          },
          "productionBatchNumber": {
            "type": "string",
            "description": "The number of the production batch associated with the package.",
            "example": "PB00001"
          },
          "quantity": {
            "type": "number",
            "description": "The quantity of the product in the package.",
            "example": 1130.7
          },
          "receivedDateTime": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "description": "The date and time when the package was received, if applicable."
          },
          "receivedFromFacilityLicenseNumber": {
            "type": "string",
            "nullable": true,
            "description": "The license number of the facility from which the package was received, if applicable."
          },
          "receivedFromFacilityName": {
            "type": "string",
            "nullable": true,
            "description": "The name of the facility from which the package was received, if applicable."
          },
          "receivedFromManifestNumber": {
            "type": "string",
            "nullable": true,
            "description": "The manifest number associated with the received package, if applicable."
          },
          "remediationDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "description": "The date when the product in the package was remediated, if applicable."
          },
          "sourceHarvestNames": {
            "type": "string",
            "description": "The names of the harvests from which the package was created.",
            "example": "WCAKE0001"
          },
          "sourcePackageIsDonation": {
            "type": "boolean",
            "description": "Indicates if the source package was a donation.",
            "example": false
          },
          "sourcePackageIsTradeSample": {
            "type": "boolean",
            "description": "Indicates if the source package was a trade sample.",
            "example": false
          },
          "sourcePackageLabels": {
            "type": "string",
            "description": "The labels of the source packages used to create the current package.",
            "example": "1A4000000000000000025000"
          },
          "sourceProductionBatchNumbers": {
            "type": "string",
            "description": "The numbers of the production batches from which the package was created.",
            "example": "WCAKE00003"
          },
          "tradeSampleFacilityName": {
            "type": "string",
            "nullable": true,
            "description": "The name of the facility where the trade sample was created, if applicable."
          },
          "tradeSampleFacilityLicenseNumber": {
            "type": "string",
            "nullable": true,
            "description": "The license number of the facility where the trade sample was created, if applicable."
          },
          "transferManifestNumber": {
            "type": "string",
            "description": "The manifest number associated with the transfer of the package.",
            "example": ""
          },
          "unitOfMeasureAbbreviation": {
            "$ref": "#/components/schemas/UnitOfMeasureAbbreviation",
            "description": "The abbreviation for the unit of measure used for the package quantity.",
            "example": "g"
          },
          "unitOfMeasureId": {
            "type": "number",
            "description": "The ID of the unit of measure used for the package quantity.",
            "example": 4
          },
          "unitOfMeasureQuantityType": {
            "type": "string",
            "description": "The type of quantity measurement used, such as WeightBased, CountBased, or VolumeBased.",
            "enum": [
              "WeightBased",
              "CountBased",
              "VolumeBased"
            ],
            "example": "WeightBased"
          },
          "sourceHarvestCount": {
            "type": "number",
            "description": "The number of harvests from which the package was created.",
            "example": 1
          },
          "sourcePackageCount": {
            "type": "number",
            "description": "The number of source packages used to create the current package.",
            "example": 1
          },
          "sourceProcessingJobCount": {
            "type": "number",
            "description": "The number of processing jobs involved in creating the package.",
            "example": 0
          },
          "sourceProcessingJobNumbers": {
            "type": "string",
            "description": "The numbers of the processing jobs involved in creating the package.",
            "example": ""
          },
          "sourceProcessingJobNames": {
            "type": "string",
            "description": "The names of the processing jobs involved in creating the package.",
            "example": ""
          },
          "multiProcessingJob": {
            "type": "boolean",
            "description": "Indicates if multiple processing jobs were involved in creating the package.",
            "example": false
          },
          "expirationDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "description": "The expiration date of the product in the package, if applicable."
          },
          "sellByDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "description": "The sell-by date of the product in the package, if applicable."
          },
          "useByDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "description": "The use-by date of the product in the package, if applicable."
          },
          "labTestResultDocumentFileId": {
            "type": "number",
            "nullable": true,
            "description": "The file ID of the lab test result document, if available."
          },
          "isOnTrip": {
            "type": "boolean",
            "description": "Indicates if the package is part of an ongoing trip.",
            "example": false
          },
          "isOnRetailerDelivery": {
            "type": "boolean",
            "description": "Indicates if the package is on a retailer delivery.",
            "example": false
          },
          "packageForProductDestruction": {
            "type": "boolean",
            "nullable": true,
            "description": "Indicates if the package is intended for product destruction."
          },
          "trip": {
            "type": "string",
            "nullable": true,
            "description": "Information about the trip associated with the package, if applicable."
          },
          "hasPartial": {
            "type": "boolean",
            "description": "Indicates if the package has partial status.",
            "example": false
          },
          "isPartial": {
            "type": "boolean",
            "description": "Indicates if the package is a partial package.",
            "example": false
          },
          "inTransitStatus": {
            "type": "string",
            "description": "The current transit status of the package.",
            "example": "None"
          },
          "processingJobTypeId": {
            "type": "integer",
            "nullable": true,
            "description": "The identifier for the type of processing job, if applicable."
          },
          "isOnRecall": {
            "type": "boolean",
            "example": false
          },
          "decontaminationDate": {
            "type": "string",
            "nullable": true
          },
          "containsDecontaminatedProduct": {
            "type": "boolean",
            "example": false
          },
          "productRequiresDecontamination": {
            "type": "boolean",
            "example": false
          },
          "productLabel": {
            "type": "string",
            "nullable": true
          },
          "labTestStage": {
            "type": "string",
            "nullable": true
          },
          "externalId": {
            "type": "number",
            "nullable": true
          }
        }
      },
      "MetrcSuperpackage": {
        "allOf": [
          {
            "$ref": "#/components/schemas/MetrcPackage"
          },
          {
            "type": "object",
            "properties": {
              "metadata": {
                "type": "object",
                "properties": {
                  "initialQuantity": {
                    "type": "number",
                    "format": "float",
                    "description": "The quantity this package was initially created with"
                  },
                  "testResults": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "labResultTestName": {
                          "type": "string",
                          "example": "Delta-9 THC"
                        },
                        "labResultTestValue": {
                          "type": "number",
                          "format": "float",
                          "example": 0.123
                        },
                        "labResultTestUnit": {
                          "type": "string",
                          "example": "%"
                        },
                        "labResultBatchName": {
                          "type": "string",
                          "example": "Mandatory Terpenes"
                        },
                        "fullLabResultTestName": {
                          "type": "string",
                          "example": "Delta-9 THC (%) Mandatory Terpenes"
                        },
                        "passed": {
                          "type": "boolean",
                          "example": true
                        },
                        "tags": {
                          "type": "array",
                          "items": {
                            "type": "string",
                            "example": "terpene"
                          }
                        }
                      }
                    }
                  }
                }
              },
              "sourceHarvests": {
                "type": "array",
                "description": "A list of this package's source harvests",
                "items": {
                  "$ref": "#/components/schemas/MetrcPackageSourceHarvest"
                }
              },
              "labResultBatches": {
                "type": "array",
                "description": "A list of this package's lab result batches",
                "items": {
                  "$ref": "#/components/schemas/MetrcPackageLabResultBatch"
                }
              },
              "history": {
                "type": "array",
                "description": "A list of this package's history",
                "items": {
                  "$ref": "#/components/schemas/MetrcHistory"
                }
              }
            }
          }
        ]
      },
      "MetrcPackageListResponse": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/Pagination"
          },
          {
            "type": "object",
            "properties": {
              "data": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/MetrcSuperpackage"
                }
              }
            }
          }
        ]
      },
      "MetrcDeliveryPackage": {
        "properties": {
          "dataModel": {
            "type": "string",
            "description": "Name of this object's data model\n\nNote: This cannot be used to sort or filter.\n",
            "example": "MetrcPackage"
          },
          "hostname": {
            "type": "string",
            "description": "The hostname this object was retrieved"
          },
          "retrievedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp of when this object was pulled from Metrc\n\nNote: This cannot be used to sort or filter.\n"
          },
          "licenseNumber": {
            "type": "string",
            "description": "License number used to access this object\n\nNote: This cannot be used to sort or filter.\n"
          },
          "index": {
            "type": "string",
            "description": "Describes the current state of this object at the time it was returned from the API. \n\nNote: This cannot be used to sort or filter.\n",
            "example": "TRANSFERRED_PACKAGE",
            "enum": [
              "TRANSFERRED_PACKAGE"
            ]
          },
          "containsRemediatedProduct": {
            "type": "boolean",
            "example": false
          },
          "donationFacilityLicenseNumber": {
            "type": "string",
            "nullable": true
          },
          "donationFacilityName": {
            "type": "string",
            "nullable": true
          },
          "grossUnitOfWeightAbbreviation": {
            "type": "string",
            "example": "g"
          },
          "grossWeight": {
            "type": "number",
            "nullable": true
          },
          "isDonation": {
            "type": "boolean",
            "example": false
          },
          "isTestingSample": {
            "type": "boolean",
            "example": false
          },
          "isTradeSample": {
            "type": "boolean",
            "example": false
          },
          "isTradeSamplePersistent": {
            "type": "boolean",
            "example": false
          },
          "itemBrandName": {
            "type": "string",
            "nullable": true
          },
          "itemServingSize": {
            "type": "string",
            "example": ""
          },
          "itemStrainName": {
            "type": "string",
            "nullable": true
          },
          "itemSupplyDurationDays": {
            "type": "number",
            "nullable": true
          },
          "itemUnitCbdContent": {
            "type": "number",
            "nullable": true
          },
          "itemUnitCbdContentDose": {
            "type": "number",
            "nullable": true
          },
          "itemUnitCbdContentDoseUnitOfMeasureAbbreviation": {
            "type": "string",
            "nullable": true
          },
          "itemUnitCbdContentUnitOfMeasureAbbreviation": {
            "type": "string",
            "nullable": true
          },
          "itemUnitCbdPercent": {
            "type": "number",
            "nullable": true
          },
          "itemUnitQuantity": {
            "type": "number",
            "nullable": true
          },
          "itemUnitQuantityUnitOfMeasureAbbreviation": {
            "type": "string",
            "nullable": true
          },
          "itemUnitThcContent": {
            "type": "number",
            "nullable": true
          },
          "itemUnitThcContentDose": {
            "type": "number",
            "nullable": true
          },
          "itemUnitThcContentDoseUnitOfMeasureAbbreviation": {
            "type": "string",
            "nullable": true
          },
          "itemUnitThcContentUnitOfMeasureAbbreviation": {
            "type": "string",
            "nullable": true
          },
          "itemUnitThcPercent": {
            "type": "number",
            "nullable": true
          },
          "itemUnitVolume": {
            "type": "number",
            "nullable": true
          },
          "itemUnitVolumeUnitOfMeasureAbbreviation": {
            "type": "string",
            "nullable": true
          },
          "itemUnitWeight": {
            "type": "number",
            "nullable": true
          },
          "itemUnitWeightUnitOfMeasureAbbreviation": {
            "type": "string",
            "example": "g"
          },
          "labTestingStateName": {
            "type": "string",
            "example": "TestPassed"
          },
          "multiHarvest": {
            "type": "boolean",
            "example": true
          },
          "multiPackage": {
            "type": "boolean",
            "example": false
          },
          "packageId": {
            "type": "number",
            "example": 123456
          },
          "packageLabel": {
            "type": "string",
            "example": "1A4000000000000000213809"
          },
          "packageType": {
            "type": "string",
            "example": "Product"
          },
          "packagedDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "productCategoryName": {
            "type": "string",
            "example": "Infused-Edible"
          },
          "productName": {
            "type": "string",
            "example": "Mojo - Chocolate 20mg (Sativa)"
          },
          "productRequiresRemediation": {
            "type": "boolean",
            "example": false
          },
          "productionBatchNumber": {
            "type": "string",
            "nullable": true
          },
          "receivedQuantity": {
            "type": "number",
            "example": 100
          },
          "receivedUnitOfMeasureAbbreviation": {
            "type": "string",
            "example": "g"
          },
          "receiverWholesalePrice": {
            "type": "number",
            "nullable": true
          },
          "remediationDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "shipmentPackageState": {
            "type": "string",
            "example": "Accepted"
          },
          "shippedQuantity": {
            "type": "number",
            "example": 50
          },
          "shippedUnitOfMeasureAbbreviation": {
            "type": "string",
            "example": "g"
          },
          "shipperWholesalePrice": {
            "type": "number",
            "nullable": true
          },
          "sourceHarvestNames": {
            "type": "string",
            "example": "HARVEST 1, HARVEST 2"
          },
          "sourcePackageIsDonation": {
            "type": "boolean",
            "example": false
          },
          "sourcePackageIsTradeSample": {
            "type": "boolean",
            "example": false
          },
          "sourcePackageLabels": {
            "type": "string",
            "example": "1A4000000000000000000528, 1A4000000000000000000529"
          },
          "tradeSampleFacilityLicenseNumber": {
            "type": "string",
            "nullable": true
          },
          "tradeSampleFacilityName": {
            "type": "string",
            "nullable": true
          },
          "sellByDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "processingJobTypeId": {
            "type": "number",
            "nullable": true
          },
          "inTransitStatus": {
            "type": "string",
            "example": "InTransit"
          },
          "isInTransit": {
            "type": "boolean",
            "example": true
          },
          "expirationDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "retailIdQrCount": {
            "type": "number",
            "nullable": true
          },
          "labTestStageId": {
            "type": "number",
            "nullable": true
          },
          "useByDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "productLabel": {
            "type": "string",
            "nullable": true
          },
          "externalId": {
            "type": "number",
            "nullable": true
          }
        }
      },
      "MetrcDeliveryPackageListResponse": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/Pagination"
          },
          {
            "type": "object",
            "properties": {
              "data": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/MetrcDeliveryPackage"
                }
              }
            }
          }
        ]
      },
      "MetrcTransferredPackage": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Unique identifier for the item",
            "example": 1234567,
            "nullable": false
          },
          "hostname": {
            "type": "string",
            "description": "The hostname this object was retrieved from",
            "example": "ca.metrc.com"
          },
          "dataModel": {
            "type": "string",
            "description": "Name of this object's data model",
            "example": "MetrcPackage"
          },
          "retrievedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp of when this object was pulled from Metrc"
          },
          "licenseNumber": {
            "type": "string",
            "description": "License number used to access this object"
          },
          "index": {
            "type": "string",
            "description": "Describes the current state of this object at the time it was returned from the API. This cannot be used to sort or filter.",
            "example": "TRANSFERRED_PACKAGE",
            "enum": [
              "TRANSFERRED_PACKAGE"
            ]
          },
          "packageId": {
            "type": "integer",
            "description": "Identifier for the package",
            "example": 9876543,
            "nullable": false
          },
          "recipientFacilityLicenseNumber": {
            "type": "string",
            "description": "License number of the recipient facility",
            "example": "LIC-00001",
            "nullable": false
          },
          "recipientFacilityName": {
            "type": "string",
            "description": "Name of the recipient facility",
            "example": "Dank Dispensary LLC",
            "nullable": false
          },
          "manifestNumber": {
            "type": "string",
            "description": "Manifest number associated with the shipment",
            "example": "0001234567",
            "nullable": false
          },
          "packageLabel": {
            "type": "string",
            "description": "Label of the package",
            "example": "1A4000000000000000006310",
            "nullable": false
          },
          "sourceHarvestNames": {
            "type": "string",
            "description": "Names of the source harvests",
            "example": "Sunset Sherbet",
            "nullable": true
          },
          "sourcePackageLabels": {
            "type": "string",
            "description": "Labels of the source packages",
            "example": "1A4000000000000000005267",
            "nullable": true
          },
          "productName": {
            "type": "string",
            "description": "Name of the product",
            "example": "Sunset Sherbet | 3.5g",
            "nullable": false
          },
          "productCategoryName": {
            "type": "string",
            "description": "Category name of the product",
            "example": "Bud/Flower (Final Packaging)",
            "nullable": false
          },
          "itemStrainName": {
            "type": "string",
            "description": "Strain name of the item",
            "example": "Sunset Sherbet",
            "nullable": false
          },
          "labTestingStateName": {
            "type": "string",
            "description": "Lab testing status of the item",
            "example": "TestPassed",
            "enum": [
              "TestPassed",
              "TestFailed",
              "Pending"
            ],
            "nullable": false
          },
          "shippedQuantity": {
            "type": "number",
            "description": "Quantity shipped",
            "format": "double",
            "example": 1224.0,
            "nullable": false
          },
          "shippedUnitOfMeasureAbbreviation": {
            "type": "string",
            "description": "Unit of measure for the shipped quantity",
            "example": "g",
            "nullable": false
          },
          "grossWeight": {
            "type": "number",
            "description": "Gross weight of the package",
            "format": "double",
            "example": 224.0,
            "nullable": false
          },
          "grossUnitOfWeightAbbreviation": {
            "type": "string",
            "description": "Unit of measure for the gross weight",
            "example": "g",
            "nullable": false
          },
          "shipperWholesalePrice": {
            "type": "number",
            "description": "Wholesale price from the shipper",
            "format": "double",
            "nullable": true
          },
          "receivedQuantity": {
            "type": "number",
            "description": "Quantity received",
            "format": "double",
            "example": 1224.0,
            "nullable": false
          },
          "receivedUnitOfMeasureAbbreviation": {
            "type": "string",
            "description": "Unit of measure for the received quantity",
            "example": "g",
            "nullable": false
          },
          "receiverWholesalePrice": {
            "type": "number",
            "description": "Wholesale price to the receiver",
            "format": "double",
            "nullable": true
          },
          "shipmentPackageStateName": {
            "type": "string",
            "description": "State of the shipment package",
            "example": "Accepted",
            "enum": [
              "Accepted",
              "Rejected",
              "Pending"
            ],
            "nullable": false
          },
          "actualDepartureDateTime": {
            "type": "string",
            "description": "Actual departure date and time",
            "format": "date-time",
            "nullable": true
          },
          "receivedDateTime": {
            "type": "string",
            "description": "Date and time when the package was received",
            "format": "date-time",
            "example": "2024-07-26T00:00:00-05:00",
            "nullable": false
          },
          "processingJobTypeName": {
            "type": "string",
            "nullable": true
          },
          "externalId": {
            "type": "number",
            "nullable": true
          }
        },
        "required": [
          "grossUnitOfWeightAbbreviation",
          "grossWeight",
          "id",
          "itemStrainName",
          "labTestingStateName",
          "manifestNumber",
          "packageId",
          "packageLabel",
          "productCategoryName",
          "productName",
          "receivedDateTime",
          "receivedQuantity",
          "receivedUnitOfMeasureAbbreviation",
          "recipientFacilityLicenseNumber",
          "recipientFacilityName",
          "shipmentPackageStateName",
          "shippedQuantity",
          "shippedUnitOfMeasureAbbreviation"
        ]
      },
      "MetrcTransferredPackageListResponse": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/Pagination"
          },
          {
            "type": "object",
            "properties": {
              "data": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/MetrcTransferredPackage"
                }
              }
            }
          }
        ]
      },
      "MetrcHistory": {
        "properties": {
          "hostname": {
            "type": "string",
            "description": "The hostname this object was retrieved from",
            "example": "ca.metrc.com"
          },
          "dataModel": {
            "type": "string",
            "description": "Name of this object's data model",
            "example": "MetrcPackage"
          },
          "retrievedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp of when this object was pulled from Metrc"
          },
          "licenseNumber": {
            "type": "string",
            "description": "License number used to access this object"
          },
          "descriptions": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "Packaged 4,800 Grams of Wedding Cake Flower from 1 Harvest",
              "- Took 4,800 Grams from Harvest \"240101WCAKE\"",
              "- Package Type: Product",
              "- Location: Drying Room",
              "- Location Type: Default Location Type",
              "- Production Batch No: WC0001"
            ]
          },
          "userName": {
            "type": "string",
            "example": "Mary Smith (MSmith001)"
          },
          "actualDate": {
            "type": "string",
            "format": "date",
            "example": "2024-01-01"
          },
          "recordedDateTime": {
            "type": "string",
            "format": "date-time",
            "example": "2024-01-01T13:07:00.719384Z"
          },
          "inputSourcesNames": {
            "type": "string",
            "description": "Name of the user responsible for this event",
            "example": "User"
          },
          "externalSourceName": {
            "type": "string",
            "description": "Name of the third party software source, if applicable",
            "nullable": true
          }
        }
      },
      "MetrcHistoryListResponse": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/Pagination"
          },
          {
            "type": "object",
            "properties": {
              "data": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/MetrcHistory"
                }
              }
            }
          }
        ]
      },
      "MetrcPackageLabResult": {
        "properties": {
          "hostname": {
            "type": "string",
            "description": "The hostname this object was retrieved from",
            "example": "ca.metrc.com"
          },
          "dataModel": {
            "type": "string",
            "description": "Name of this object's data model",
            "example": "MetrcPackage"
          },
          "retrievedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp of when this object was pulled from Metrc"
          },
          "licenseNumber": {
            "type": "string",
            "description": "License number used to access this object"
          },
          "packageId": {
            "type": "integer",
            "description": "Unique identifier for the package.",
            "example": 123456
          },
          "labTestResultId": {
            "type": "integer",
            "description": "Unique identifier for the lab test result.",
            "example": 654321
          },
          "labFacilityLicenseNumber": {
            "type": "string",
            "description": "License number of the lab facility.",
            "example": "TES000011"
          },
          "labFacilityName": {
            "type": "string",
            "description": "Name of the lab facility.",
            "example": "Green Precision Analytics Inc."
          },
          "sourcePackageLabel": {
            "type": "string",
            "description": "Label of the source package.",
            "example": "1A4000000000000000025232"
          },
          "productName": {
            "type": "string",
            "description": "Name of the product.",
            "example": "Wedding Cake Flower"
          },
          "productCategoryName": {
            "type": "string",
            "description": "Category name of the product.",
            "example": "Bud/Flower"
          },
          "testPerformedDate": {
            "type": "string",
            "format": "date",
            "description": "Date when the test was performed.",
            "example": "2024-01-01"
          },
          "overallPassed": {
            "type": "boolean",
            "description": "Indicates if the overall test was passed.",
            "example": true
          },
          "isRevoked": {
            "type": "boolean",
            "description": "Indicates if the test result has been revoked.",
            "example": false
          },
          "revokedDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "description": "Date when the test result was revoked, if applicable."
          },
          "labTestResultDocumentFileId": {
            "type": "integer",
            "description": "Identifier for the document file of the lab test result.",
            "example": 123456
          },
          "resultReleased": {
            "type": "boolean",
            "description": "Indicates if the test result has been released.",
            "example": true
          },
          "resultReleaseDateTime": {
            "type": "string",
            "format": "date-time",
            "description": "Date and time when the test result was released.",
            "example": "2024-01-01T18:00:00+00:00"
          },
          "expirationDateTime": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "description": "Expiration date and time for the test result, if applicable."
          },
          "labTestDetailId": {
            "type": "integer",
            "description": "Identifier for the detailed lab test result.",
            "example": 4321234
          },
          "testTypeName": {
            "type": "string",
            "description": "Name of the test type.",
            "example": "Alpha-Bisabolol (%) Mandatory Terpenes"
          },
          "testPassed": {
            "type": "boolean",
            "description": "Indicates if the specific test was passed.",
            "example": true
          },
          "testResultLevel": {
            "type": "number",
            "format": "float",
            "description": "Level of the test result.",
            "example": 0.0234
          },
          "testComment": {
            "type": "string",
            "description": "Comments on the test result.",
            "example": "No significant findings."
          },
          "testInformationalOnly": {
            "type": "boolean",
            "description": "Indicates if the test result is for informational purposes only.",
            "example": false
          },
          "labTestDetailIsRevoked": {
            "type": "boolean",
            "description": "Indicates if the detailed lab test result has been revoked.",
            "example": false
          },
          "labTestDetailRevokedDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "description": "Date when the detailed lab test result was revoked, if applicable."
          },
          "labTestResultLastModified": {
            "type": "string",
            "format": "date-time",
            "description": "Date and time when the lab test result was last modified.",
            "example": "2024-01-01T18:01:00+00:00"
          }
        }
      },
      "MetrcPackageLabResultListResponse": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/Pagination"
          },
          {
            "type": "object",
            "properties": {
              "data": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/MetrcPackageLabResult"
                }
              }
            }
          }
        ]
      },
      "MetrcPackageLabResultBatch": {
        "properties": {
          "hostname": {
            "type": "string",
            "description": "The hostname this object was retrieved from.",
            "example": "ca.metrc.com"
          },
          "dataModel": {
            "type": "string",
            "description": "The name of the object's data model.",
            "example": "MetrcPackage"
          },
          "retrievedAt": {
            "type": "string",
            "format": "date-time",
            "description": "The timestamp of when this object was pulled from Metrc."
          },
          "licenseNumber": {
            "type": "string",
            "description": "The license number used to access this object."
          },
          "id": {
            "type": "integer",
            "description": "The unique identifier of the test result.",
            "example": 1234567
          },
          "name": {
            "type": "string",
            "description": "The name of the test panel or category.",
            "example": "Additional - Mandatory Terpenes"
          },
          "testTypesRequired": {
            "type": "integer",
            "description": "The number of test types required for this item.",
            "example": 29
          },
          "testTypesPerformed": {
            "type": "integer",
            "description": "The number of test types actually performed.",
            "example": 29
          },
          "testsPassed": {
            "type": "integer",
            "description": "The number of tests that passed.",
            "example": 58
          },
          "testsFailed": {
            "type": "integer",
            "description": "The number of tests that failed.",
            "example": 0
          },
          "isFullyRevoked": {
            "type": "boolean",
            "nullable": true,
            "description": "Whether the item is fully revoked; may be null."
          },
          "tests": {
            "type": "array",
            "description": "A list of individual test result entries.",
            "items": {
              "$ref": "#/components/schemas/MetrcPackageLabResult"
            }
          }
        }
      },
      "MetrcPackageLabResultBatchListResponse": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/Pagination"
          },
          {
            "type": "object",
            "properties": {
              "data": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/MetrcPackageLabResultBatch"
                }
              }
            }
          }
        ]
      },
      "MetrcPackageSourceHarvest": {
        "properties": {
          "hostname": {
            "type": "string",
            "description": "The hostname this object was retrieved from",
            "example": "ca.metrc.com"
          },
          "dataModel": {
            "type": "string",
            "description": "Name of this object's data model",
            "example": "MetrcPackage"
          },
          "retrievedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp of when this object was pulled from Metrc"
          },
          "licenseNumber": {
            "type": "string",
            "description": "License number used to access this object"
          },
          "harvestedByFacilityLicenseNumber": {
            "type": "string",
            "example": "EX000001"
          },
          "harvestedByFacilityName": {
            "type": "string",
            "example": "Example Facility LLC"
          },
          "name": {
            "type": "string",
            "example": "01012025 - Watermelon Gushers"
          },
          "harvestTypeName": {
            "type": "string",
            "example": "Harvest Batch"
          },
          "labTestingStateName": {
            "type": "string",
            "example": "Not Submitted"
          },
          "labTestingStateDate": {
            "type": "string",
            "nullable": true
          },
          "isOnHold": {
            "type": "boolean"
          },
          "harvestStartDate": {
            "type": "string",
            "format": "date",
            "example": "2025-01-01"
          }
        }
      },
      "MetrcPackageSourceHarvestListResponse": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/Pagination"
          },
          {
            "type": "object",
            "properties": {
              "data": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/MetrcPackageSourceHarvest"
                }
              }
            }
          }
        ]
      },
      "MetrcIncomingTransfer": {
        "type": "object",
        "properties": {
          "hostname": {
            "type": "string",
            "description": "The hostname this object was retrieved from",
            "example": "ca.metrc.com"
          },
          "dataModel": {
            "type": "string",
            "description": "Name of this object's data model",
            "example": "MetrcPackage"
          },
          "retrievedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp of when this object was pulled from Metrc"
          },
          "licenseNumber": {
            "type": "string",
            "description": "License number used to access this object"
          },
          "index": {
            "type": "string",
            "description": "Describes the current state of this object at the time it was returned from the API. This cannot be used to sort or filter.",
            "example": "ACTIVE_INCOMING_TRANSFER",
            "enum": [
              "ACTIVE_INCOMING_TRANSFER",
              "INACTIVE_INCOMING_TRANSFER"
            ]
          },
          "id": {
            "type": "integer",
            "format": "int64",
            "description": "Unique identifier for the transfer",
            "example": 1234567
          },
          "manifestNumber": {
            "type": "string",
            "description": "Unique manifest number associated with the transfer",
            "example": "0001234567"
          },
          "shipmentLicenseTypeName": {
            "type": "string",
            "description": "Type of license for the shipment",
            "example": "Licensed"
          },
          "shipperFacilityLicenseNumber": {
            "type": "string",
            "description": "License number of the shipper's facility",
            "example": "LIC-00002"
          },
          "shipperFacilityName": {
            "type": "string",
            "description": "Name of the shipper's facility",
            "example": "Fire Manufacturing, Inc."
          },
          "name": {
            "type": "string",
            "nullable": true,
            "description": "Name of the transfer"
          },
          "transporterFacilityLicenseNumber": {
            "type": "string",
            "description": "License number of the transporter facility",
            "example": ""
          },
          "transporterFacilityName": {
            "type": "string",
            "description": "Name of the transporter facility",
            "example": ""
          },
          "driverName": {
            "type": "string",
            "description": "Name of the driver",
            "example": ""
          },
          "driverOccupationalLicenseNumber": {
            "type": "string",
            "description": "Occupational license number of the driver",
            "example": ""
          },
          "driverVehicleLicenseNumber": {
            "type": "string",
            "description": "License number of the vehicle used by the driver",
            "example": ""
          },
          "vehicleMake": {
            "type": "string",
            "description": "Make of the vehicle used for transport",
            "example": ""
          },
          "vehicleModel": {
            "type": "string",
            "description": "Model of the vehicle used for transport",
            "example": ""
          },
          "vehicleLicensePlateNumber": {
            "type": "string",
            "description": "License plate number of the vehicle",
            "example": ""
          },
          "deliveryFacilities": {
            "type": "string",
            "description": "Details of the delivery facilities",
            "example": "LIC-00001 (Dank Dispensary LLC)"
          },
          "deliveryCount": {
            "type": "integer",
            "format": "int32",
            "description": "Number of deliveries in the transfer",
            "example": 1
          },
          "receivedDeliveryCount": {
            "type": "integer",
            "format": "int32",
            "description": "Number of deliveries received",
            "example": 0
          },
          "packageCount": {
            "type": "integer",
            "format": "int32",
            "description": "Total number of packages in the transfer",
            "example": 8
          },
          "receivedPackageCount": {
            "type": "integer",
            "format": "int32",
            "description": "Number of packages received",
            "example": 0
          },
          "containsPlantPackage": {
            "type": "boolean",
            "description": "Indicates if the transfer contains plant packages",
            "example": false
          },
          "containsProductPackage": {
            "type": "boolean",
            "description": "Indicates if the transfer contains product packages",
            "example": true
          },
          "containsTradeSample": {
            "type": "boolean",
            "description": "Indicates if the transfer contains trade samples",
            "example": false
          },
          "containsDonation": {
            "type": "boolean",
            "description": "Indicates if the transfer contains donations",
            "example": false
          },
          "containsTestingSample": {
            "type": "boolean",
            "description": "Indicates if the transfer contains testing samples",
            "example": false
          },
          "containsProductRequiresRemediation": {
            "type": "boolean",
            "description": "Indicates if the transfer contains products that require remediation",
            "example": false
          },
          "containsRemediatedProductPackage": {
            "type": "boolean",
            "description": "Indicates if the transfer contains remediated product packages",
            "example": false
          },
          "editCount": {
            "type": "integer",
            "format": "int32",
            "description": "Number of times the transfer record has been edited",
            "example": 1
          },
          "canEdit": {
            "type": "boolean",
            "description": "Indicates if the transfer record can be edited",
            "example": true
          },
          "canEditOutgoingInactive": {
            "type": "boolean",
            "description": "Indicates if the transfer record can be edited when outgoing and inactive",
            "example": false
          },
          "isVoided": {
            "type": "boolean",
            "description": "Indicates if the transfer has been voided",
            "example": false
          },
          "createdDateTime": {
            "type": "string",
            "format": "date-time",
            "description": "The date and time when the transfer was created",
            "example": "2024-07-25T13:00:00+00:00"
          },
          "createdByUserName": {
            "type": "string",
            "description": "Username of the person who created the transfer record",
            "example": "Mike Smith"
          },
          "lastModified": {
            "type": "string",
            "format": "date-time",
            "description": "The date and time when the transfer was last modified",
            "example": "2024-07-25T00:00:00+00:00"
          },
          "deliveryId": {
            "type": "integer",
            "format": "int64",
            "description": "Unique identifier for the delivery associated with the transfer",
            "example": 1234566
          },
          "recipientFacilityId": {
            "type": "integer",
            "format": "int32",
            "description": "The ID of the recipient facility.",
            "example": 456
          },
          "recipientFacilityLicenseNumber": {
            "type": "string",
            "description": "License number of the recipient facility",
            "example": "LIC-00001"
          },
          "recipientFacilityName": {
            "type": "string",
            "description": "Name of the recipient facility",
            "example": "Dank Dispensary LLC"
          },
          "shipmentTypeName": {
            "type": "string",
            "description": "Type of shipment",
            "example": "Unaffiliated Transfer"
          },
          "shipmentTransactionTypeName": {
            "type": "string",
            "description": "Type of shipment transaction",
            "example": "Wholesale"
          },
          "estimatedDepartureDateTime": {
            "type": "string",
            "format": "date-time",
            "description": "Estimated date and time of departure",
            "example": "2024-07-26T06:00:00.000"
          },
          "actualDepartureDateTime": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "description": "Actual date and time of departure"
          },
          "estimatedArrivalDateTime": {
            "type": "string",
            "format": "date-time",
            "description": "Estimated date and time of arrival",
            "example": "2024-07-26T17:00:00.000"
          },
          "actualArrivalDateTime": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "description": "Actual date and time of arrival"
          },
          "deliveryPackageCount": {
            "type": "integer",
            "format": "int32",
            "description": "Number of packages in the delivery",
            "example": 8
          },
          "deliveryReceivedPackageCount": {
            "type": "integer",
            "format": "int32",
            "description": "Number of packages received in the delivery",
            "example": 0
          },
          "receivedByName": {
            "type": "string",
            "nullable": true,
            "description": "Name of the person who received the delivery"
          },
          "receivedDateTime": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "description": "Date and time when the delivery was received"
          },
          "estimatedReturnDepartureDateTime": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "description": "Estimated date and time of return departure"
          },
          "actualReturnDepartureDateTime": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "description": "Actual date and time of return departure"
          },
          "estimatedReturnArrivalDateTime": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "description": "Estimated date and time of return arrival"
          },
          "actualReturnArrivalDateTime": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "description": "Actual date and time of return arrival"
          },
          "rejectedPackagesReturned": {
            "type": "boolean",
            "description": "Indicates if rejected packages were returned",
            "example": false
          },
          "transporterAllApprovalDate": {
            "type": "string",
            "format": "date-time",
            "description": "Date and time when all transporters were approved",
            "example": "2024-07-25T13:00:00+00:00"
          },
          "destinationsAllApprovalDate": {
            "type": "string",
            "format": "date-time",
            "description": "Date and time when all destinations were approved",
            "example": "2024-07-25T13:00:00+00:00"
          },
          "transportersAutomaticallyApproved": {
            "type": "boolean",
            "description": "Indicates if transporters were automatically approved",
            "example": true
          },
          "destinationsAutomaticallyApproved": {
            "type": "boolean",
            "description": "Indicates if destinations were automatically approved",
            "example": true
          },
          "approvalRejectDateTime": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "description": "Date and time when the approval was rejected"
          },
          "approvalRejectedByUser": {
            "type": "string",
            "description": "Username of the person who rejected the approval",
            "example": "Mike Smith"
          },
          "approvalRejectedFacilityLicenseNumber": {
            "type": "string",
            "nullable": true,
            "description": "License number of the facility where approval was rejected"
          },
          "approvalRejectReasonId": {
            "type": "string",
            "nullable": true,
            "description": "Reason ID for the approval rejection"
          },
          "tollingAgreementFileSystemId": {
            "type": "number",
            "example": 0
          },
          "invoiceNumber": {
            "type": "string",
            "example": ""
          },
          "lineNumber": {
            "type": "integer",
            "format": "int32",
            "example": ""
          }
        }
      },
      "MetrcIncomingTransferListResponse": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/Pagination"
          },
          {
            "type": "object",
            "properties": {
              "data": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/MetrcIncomingTransfer"
                }
              }
            }
          }
        ]
      },
      "MetrcOutgoingTransfer": {
        "type": "object",
        "properties": {
          "hostname": {
            "type": "string",
            "description": "The hostname this object was retrieved from",
            "example": "ca.metrc.com"
          },
          "dataModel": {
            "type": "string",
            "description": "Name of this object's data model",
            "example": "MetrcPackage"
          },
          "retrievedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp of when this object was pulled from Metrc"
          },
          "licenseNumber": {
            "type": "string",
            "description": "License number used to access this object"
          },
          "index": {
            "type": "string",
            "description": "Describes the current state of this object at the time it was returned from the API. This cannot be used to sort or filter.",
            "example": "ACTIVE_OUTGOING_TRANSFER",
            "enum": [
              "ACTIVE_OUTGOING_TRANSFER",
              "INACTIVE_OUTGOING_TRANSFER",
              "REJECTED_TRANSFER"
            ]
          },
          "id": {
            "type": "integer",
            "format": "int64",
            "description": "Unique identifier for the transfer",
            "example": 1234567
          },
          "manifestNumber": {
            "type": "string",
            "description": "Unique manifest number associated with the transfer",
            "example": "0001234567"
          },
          "shipmentLicenseTypeName": {
            "type": "string",
            "description": "Type of license for the shipment",
            "example": "Licensed"
          },
          "shipperFacilityLicenseNumber": {
            "type": "string",
            "description": "License number of the shipper's facility",
            "example": "LIC-00002"
          },
          "shipperFacilityName": {
            "type": "string",
            "description": "Name of the shipper's facility",
            "example": "Fire Manufacturing, Inc."
          },
          "name": {
            "type": "string",
            "nullable": true,
            "description": "Name of the transfer"
          },
          "transporterFacilityLicenseNumber": {
            "type": "string",
            "description": "License number of the transporter facility",
            "example": ""
          },
          "transporterFacilityName": {
            "type": "string",
            "description": "Name of the transporter facility",
            "example": ""
          },
          "driverName": {
            "type": "string",
            "description": "Name of the driver",
            "example": ""
          },
          "driverOccupationalLicenseNumber": {
            "type": "string",
            "description": "Occupational license number of the driver",
            "example": ""
          },
          "driverVehicleLicenseNumber": {
            "type": "string",
            "description": "License number of the vehicle used by the driver",
            "example": ""
          },
          "vehicleMake": {
            "type": "string",
            "description": "Make of the vehicle used for transport",
            "example": ""
          },
          "vehicleModel": {
            "type": "string",
            "description": "Model of the vehicle used for transport",
            "example": ""
          },
          "vehicleLicensePlateNumber": {
            "type": "string",
            "description": "License plate number of the vehicle",
            "example": ""
          },
          "deliveryFacilities": {
            "type": "string",
            "description": "Details of the delivery facilities",
            "example": "LIC-00001 (Dank Dispensary LLC)"
          },
          "deliveryCount": {
            "type": "integer",
            "format": "int32",
            "description": "Number of deliveries in the transfer",
            "example": 1
          },
          "receivedDeliveryCount": {
            "type": "integer",
            "format": "int32",
            "description": "Number of deliveries received",
            "example": 0
          },
          "packageCount": {
            "type": "integer",
            "format": "int32",
            "description": "Total number of packages in the transfer",
            "example": 8
          },
          "receivedPackageCount": {
            "type": "integer",
            "format": "int32",
            "description": "Number of packages received",
            "example": 0
          },
          "containsPlantPackage": {
            "type": "boolean",
            "description": "Indicates if the transfer contains plant packages",
            "example": false
          },
          "containsProductPackage": {
            "type": "boolean",
            "description": "Indicates if the transfer contains product packages",
            "example": true
          },
          "containsTradeSample": {
            "type": "boolean",
            "description": "Indicates if the transfer contains trade samples",
            "example": false
          },
          "containsDonation": {
            "type": "boolean",
            "description": "Indicates if the transfer contains donations",
            "example": false
          },
          "containsTestingSample": {
            "type": "boolean",
            "description": "Indicates if the transfer contains testing samples",
            "example": false
          },
          "containsProductRequiresRemediation": {
            "type": "boolean",
            "description": "Indicates if the transfer contains products that require remediation",
            "example": false
          },
          "containsRemediatedProductPackage": {
            "type": "boolean",
            "description": "Indicates if the transfer contains remediated product packages",
            "example": false
          },
          "editCount": {
            "type": "integer",
            "format": "int32",
            "description": "Number of times the transfer record has been edited",
            "example": 1
          },
          "canEdit": {
            "type": "boolean",
            "description": "Indicates if the transfer record can be edited",
            "example": true
          },
          "canEditOutgoingInactive": {
            "type": "boolean",
            "description": "Indicates if the transfer record can be edited when outgoing and inactive",
            "example": false
          },
          "isVoided": {
            "type": "boolean",
            "description": "Indicates if the transfer has been voided",
            "example": false
          },
          "createdDateTime": {
            "type": "string",
            "format": "date-time",
            "description": "The date and time when the transfer was created",
            "example": "2024-07-25T13:00:00+00:00"
          },
          "createdByUserName": {
            "type": "string",
            "description": "Username of the person who created the transfer record",
            "example": "Mike Smith"
          },
          "lastModified": {
            "type": "string",
            "format": "date-time",
            "description": "The date and time when the transfer was last modified",
            "example": "2024-07-25T00:00:00+00:00"
          },
          "deliveryId": {
            "type": "integer",
            "format": "int64",
            "description": "Unique identifier for the delivery associated with the transfer",
            "example": 1234566
          },
          "recipientFacilityId": {
            "type": "integer",
            "format": "int32",
            "description": "The ID of the recipient facility.",
            "example": 456
          },
          "recipientFacilityLicenseNumber": {
            "type": "string",
            "description": "License number of the recipient facility",
            "example": "LIC-00001"
          },
          "recipientFacilityName": {
            "type": "string",
            "description": "Name of the recipient facility",
            "example": "Dank Dispensary LLC"
          },
          "shipmentTypeName": {
            "type": "string",
            "description": "Type of shipment",
            "example": "Unaffiliated Transfer"
          },
          "shipmentTransactionTypeName": {
            "type": "string",
            "description": "Type of shipment transaction",
            "example": "Wholesale"
          },
          "estimatedDepartureDateTime": {
            "type": "string",
            "format": "date-time",
            "description": "Estimated date and time of departure",
            "example": "2024-07-26T06:00:00.000"
          },
          "actualDepartureDateTime": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "description": "Actual date and time of departure"
          },
          "estimatedArrivalDateTime": {
            "type": "string",
            "format": "date-time",
            "description": "Estimated date and time of arrival",
            "example": "2024-07-26T17:00:00.000"
          },
          "actualArrivalDateTime": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "description": "Actual date and time of arrival"
          },
          "deliveryPackageCount": {
            "type": "integer",
            "format": "int32",
            "description": "Number of packages in the delivery",
            "example": 8
          },
          "deliveryReceivedPackageCount": {
            "type": "integer",
            "format": "int32",
            "description": "Number of packages received in the delivery",
            "example": 0
          },
          "receivedByName": {
            "type": "string",
            "nullable": true,
            "description": "Name of the person who received the delivery"
          },
          "receivedDateTime": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "description": "Date and time when the delivery was received"
          },
          "estimatedReturnDepartureDateTime": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "description": "Estimated date and time of return departure"
          },
          "actualReturnDepartureDateTime": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "description": "Actual date and time of return departure"
          },
          "estimatedReturnArrivalDateTime": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "description": "Estimated date and time of return arrival"
          },
          "actualReturnArrivalDateTime": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "description": "Actual date and time of return arrival"
          },
          "rejectedPackagesReturned": {
            "type": "boolean",
            "description": "Indicates if rejected packages were returned",
            "example": false
          },
          "transporterAllApprovalDate": {
            "type": "string",
            "format": "date-time",
            "description": "Date and time when all transporters were approved",
            "example": "2024-07-25T13:00:00+00:00"
          },
          "destinationsAllApprovalDate": {
            "type": "string",
            "format": "date-time",
            "description": "Date and time when all destinations were approved",
            "example": "2024-07-25T13:00:00+00:00"
          },
          "transportersAutomaticallyApproved": {
            "type": "boolean",
            "description": "Indicates if transporters were automatically approved",
            "example": true
          },
          "destinationsAutomaticallyApproved": {
            "type": "boolean",
            "description": "Indicates if destinations were automatically approved",
            "example": true
          },
          "approvalRejectDateTime": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "description": "Date and time when the approval was rejected"
          },
          "approvalRejectedByUser": {
            "type": "string",
            "description": "Username of the person who rejected the approval",
            "example": "Mike Smith"
          },
          "approvalRejectedFacilityLicenseNumber": {
            "type": "string",
            "nullable": true,
            "description": "License number of the facility where approval was rejected"
          },
          "approvalRejectReasonId": {
            "type": "string",
            "nullable": true,
            "description": "Reason ID for the approval rejection"
          },
          "tollingAgreementFileSystemId": {
            "type": "number",
            "example": 0
          },
          "invoiceNumber": {
            "type": "string",
            "example": ""
          },
          "lineNumber": {
            "type": "integer",
            "format": "int32",
            "example": ""
          }
        }
      },
      "MetrcOutgoingTransferListResponse": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/Pagination"
          },
          {
            "type": "object",
            "properties": {
              "data": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/MetrcOutgoingTransfer"
                }
              }
            }
          }
        ]
      },
      "MetrcTransferDelivery": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number",
            "description": "The transfer delivery ID",
            "example": 12345
          },
          "hostname": {
            "type": "string",
            "description": "The hostname this object was retrieved from",
            "example": "ca.metrc.com"
          },
          "dataModel": {
            "type": "string",
            "description": "Name of this object's data model",
            "example": "MetrcPackage"
          },
          "retrievedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp of when this object was pulled from Metrc"
          },
          "licenseNumber": {
            "type": "string",
            "description": "License number used to access this object"
          },
          "manifestNumber": {
            "type": "integer",
            "format": "int32",
            "example": 1234567
          },
          "deliveryNumber": {
            "type": "integer",
            "format": "int32",
            "example": 1234567
          },
          "actualArrivalDateTime": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "description": "The actual arrival date and time."
          },
          "actualDepartureDateTime": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "description": "The actual departure date and time."
          },
          "actualReturnArrivalDateTime": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "description": "The actual return arrival date and time."
          },
          "actualReturnDepartureDateTime": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "description": "The actual return departure date and time."
          },
          "deliveryPackageCount": {
            "type": "integer",
            "format": "int32",
            "description": "The number of packages delivered.",
            "example": 5
          },
          "deliveryReceivedPackageCount": {
            "type": "integer",
            "format": "int32",
            "description": "The number of packages received.",
            "example": 4
          },
          "estimatedArrivalDateTime": {
            "type": "string",
            "format": "date-time",
            "description": "The estimated arrival date and time.",
            "example": "2024-07-25T15:30:00Z"
          },
          "estimatedDepartureDateTime": {
            "type": "string",
            "format": "date-time",
            "description": "The estimated departure date and time.",
            "example": "2024-07-25T13:30:00Z"
          },
          "estimatedReturnArrivalDateTime": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "description": "The estimated return arrival date and time."
          },
          "estimatedReturnDepartureDateTime": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "description": "The estimated return departure date and time."
          },
          "grossUnitOfWeightAbbreviation": {
            "type": "string",
            "nullable": true,
            "description": "The abbreviation for the unit of gross weight.",
            "example": "kg"
          },
          "grossUnitOfWeightId": {
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "description": "The ID for the unit of gross weight.",
            "example": 1
          },
          "grossWeight": {
            "type": "number",
            "format": "float",
            "nullable": true,
            "description": "The gross weight.",
            "example": 100.5
          },
          "plannedRoute": {
            "type": "string",
            "description": "The planned route for the transfer.",
            "example": "Route A"
          },
          "receivedByName": {
            "type": "string",
            "nullable": true,
            "description": "The name of the person who received the shipment."
          },
          "receivedDateTime": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "description": "The date and time when the shipment was received."
          },
          "recipientFacilityId": {
            "type": "integer",
            "format": "int32",
            "description": "The ID of the recipient facility.",
            "example": 456
          },
          "recipientFacilityLicenseNumber": {
            "type": "string",
            "description": "The license number of the recipient facility.",
            "example": "AB12345"
          },
          "recipientFacilityName": {
            "type": "string",
            "description": "The name of the recipient facility.",
            "example": "Facility A"
          },
          "rejectedPackagesReturned": {
            "type": "boolean",
            "description": "Indicates whether rejected packages were returned.",
            "example": false
          },
          "shipmentTransactionTypeName": {
            "type": "string",
            "description": "The name of the shipment transaction type.",
            "example": "Regular"
          },
          "shipmentTypeName": {
            "type": "string",
            "description": "The name of the shipment type.",
            "example": "Transfer",
            "enum": [
              "Transfer"
            ]
          },
          "recipientApprovalDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "description": "The date and time when the recipient approved the shipment upon receipt."
          },
          "recipientAutoApproval": {
            "type": "boolean",
            "description": "Indicates whether the recipient's approval of the shipment is automatically granted, typically when there are no issues with the received packages.",
            "example": false
          },
          "tollingAgreementFileSystemId": {
            "type": "number",
            "example": 0
          },
          "invoiceNumber": {
            "type": "string",
            "example": ""
          }
        }
      },
      "MetrcTransferDeliveryListResponse": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/Pagination"
          },
          {
            "type": "object",
            "properties": {
              "data": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/MetrcTransferDelivery"
                }
              }
            }
          }
        ]
      },
      "MetrcTransferTransporter": {
        "type": "object",
        "properties": {
          "hostname": {
            "type": "string",
            "description": "The hostname this object was retrieved from",
            "example": "ca.metrc.com"
          },
          "dataModel": {
            "type": "string",
            "description": "Name of this object's data model",
            "example": "MetrcPackage"
          },
          "retrievedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp of when this object was pulled from Metrc"
          },
          "licenseNumber": {
            "type": "string",
            "description": "License number used to access this object"
          },
          "transporterFacilityLicenseNumber": {
            "type": "string",
            "description": "The license number of the transporter's facility.",
            "example": "LIC-00001"
          },
          "transporterFacilityName": {
            "type": "string",
            "description": "The name of the transporter's facility.",
            "example": "Dank Dispensary LLC"
          },
          "transporterDirectionName": {
            "type": "string",
            "enum": [
              "Outbound"
            ],
            "description": "The direction of the transporter.",
            "example": "Outbound"
          },
          "transporterApprovalDate": {
            "type": "string",
            "format": "date-time",
            "description": "The date and time when the transporter was approved.",
            "example": "2024-07-26T13:00:00+00:00"
          },
          "transporterAutoApproval": {
            "type": "boolean",
            "description": "Indicates if the transporter was automatically approved.",
            "example": true
          },
          "driverName": {
            "type": "string",
            "description": "The name of the driver.",
            "example": "John Doe"
          },
          "driverOccupationalLicenseNumber": {
            "type": "string",
            "description": "The occupational license number of the driver.",
            "example": "DL123456789"
          },
          "driverVehicleLicenseNumber": {
            "type": "string",
            "description": "The vehicle license number of the driver.",
            "example": "ABC1234"
          },
          "driverLayoverLeg": {
            "type": "string",
            "nullable": true,
            "description": "Information about the driver's layover leg."
          },
          "vehicleMake": {
            "type": "string",
            "description": "The make of the vehicle.",
            "example": "Ford"
          },
          "vehicleModel": {
            "type": "string",
            "description": "The model of the vehicle.",
            "example": "F-150"
          },
          "vehicleLicensePlateNumber": {
            "type": "string",
            "description": "The license plate number of the vehicle.",
            "example": "XYZ7890"
          },
          "acceptedDateTime": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "description": "The date and time when the transporter was accepted.",
            "example": "2024-07-26T13:00:00-05:00"
          },
          "isLayover": {
            "type": "boolean",
            "description": "Indicates if the transport includes a layover.",
            "example": false
          },
          "estimatedDepartureDateTime": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "description": "The estimated date and time of departure.",
            "example": "2024-07-26T14:00:00+00:00"
          },
          "actualDepartureDateTime": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "description": "The actual date and time of departure."
          },
          "estimatedArrivalDateTime": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "description": "The estimated date and time of arrival.",
            "example": "2024-07-26T15:00:00+00:00"
          },
          "actualArrivalDateTime": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "description": "The actual date and time of arrival."
          }
        }
      },
      "MetrcTransferTransporterListResponse": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/Pagination"
          },
          {
            "type": "object",
            "properties": {
              "data": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/MetrcTransferTransporter"
                }
              }
            }
          }
        ]
      },
      "MetrcTransferTransporterDetails": {
        "type": "object",
        "properties": {
          "hostname": {
            "type": "string",
            "description": "The hostname this object was retrieved from",
            "example": "ca.metrc.com"
          },
          "dataModel": {
            "type": "string",
            "description": "Name of this object's data model",
            "example": "MetrcPackage"
          },
          "retrievedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp of when this object was pulled from Metrc"
          },
          "licenseNumber": {
            "type": "string",
            "description": "License number used to access this object"
          },
          "shipmentPlanId": {
            "type": "integer",
            "example": 12345,
            "description": "Unique identifier for the shipment plan."
          },
          "shipmentDeliveryId": {
            "type": "integer",
            "example": 67890,
            "description": "Unique identifier for the shipment delivery."
          },
          "transporterDirection": {
            "type": "string",
            "enum": [
              "Outbound"
            ],
            "example": "Outbound",
            "description": "Direction of the transporter."
          },
          "transporterFacilityId": {
            "type": "integer",
            "example": 54321,
            "description": "Unique identifier for the transporter facility."
          },
          "lineNumber": {
            "type": "integer",
            "example": 1,
            "description": "Line number in the shipment details."
          },
          "driverName": {
            "type": "string",
            "example": "John Doe",
            "description": "Name of the driver."
          },
          "driverOccupationalLicenseNumber": {
            "type": "string",
            "example": "AB1234567",
            "description": "Occupational license number of the driver."
          },
          "driverVehicleLicenseNumber": {
            "type": "string",
            "example": "XYZ987654",
            "description": "Vehicle license number of the driver."
          },
          "driverLayoverLeg": {
            "type": "string",
            "nullable": true,
            "example": "Leg1",
            "description": "Layover leg details for the driver, if applicable."
          },
          "vehicleMake": {
            "type": "string",
            "example": "Ford",
            "description": "Make of the vehicle."
          },
          "vehicleModel": {
            "type": "string",
            "example": "Transit",
            "description": "Model of the vehicle."
          },
          "vehicleLicensePlateNumber": {
            "type": "string",
            "example": "XYZ-1234",
            "description": "License plate number of the vehicle."
          },
          "actualDriverStartDateTime": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "example": "2024-07-26T08:30:00Z",
            "description": "Actual start date and time for the driver."
          },
          "isVoided": {
            "type": "boolean",
            "example": false,
            "description": "Indicates if the record is voided."
          },
          "receivedDateTime": {
            "type": "string",
            "format": "date-time",
            "example": "2024-07-25T18:47:20+00:00",
            "description": "The date and time when the shipment was received."
          },
          "receivedDeliveryCount": {
            "type": "integer",
            "example": 1,
            "description": "The number of deliveries received."
          }
        }
      },
      "MetrcTransferTransporterDetailsListResponse": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/Pagination"
          },
          {
            "type": "object",
            "properties": {
              "data": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/MetrcTransferTransporterDetails"
                }
              }
            }
          }
        ]
      },
      "MetrcHarvest": {
        "properties": {
          "id": {
            "type": "integer",
            "description": "Unique identifier for the harvest",
            "example": 1234567,
            "nullable": false
          },
          "hostname": {
            "type": "string",
            "description": "The hostname this object was retrieved from",
            "example": "ca.metrc.com"
          },
          "dataModel": {
            "type": "string",
            "description": "Name of this object's data model",
            "example": "MetrcPackage"
          },
          "retrievedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp of when this object was pulled from Metrc"
          },
          "licenseNumber": {
            "type": "string",
            "description": "License number used to access this object"
          },
          "index": {
            "type": "string",
            "description": "Describes the current state of this object at the time it was returned from the API. This cannot be used to sort or filter.",
            "example": "ACTIVE_HARVEST",
            "enum": [
              "ACTIVE_HARVEST",
              "ONHOLD_HARVEST",
              "INACTIVE_HARVEST"
            ]
          },
          "facilityLicenseNumber": {
            "type": "string",
            "description": "License number of the facility",
            "example": "1234567890",
            "nullable": true
          },
          "facilityName": {
            "type": "string",
            "description": "Name of the facility",
            "example": "Green Farms",
            "nullable": true
          },
          "name": {
            "type": "string",
            "description": "Name of the harvest",
            "example": "WEDDINGCAKE010124",
            "nullable": false
          },
          "harvestType": {
            "type": "string",
            "description": "Type of the harvest",
            "example": "WholePlant",
            "nullable": false,
            "enum": [
              "WholePlant",
              "PartialPlant",
              "Other"
            ]
          },
          "harvestTypeName": {
            "type": "string",
            "description": "Name of the harvest type",
            "example": "Harvest Batch",
            "nullable": false
          },
          "sourceStrainCount": {
            "type": "integer",
            "description": "Number of source strains",
            "example": 1,
            "nullable": false
          },
          "sourceStrainNames": {
            "type": "string",
            "description": "Names of source strains",
            "example": "Watermelon Gushers",
            "nullable": false
          },
          "multiStrain": {
            "type": "boolean",
            "description": "Indicates if the harvest includes multiple strains",
            "example": false,
            "nullable": false
          },
          "dryingLocationName": {
            "type": "string",
            "description": "Name of the drying location",
            "example": "Drying Room 001",
            "nullable": false
          },
          "dryingLocationTypeName": {
            "type": "string",
            "description": "Type of the drying location",
            "example": "Default Location Type",
            "nullable": false
          },
          "patientLicenseNumber": {
            "type": "string",
            "description": "License number of the patient, if applicable",
            "example": "",
            "nullable": true
          },
          "currentWeight": {
            "type": "number",
            "format": "float",
            "description": "Current weight of the harvest",
            "example": 1915.0,
            "nullable": false
          },
          "totalWasteWeight": {
            "type": "number",
            "format": "float",
            "description": "Total waste weight",
            "example": 740.0,
            "nullable": false
          },
          "plantCount": {
            "type": "integer",
            "description": "Number of plants in the harvest",
            "example": 60,
            "nullable": false
          },
          "totalWetWeight": {
            "type": "number",
            "format": "float",
            "description": "Total wet weight of the harvest",
            "example": 81123.0,
            "nullable": false
          },
          "totalRestoredWeight": {
            "type": "number",
            "format": "float",
            "description": "Total restored weight",
            "example": 0.0,
            "nullable": false
          },
          "packageCount": {
            "type": "integer",
            "description": "Number of packages in the harvest",
            "example": 0,
            "nullable": false
          },
          "totalPackagedWeight": {
            "type": "number",
            "format": "float",
            "description": "Total packaged weight",
            "example": 0.0,
            "nullable": false
          },
          "unitOfWeightId": {
            "type": "integer",
            "description": "Identifier for the unit of weight",
            "example": 4,
            "nullable": false
          },
          "unitOfWeightAbbreviation": {
            "type": "string",
            "description": "Abbreviation of the unit of weight",
            "example": "g",
            "nullable": false
          },
          "labTestingStateName": {
            "type": "string",
            "description": "Lab testing state of the harvest",
            "example": "NotSubmitted",
            "nullable": false,
            "enum": [
              "NotSubmitted",
              "Submitted",
              "InTesting",
              "Passed",
              "Failed"
            ]
          },
          "labTestingStateDate": {
            "type": "string",
            "format": "date-time",
            "description": "Date of the lab testing state",
            "example": "2024-07-26T20:00:00+00:00",
            "nullable": true
          },
          "isOnHold": {
            "type": "boolean",
            "description": "Indicates if the harvest is on hold",
            "example": false,
            "nullable": false
          },
          "harvestStartDate": {
            "type": "string",
            "format": "date",
            "description": "Start date of the harvest",
            "example": "2024-07-18",
            "nullable": false
          },
          "isFinished": {
            "type": "boolean",
            "description": "Indicates if the harvest is finished",
            "example": false,
            "nullable": false
          },
          "finishedDate": {
            "type": "string",
            "format": "date-time",
            "description": "Date when the harvest was finished",
            "nullable": true
          },
          "isArchived": {
            "type": "boolean",
            "description": "Indicates if the harvest is archived",
            "example": false,
            "nullable": false
          },
          "archivedDate": {
            "type": "string",
            "format": "date-time",
            "description": "Date when the harvest was archived",
            "nullable": true
          },
          "isOnTrip": {
            "type": "boolean",
            "description": "Indicates if the harvest is currently being transported",
            "example": false,
            "nullable": false
          },
          "lastModified": {
            "type": "string",
            "format": "date-time",
            "description": "Last modified date of the harvest",
            "example": "2024-07-26T20:00:00+00:00",
            "nullable": false
          }
        }
      },
      "MetrcSalesReceipt": {
        "properties": {
          "id": {
            "type": "integer",
            "description": "Unique identifier for the sale",
            "example": 1234567,
            "nullable": false
          },
          "hostname": {
            "type": "string",
            "description": "The hostname this object was retrieved from",
            "example": "ca.metrc.com"
          },
          "dataModel": {
            "type": "string",
            "description": "Name of this object's data model",
            "example": "MetrcPackage"
          },
          "retrievedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp of when this object was pulled from Metrc"
          },
          "licenseNumber": {
            "type": "string",
            "description": "License number used to access this object"
          },
          "index": {
            "type": "string",
            "description": "Describes the current state of this object at the time it was returned from the API. This cannot be used to sort or filter.",
            "example": "ACTIVE_SALES_RECEIPT",
            "enum": [
              "ACTIVE_SALES_RECEIPT",
              "INACTIVE_SALES_RECEIPT"
            ]
          },
          "receiptNumber": {
            "type": "string",
            "description": "The receipt number associated with the sale",
            "example": "001234567"
          },
          "salesDateTime": {
            "type": "string",
            "format": "date-time",
            "description": "Date and time when the sale occurred",
            "example": "2024-09-05T16:35:00.123"
          },
          "salesCustomerType": {
            "type": "string",
            "description": "Type of customer for the sale",
            "example": "Consumer"
          },
          "salesCustomerTypeName": {
            "type": "string",
            "description": "Name of the customer type",
            "example": "Consumer"
          },
          "patientLicenseNumber": {
            "type": "string",
            "description": "License number of the patient (if applicable)",
            "example": "",
            "nullable": true
          },
          "caregiverLicenseNumber": {
            "type": "string",
            "description": "License number of the caregiver (if applicable)",
            "example": "",
            "nullable": true
          },
          "identificationMethod": {
            "type": "string",
            "description": "Method of identification for the customer",
            "example": "",
            "nullable": true
          },
          "patientRegistrationLocationId": {
            "type": "integer",
            "description": "Location ID for the patient registration",
            "nullable": true
          },
          "totalPackages": {
            "type": "integer",
            "description": "Total number of packages sold",
            "example": 4
          },
          "totalPrice": {
            "type": "number",
            "format": "float",
            "description": "Total price of the sale",
            "example": 113.0
          },
          "transactions": {
            "type": "array",
            "description": "List of transactions included in the sale",
            "items": {
              "type": "object"
            },
            "example": []
          },
          "isFinal": {
            "type": "boolean",
            "description": "Whether the sale is finalized",
            "example": false
          },
          "isArchived": {
            "type": "boolean",
            "description": "Whether the sale is archived",
            "example": false
          },
          "archivedDate": {
            "type": "string",
            "format": "date-time",
            "description": "Date when the sale was archived, if applicable",
            "nullable": true
          },
          "recordedDateTime": {
            "type": "string",
            "format": "date-time",
            "description": "Date and time when the sale was recorded",
            "example": "2024-09-05T21:00:00+00:00"
          },
          "recordedByUserName": {
            "type": "string",
            "description": "The username of the person who recorded the sale",
            "example": "Randy Mcfadden"
          },
          "lastModified": {
            "type": "string",
            "format": "date-time",
            "description": "Date and time when the sale record was last modified",
            "example": "2024-09-05T21:00:00+00:00"
          }
        }
      },
      "MetrcSalesReceiptListResponse": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/Pagination"
          },
          {
            "type": "object",
            "properties": {
              "data": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/MetrcSalesReceipt"
                }
              }
            }
          }
        ]
      },
      "MetrcTransaction": {
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "description": "Unique identifier for the harvest",
            "example": 123467,
            "nullable": false
          },
          "hostname": {
            "type": "string",
            "description": "The hostname this object was retrieved from",
            "example": "ca.metrc.com"
          },
          "dataModel": {
            "type": "string",
            "description": "Name of this object's data model",
            "example": "MetrcPackage"
          },
          "retrievedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp of when this object was pulled from Metrc"
          },
          "licenseNumber": {
            "type": "string",
            "description": "License number used to access this object"
          },
          "packageId": {
            "type": "integer",
            "format": "int64",
            "description": "Unique identifier for the package",
            "example": 123466,
            "nullable": false
          },
          "tripId": {
            "type": "integer",
            "description": "Identifier for the trip (nullable)",
            "nullable": true
          },
          "tripManifestNumber": {
            "type": "string",
            "description": "Trip manifest number (nullable)",
            "nullable": true
          },
          "packageLabel": {
            "type": "string",
            "description": "Label associated with the package",
            "example": "1A4000000000000000000023",
            "nullable": false
          },
          "isPartial": {
            "type": "boolean",
            "description": "Whether the package is partial (nullable)",
            "nullable": true
          },
          "hasPartial": {
            "type": "boolean",
            "description": "Whether the package has a partial item",
            "example": false,
            "nullable": false
          },
          "packageType": {
            "type": "string",
            "description": "Type of the package",
            "example": "Product",
            "nullable": false
          },
          "productName": {
            "type": "string",
            "description": "Name of the product",
            "example": " Pre-Roll - (2pk) 0.5g - Gelato",
            "nullable": false
          },
          "productCategoryName": {
            "type": "string",
            "description": "Category of the product",
            "example": "Raw Preroll (Final Packaging)",
            "nullable": false
          },
          "itemStrainName": {
            "type": "string",
            "description": "Strain name of the product (nullable)",
            "nullable": true
          },
          "itemBrandName": {
            "type": "string",
            "description": "Brand name of the product (nullable)",
            "nullable": true
          },
          "itemUnitCbdPercent": {
            "type": "number",
            "format": "float",
            "description": "Percentage of CBD in the item (nullable)",
            "nullable": true
          },
          "itemUnitCbdContent": {
            "type": "number",
            "format": "float",
            "description": "CBD content in the item (nullable)",
            "nullable": true
          },
          "itemUnitCbdContentUnitOfMeasureAbbreviation": {
            "type": "string",
            "description": "Abbreviation of the CBD content unit of measure (nullable)",
            "nullable": true
          },
          "itemUnitCbdContentDose": {
            "type": "number",
            "format": "float",
            "description": "CBD content dose of the item (nullable)",
            "nullable": true
          },
          "itemUnitCbdContentDoseUnitOfMeasureAbbreviation": {
            "type": "string",
            "description": "Abbreviation of the CBD dose content unit of measure (nullable)",
            "nullable": true
          },
          "itemUnitThcPercent": {
            "type": "number",
            "format": "float",
            "description": "Percentage of THC in the item (nullable)",
            "nullable": true
          },
          "itemUnitThcContent": {
            "type": "number",
            "format": "float",
            "description": "THC content in the item (nullable)",
            "nullable": true
          },
          "itemUnitThcContentUnitOfMeasureAbbreviation": {
            "type": "string",
            "description": "Abbreviation of the THC content unit of measure (nullable)",
            "nullable": true
          },
          "itemUnitThcContentDose": {
            "type": "number",
            "format": "float",
            "description": "THC content dose of the item (nullable)",
            "nullable": true
          },
          "itemUnitThcContentDoseUnitOfMeasureAbbreviation": {
            "type": "string",
            "description": "Abbreviation of the THC dose content unit of measure (nullable)",
            "nullable": true
          },
          "itemUnitVolume": {
            "type": "number",
            "format": "float",
            "description": "Volume of the item (nullable)",
            "nullable": true
          },
          "itemUnitVolumeUnitOfMeasureAbbreviation": {
            "type": "string",
            "description": "Abbreviation of the volume unit of measure (nullable)",
            "nullable": true
          },
          "itemUnitWeight": {
            "type": "number",
            "format": "float",
            "description": "Weight of the item",
            "example": 1.0,
            "nullable": false
          },
          "itemUnitWeightUnitOfMeasureAbbreviation": {
            "type": "string",
            "description": "Abbreviation of the weight unit of measure",
            "example": "g",
            "nullable": false
          },
          "itemServingSize": {
            "type": "string",
            "description": "Serving size of the item",
            "example": "0.5 grams",
            "nullable": false
          },
          "itemSupplyDurationDays": {
            "type": "integer",
            "description": "Supply duration in days (nullable)",
            "nullable": true
          },
          "itemUnitQuantity": {
            "type": "number",
            "format": "float",
            "description": "Quantity of the item (nullable)",
            "nullable": true
          },
          "itemUnitQuantityUnitOfMeasureAbbreviation": {
            "type": "string",
            "description": "Abbreviation of the quantity unit of measure (nullable)",
            "nullable": true
          },
          "quantitySold": {
            "type": "number",
            "format": "float",
            "description": "Quantity of the item sold",
            "example": 1.0,
            "nullable": false
          },
          "unitOfMeasureId": {
            "type": "integer",
            "description": "ID of the unit of measure",
            "example": 1,
            "nullable": false
          },
          "unitOfMeasureName": {
            "type": "string",
            "description": "Name of the unit of measure",
            "example": "Each",
            "nullable": false
          },
          "unitOfMeasureAbbreviation": {
            "type": "string",
            "description": "Abbreviation of the unit of measure",
            "example": "ea",
            "nullable": false
          },
          "unitThcPercent": {
            "type": "number",
            "format": "float",
            "description": "Percentage of THC in the unit (nullable)",
            "nullable": true
          },
          "unitThcContent": {
            "type": "number",
            "format": "float",
            "description": "THC content in the unit (nullable)",
            "nullable": true
          },
          "unitThcContentUnitOfMeasureId": {
            "type": "integer",
            "description": "Unit of measure ID for THC content (nullable)",
            "nullable": true
          },
          "unitWeight": {
            "type": "number",
            "format": "float",
            "description": "Weight of the unit",
            "example": 1.0,
            "nullable": false
          },
          "unitWeightUnitOfMeasureId": {
            "type": "integer",
            "description": "Unit of measure ID for weight",
            "example": 4,
            "nullable": false
          },
          "totalPrice": {
            "type": "number",
            "format": "float",
            "description": "Total price of the sale",
            "example": 0.01,
            "nullable": false
          },
          "salesDeliveryState": {
            "type": "string",
            "description": "Delivery state of the sale (nullable)",
            "nullable": true
          },
          "salesDeliveryStateName": {
            "type": "string",
            "description": "Name of the delivery state (nullable)",
            "nullable": true
          },
          "isTradeSample": {
            "type": "boolean",
            "description": "Whether the sale was a trade sample",
            "example": false,
            "nullable": false
          },
          "isDonation": {
            "type": "boolean",
            "description": "Whether the sale was a donation",
            "example": false,
            "nullable": false
          },
          "isTestingSample": {
            "type": "boolean",
            "description": "Whether the sale was a testing sample",
            "example": false,
            "nullable": false
          },
          "productRequiresRemediation": {
            "type": "boolean",
            "description": "Whether the product requires remediation",
            "example": false,
            "nullable": false
          },
          "containsRemediatedProduct": {
            "type": "boolean",
            "description": "Whether the product contains remediated items",
            "example": false,
            "nullable": false
          },
          "remediationDate": {
            "type": "string",
            "format": "date-time",
            "description": "Date of product remediation (nullable)",
            "nullable": true
          },
          "isArchived": {
            "type": "boolean",
            "description": "Whether the sale is archived",
            "example": false,
            "nullable": false
          },
          "archivedDate": {
            "type": "string",
            "format": "date-time",
            "description": "Date when the sale was archived (nullable)",
            "nullable": true
          },
          "recordedDateTime": {
            "type": "string",
            "format": "date-time",
            "description": "Date and time when the sale was recorded",
            "example": "0001-01-01T00:00:00+00:00",
            "nullable": false
          },
          "recordedByUserName": {
            "type": "string",
            "description": "Username of the person who recorded the sale (nullable)",
            "nullable": true
          },
          "lastModified": {
            "type": "string",
            "format": "date-time",
            "description": "Date and time when the sale was last modified",
            "example": "2024-09-06T20:00:00+00:00",
            "nullable": false
          },
          "invoiceNumber": {
            "type": "string",
            "description": "Invoice number of the sale (nullable)",
            "nullable": true
          },
          "price": {
            "type": "number",
            "format": "float",
            "description": "Price of the sale (nullable)",
            "nullable": true
          },
          "exciseTax": {
            "type": "number",
            "format": "float",
            "description": "Excise tax applied to the sale (nullable)",
            "nullable": true
          },
          "cityTax": {
            "type": "number",
            "format": "float",
            "description": "City tax applied to the sale (nullable)",
            "nullable": true
          },
          "countyTax": {
            "type": "number",
            "format": "float",
            "description": "County tax applied to the sale (nullable)",
            "nullable": true
          },
          "municipalTax": {
            "type": "number",
            "format": "float",
            "description": "Municipal tax applied to the sale (nullable)",
            "nullable": true
          },
          "discountAmount": {
            "type": "number",
            "format": "float",
            "description": "Discount applied to the sale (nullable)",
            "nullable": true
          },
          "subTotal": {
            "type": "number",
            "format": "float",
            "description": "Subtotal of the sale (nullable)",
            "nullable": true
          },
          "salesTax": {
            "type": "number",
            "format": "float",
            "description": "Sales tax applied to the sale (nullable)",
            "nullable": true
          },
          "tradeSampleSaleVerified": {
            "type": "boolean",
            "description": "Whether the trade sample sale was verified (nullable)",
            "nullable": true
          },
          "recallProductSaleVerified": {
            "type": "boolean",
            "description": "Whether the recall product sale was verified (nullable)",
            "nullable": true
          },
          "qrCodeDocument": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "MetrcTransactionListResponse": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/Pagination"
          },
          {
            "type": "object",
            "properties": {
              "data": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/MetrcTransaction"
                }
              }
            }
          }
        ]
      },
      "MetrcHarvestListResponse": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/Pagination"
          },
          {
            "type": "object",
            "properties": {
              "data": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/MetrcHarvest"
                }
              }
            }
          }
        ]
      },
      "MetrcPlantBatch": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Unique identifier for the plant batch.",
            "example": 123456,
            "nullable": false
          },
          "hostname": {
            "type": "string",
            "description": "The hostname this object was retrieved from",
            "example": "ca.metrc.com"
          },
          "dataModel": {
            "type": "string",
            "description": "Name of this object's data model",
            "example": "MetrcPackage"
          },
          "retrievedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp of when this object was pulled from Metrc"
          },
          "licenseNumber": {
            "type": "string",
            "description": "License number used to access this object"
          },
          "index": {
            "type": "string",
            "description": "Describes the current state of this object at the time it was returned from the API. This cannot be used to sort or filter.",
            "example": "ACTIVE_PLANTBATCH",
            "enum": [
              "ACTIVE_PLANTBATCH",
              "ONHOLD_PLANTBATCH",
              "INACTIVE_PLANTBATCH"
            ]
          },
          "name": {
            "type": "string",
            "description": "The name of the plant batch. In CA, this is a plant tag label.",
            "example": "PLNT12345_07.19.24",
            "nullable": false
          },
          "plantBatchTypeName": {
            "type": "string",
            "description": "The type of the plant batch, typically a category or classification.",
            "example": "Clone",
            "nullable": false
          },
          "locationName": {
            "type": "string",
            "description": "The name of the location where the plant batch is stored or processed.",
            "example": "Row 01",
            "nullable": false
          },
          "locationTypeName": {
            "type": "string",
            "description": "The type of location.",
            "example": "Default Location Type",
            "nullable": false
          },
          "strainId": {
            "type": "integer",
            "example": 12345
          },
          "strainName": {
            "type": "string",
            "description": "The name of the strain of the plants.",
            "example": "Wedding Cake",
            "nullable": false
          },
          "patientLicenseNumber": {
            "type": "string",
            "description": "License number of the patient, if applicable.",
            "example": "",
            "nullable": true
          },
          "untrackedCount": {
            "type": "integer",
            "description": "Count of untracked plants in the batch.",
            "example": 6,
            "nullable": false
          },
          "trackedCount": {
            "type": "integer",
            "description": "Count of tracked plants in the batch.",
            "example": 0,
            "nullable": false
          },
          "packagedCount": {
            "type": "integer",
            "description": "Count of packaged plants in the batch.",
            "example": 0,
            "nullable": false
          },
          "destroyedCount": {
            "type": "integer",
            "description": "Count of destroyed plants in the batch.",
            "example": 0,
            "nullable": false
          },
          "sourcePackageLabel": {
            "type": "string",
            "description": "Label of the source package, if available.",
            "nullable": true
          },
          "sourcePlantLabel": {
            "type": "string",
            "description": "Label of the source plant.",
            "example": "1A4000000000000000013099",
            "nullable": true
          },
          "sourcePlantBatchNames": {
            "type": "string",
            "description": "Names of the source plant batches, if any.",
            "example": "",
            "nullable": true
          },
          "multiPlantBatch": {
            "type": "boolean",
            "description": "Indicates if the batch contains multiple plants.",
            "example": false,
            "nullable": false
          },
          "plantedDate": {
            "type": "string",
            "format": "date",
            "description": "The date the plants were planted.",
            "example": "2024-07-19",
            "nullable": false
          },
          "isOnTrip": {
            "type": "boolean",
            "description": "Indicates if the batch is currently on a trip or being transported.",
            "example": false,
            "nullable": false
          },
          "lastModified": {
            "type": "string",
            "format": "date-time",
            "description": "The last modified timestamp for the plant batch data.",
            "example": "2024-07-26T13:00:00+00:00",
            "nullable": false
          },
          "isOnHold": {
            "type": "boolean",
            "description": "Indicates if the batch is currently on hold.",
            "example": false,
            "nullable": false
          }
        }
      },
      "MetrcPlantBatchListResponse": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/Pagination"
          },
          {
            "type": "object",
            "properties": {
              "data": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/MetrcPlantBatch"
                }
              }
            }
          }
        ]
      },
      "MetrcPlant": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Unique identifier for the plant record.",
            "example": 123456
          },
          "hostname": {
            "type": "string",
            "description": "The hostname this object was retrieved from",
            "example": "ca.metrc.com"
          },
          "dataModel": {
            "type": "string",
            "description": "Name of this object's data model",
            "example": "MetrcPackage"
          },
          "retrievedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp of when this object was pulled from Metrc"
          },
          "licenseNumber": {
            "type": "string",
            "description": "License number used to access this object"
          },
          "index": {
            "type": "string",
            "description": "Describes the current state of this object at the time it was returned from the API. This cannot be used to sort or filter.",
            "example": "VEGETATIVE_PLANT",
            "enum": [
              "VEGETATIVE_PLANT",
              "FLOWERING_PLANT",
              "ONHOLD_PLANT",
              "INACTIVE_PLANT"
            ]
          },
          "label": {
            "type": "string",
            "description": "Unique label identifier for the plant.",
            "example": "1A4000000000000000312299"
          },
          "stateName": {
            "type": "string",
            "description": "The current state of the plant.",
            "example": "Tracked",
            "enum": [
              "Tracked",
              "Untracked",
              "Destroyed"
            ]
          },
          "growthPhaseName": {
            "type": "string",
            "description": "The growth phase of the plant.",
            "example": "Flowering",
            "enum": [
              "Germination",
              "Vegetative",
              "Flowering",
              "Harvest"
            ]
          },
          "plantCount": {
            "type": "integer",
            "description": "Number of plants in this record.",
            "example": 1
          },
          "groupTagTypeMax": {
            "type": "integer",
            "description": "Maximum type of group tag.",
            "example": 0
          },
          "tagTypeMax": {
            "type": "integer",
            "description": "Maximum type of tag.",
            "example": 1
          },
          "plantBatchName": {
            "type": "string",
            "description": "Name of the plant batch.",
            "example": "WEDDINGCAKE010124"
          },
          "plantBatchTypeName": {
            "type": "string",
            "description": "Type of the plant batch.",
            "example": "Clone",
            "enum": [
              "Clone",
              "Seed"
            ]
          },
          "strainId": {
            "type": "integer",
            "example": 12345
          },
          "strainName": {
            "type": "string",
            "description": "Name of the plant strain.",
            "example": "Coka"
          },
          "locationName": {
            "type": "string",
            "description": "Name of the location where the plant is situated.",
            "example": "Row 05"
          },
          "locationTypeName": {
            "type": "string",
            "description": "Type of the location.",
            "example": "Default Location Type",
            "enum": [
              "Default Location Type",
              "Greenhouse",
              "Outdoor"
            ]
          },
          "patientLicenseNumber": {
            "type": "string",
            "description": "License number of the patient, if applicable.",
            "example": "",
            "nullable": true
          },
          "harvestCount": {
            "type": "integer",
            "description": "Number of times the plant has been harvested.",
            "example": 0
          },
          "isOnHold": {
            "type": "boolean",
            "description": "Indicates if the plant is on hold.",
            "example": false
          },
          "isOnTrip": {
            "type": "boolean",
            "description": "Indicates if the plant is on a trip.",
            "example": false
          },
          "plantedDate": {
            "type": "string",
            "format": "date",
            "description": "Date when the plant was planted.",
            "example": "2024-04-09"
          },
          "vegetativeDate": {
            "type": "string",
            "format": "date",
            "description": "Date when the plant entered the vegetative stage.",
            "example": "2024-04-30"
          },
          "floweringDate": {
            "type": "string",
            "format": "date",
            "description": "Date when the plant entered the flowering stage.",
            "example": "2024-06-14"
          },
          "destroyedDate": {
            "type": "string",
            "format": "date",
            "description": "Date when the plant was destroyed, if applicable.",
            "nullable": true
          },
          "destroyedNote": {
            "type": "string",
            "description": "Note about the destruction of the plant, if applicable.",
            "nullable": true
          },
          "destroyedByUserName": {
            "type": "string",
            "description": "Username of the person who destroyed the plant, if applicable.",
            "nullable": true
          },
          "lastModified": {
            "type": "string",
            "format": "date-time",
            "description": "The last time the plant record was modified.",
            "example": "2024-07-26T13:00:00+00:00"
          }
        }
      },
      "MetrcPlantListResponse": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/Pagination"
          },
          {
            "type": "object",
            "properties": {
              "data": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/MetrcPlant"
                }
              }
            }
          }
        ]
      },
      "MetrcCreatePackageInputsResponse": {
        "type": "object",
        "properties": {
          "allowedProductionLabTestingStates": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LabTestingStates"
            }
          },
          "allowedProductionProductCategoryIds": {
            "type": "array",
            "items": {
              "type": "integer"
            },
            "example": [
              1,
              2,
              3
            ]
          },
          "details": {
            "type": "string",
            "nullable": true
          },
          "harvestBatches": {
            "type": "string",
            "nullable": true
          },
          "isProductDestruction": {
            "type": "boolean",
            "example": false
          },
          "itemCategoryIds": {
            "type": "string",
            "nullable": true
          },
          "items": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": []
          },
          "labTestBatches": {
            "type": "string",
            "nullable": true
          },
          "locations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MetrcLocation"
            }
          },
          "packages": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": []
          },
          "patientAffiliations": {
            "type": "string",
            "nullable": true
          },
          "plantBatches": {
            "type": "string",
            "nullable": true
          },
          "plants": {
            "type": "string",
            "nullable": true
          },
          "remediationMethods": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MetrcRemediationMethod"
            }
          },
          "submitForTesting": {
            "type": "boolean",
            "example": false
          },
          "tags": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MetrcTag"
            }
          },
          "unitsOfMeasure": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UnitOfMeasure"
            }
          }
        }
      },
      "MetrcAddPackageNotePayload": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "id": {
              "type": "integer",
              "description": "The package ID",
              "example": 12345
            },
            "note": {
              "type": "string",
              "description": "The note to add to this package",
              "example": "This is a package note"
            }
          },
          "required": [
            "id",
            "note"
          ],
          "additionalProperties": false
        }
      },
      "MetrcCreatePackagesFromPackagesPayload": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "actualDate": {
              "type": "string",
              "format": "date",
              "description": "The date of the package creation.",
              "example": "2024-08-08"
            },
            "ingredients": {
              "type": "array",
              "description": "List of package ingredients used to create this new package.",
              "items": {
                "type": "object",
                "properties": {
                  "finishDate": {
                    "type": "string",
                    "format": "date",
                    "description": "If you are using the rest of an ingredient package and wish to finish it, pass a finish date.\n",
                    "example": "2024-08-08"
                  },
                  "packageId": {
                    "type": "integer",
                    "format": "int32",
                    "description": "Package ID of the source ingredient package\nTo find source ingredient packages, use the [Source Packages](#/Create%20Package/get_v2_packages_create_source_packages) endpoint.\n",
                    "example": 5077333
                  },
                  "quantity": {
                    "type": "number",
                    "format": "float",
                    "description": "Quantity used from the ingredient package.",
                    "example": 56.3
                  },
                  "unitOfMeasureId": {
                    "type": "integer",
                    "description": "Unit of measure for the quantity",
                    "example": 4
                  }
                },
                "required": [
                  "packageId",
                  "quantity",
                  "unitOfMeasureId"
                ],
                "additionalProperties": false
              }
            },
            "itemId": {
              "type": "integer",
              "description": "Item ID of the item for the new package\nTo find eligible items, use the [Source Items](#/Create%20Package/get_v2_packages_create_source_items) endpoint.\n",
              "example": 1160223
            },
            "locationId": {
              "type": "integer",
              "description": "Location ID of the location for the new package\nTo find eligible source locations, use the [Create Package Inputs](#/Create%20Package/get_v2_packages_create_inputs) endpoint.\n",
              "example": 50901
            },
            "note": {
              "type": "string",
              "description": "Notes about the package creation, if needed.\n",
              "example": "This is a package note"
            },
            "productionBatchNumber": {
              "type": "string",
              "description": "The production batch number of the new package, if needed.",
              "example": "BATCH 1234"
            },
            "quantity": {
              "type": "number",
              "format": "float",
              "description": "Quantity of the new package.",
              "example": 123.45
            },
            "tagId": {
              "type": "integer",
              "description": "Tag ID of the tag used for the new package\nTo find eligible source tags, use the [Create Package Inputs](#/Create%20Package/get_v2_packages_create_inputs) endpoint.\n",
              "example": 1527333
            },
            "unitOfMeasureId": {
              "type": "integer",
              "description": "Unit of measure identifier for the package.",
              "example": 1
            },
            "expirationDate": {
              "type": "string",
              "format": "date",
              "description": "The expiration date of the package, if needed. \n*Only applicable in some Metrc states*\n",
              "example": ""
            },
            "useByDate": {
              "type": "string",
              "format": "date",
              "description": "The use by date of the package, if needed.\n*Only applicable in some Metrc states*\n",
              "example": ""
            },
            "sellByDate": {
              "type": "string",
              "format": "date",
              "description": "The sell by date of the package, if needed.\n*Only applicable in some Metrc states*\n",
              "example": "2024-08-08"
            }
          },
          "required": [
            "actualDate",
            "ingredients",
            "itemId",
            "locationId",
            "quantity",
            "tagId",
            "unitOfMeasureId"
          ],
          "additionalProperties": false
        }
      },
      "MetrcUnfinalizeSalesPayload": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "id": {
              "type": "integer",
              "description": "The sales receipt ID",
              "example": 12345
            }
          },
          "required": [
            "id"
          ],
          "additionalProperties": false
        }
      },
      "MetrcUnfinishPackagesPayload": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "id": {
              "type": "integer",
              "description": "The package ID",
              "example": 12345
            }
          },
          "required": [
            "id"
          ],
          "additionalProperties": false
        }
      },
      "MetrcVoidSalesReceiptPayload": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "The sales receipt ID",
            "example": 12345
          }
        },
        "required": [
          "id"
        ],
        "additionalProperties": false
      },
      "MetrcDiscontinueItemPayload": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "The item ID",
            "example": 12345
          }
        },
        "required": [
          "id"
        ],
        "additionalProperties": false
      },
      "MetrcCreateTransfersPayload": {
        "type": "array",
        "items": {
          "type": "object",
          "description": "A schema representing a shipment with details about destinations, transporters, and packages.",
          "properties": {
            "destinations": {
              "type": "array",
              "description": "List of destinations for the shipment.",
              "items": {
                "type": "object",
                "properties": {
                  "recipientId": {
                    "type": "number",
                    "format": "int32",
                    "description": "Facility ID of the destination facility.\nTo find eligible destination facilities, use the [Destinations](#/Create%20Transfer/get_v2_packages_create_transfer_destination_list) endpoint.\n",
                    "example": 123456
                  },
                  "plannedRoute": {
                    "type": "string",
                    "description": "Planned route for the shipment.",
                    "example": "Keep going, you can't miss it"
                  },
                  "transferTypeId": {
                    "type": "number",
                    "format": "integer",
                    "description": "Identifier for the type of transfer.",
                    "example": 8
                  },
                  "estimatedDepartureDateTime": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Estimated departure date and time.",
                    "example": "2023-05-23T21:22:35"
                  },
                  "estimatedArrivalDateTime": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Estimated arrival date and time.",
                    "example": "2023-05-23T21:22:35"
                  },
                  "grossWeight": {
                    "type": "number",
                    "format": "float",
                    "description": "Gross weight of the transfer. \n*Only applicable in some Metrc states*\n",
                    "example": 123.45,
                    "nullable": true
                  },
                  "grossUnitOfWeightId": {
                    "type": "number",
                    "format": "integer",
                    "description": "Identifier for the unit of weight.",
                    "example": 4
                  },
                  "transporters": {
                    "type": "array",
                    "description": "List of transporters for the transfer.",
                    "items": {
                      "type": "object",
                      "properties": {
                        "transporterId": {
                          "type": "number",
                          "format": "int32",
                          "description": "Facility ID of the transporter facility. To find eligible transporter facilities, use the [Transporters](#/Create%20Transfer/get_v2_packages_create_transfer_transporter_list) endpoint.",
                          "example": 12345
                        },
                        "phoneNumberForQuestions": {
                          "type": "string",
                          "description": "Phone number for inquiries.",
                          "example": "1231231234"
                        },
                        "transporterDetails": {
                          "type": "array",
                          "description": "Details of the transporter.",
                          "items": {
                            "type": "object",
                            "properties": {
                              "driverName": {
                                "type": "string",
                                "description": "Name of the driver.",
                                "example": "Jane Smith"
                              },
                              "driverOccupationalLicenseNumber": {
                                "type": "string",
                                "description": "Occupational license number of the driver.",
                                "example": "LIC12345"
                              },
                              "driverLicenseNumber": {
                                "type": "string",
                                "description": "Driver's license number.",
                                "example": "F11223-11231123"
                              },
                              "driverLayoverLeg": {
                                "type": "string",
                                "description": "Layover leg details (if any).",
                                "example": "",
                                "nullable": true
                              },
                              "vehicleMake": {
                                "type": "string",
                                "description": "Make of the vehicle.",
                                "example": "Ford"
                              },
                              "vehicleModel": {
                                "type": "string",
                                "description": "Model of the vehicle.",
                                "example": "GT"
                              },
                              "vehicleLicensePlateNumber": {
                                "type": "string",
                                "description": "License plate number of the vehicle.",
                                "example": "G838381"
                              }
                            },
                            "required": [
                              "driverName",
                              "driverOccupationalLicenseNumber",
                              "driverLicenseNumber",
                              "vehicleMake",
                              "vehicleModel",
                              "vehicleLicensePlateNumber"
                            ]
                          }
                        }
                      },
                      "required": [
                        "transporterId",
                        "phoneNumberForQuestions",
                        "transporterDetails"
                      ]
                    }
                  },
                  "packages": {
                    "type": "array",
                    "description": "List of packages in the transfer.",
                    "items": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "number",
                          "format": "integer",
                          "description": "Identifier of the package.",
                          "example": 123456
                        },
                        "wholesalePrice": {
                          "type": "number",
                          "format": "float",
                          "description": "Wholesale price of the package.\n*Only required for wholesale transfers*\n",
                          "example": 200.0,
                          "nullable": true
                        },
                        "grossWeight": {
                          "type": "number",
                          "format": "float",
                          "description": "Gross weight of the package. \n*Only applicable in some Metrc states*\n",
                          "example": 123.45,
                          "nullable": true
                        },
                        "grossUnitOfWeightId": {
                          "type": "number",
                          "format": "integer",
                          "description": "Unit of weight identifier for the package.\n*Only applicable in some Metrc states*\n",
                          "example": 5,
                          "nullable": true
                        }
                      },
                      "required": [
                        "id"
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      },
      "MetrcFacilityListResponse": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/Pagination"
          },
          {
            "type": "object",
            "properties": {
              "data": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/MetrcFacility"
                }
              }
            }
          }
        ]
      },
      "MetrcFacility": {
        "type": "object",
        "description": "A schema representing a facility with various details including license, address, and contact information.",
        "properties": {
          "licenseNumber": {
            "type": "string",
            "description": "License number of the facility.",
            "example": "LIC00001"
          },
          "facilityName": {
            "type": "string",
            "description": "Name of the facility.",
            "example": "Example Facilitiy LLC"
          },
          "id": {
            "type": "integer",
            "description": "Unique identifier of the facility.",
            "example": 1234,
            "format": "int32"
          },
          "facilityTypeName": {
            "type": "string",
            "description": "Type of the facility.",
            "example": "Example Cultivator"
          },
          "facilityType": {
            "type": "string",
            "description": "Type code of the facility.",
            "nullable": true
          },
          "physicalAddress": {
            "type": "object",
            "description": "Physical address of the facility.",
            "properties": {
              "id": {
                "type": "integer",
                "description": "Unique identifier of the address.",
                "example": 53213,
                "format": "int32"
              },
              "licenseId": {
                "type": "integer",
                "description": "License identifier associated with the address.",
                "example": 0,
                "format": "int32"
              },
              "addressType": {
                "type": "string",
                "description": "Type of the address (e.g., Physical).",
                "example": "Physical"
              },
              "recipient": {
                "type": "string",
                "description": "Name of the recipient at the address.",
                "example": ""
              },
              "contactPhoneNumber": {
                "type": "string",
                "description": "Contact phone number for the address.",
                "nullable": true
              },
              "street1": {
                "type": "string",
                "description": "First line of the street address.",
                "example": "1 EXAMPLE DR"
              },
              "street2": {
                "type": "string",
                "description": "Second line of the street address (optional).",
                "example": ""
              },
              "street3": {
                "type": "string",
                "description": "Third line of the street address (optional).",
                "example": ""
              },
              "street4": {
                "type": "string",
                "description": "Fourth line of the street address (optional).",
                "example": ""
              },
              "city": {
                "type": "string",
                "description": "City of the address.",
                "example": "DETROIT"
              },
              "county": {
                "type": "string",
                "description": "County of the address.",
                "example": "Detroit"
              },
              "state": {
                "type": "string",
                "description": "State of the address.",
                "example": "MI"
              },
              "postalCode": {
                "type": "string",
                "description": "Postal code of the address.",
                "example": "12345"
              },
              "country": {
                "type": "string",
                "description": "Country of the address (optional).",
                "example": ""
              },
              "assessorParcelNumber": {
                "type": "string",
                "description": "Assessor parcel number for the address (optional).",
                "example": ""
              },
              "isDefaultShippingAddress": {
                "type": "boolean",
                "description": "Indicates whether the address is the default shipping address.",
                "example": false
              },
              "isValidated": {
                "type": "boolean",
                "description": "Indicates whether the address has been validated.",
                "example": false
              },
              "isArchived": {
                "type": "boolean",
                "description": "Indicates whether the address is archived.",
                "example": false
              }
            }
          },
          "mainPhoneNumber": {
            "type": "string",
            "description": "Main phone number of the facility.",
            "example": "1231231234"
          },
          "mobilePhoneNumber": {
            "type": "string",
            "description": "Mobile phone number of the facility.",
            "nullable": true
          }
        }
      },
      "MetrcDriver": {
        "type": "object",
        "properties": {
          "driversLicenseNumber": {
            "type": "string",
            "description": "Driver's license number.",
            "example": "LIC-99991"
          },
          "employeeId": {
            "type": "string",
            "description": "Employee identifier.",
            "example": "EMPL9991"
          },
          "facilityId": {
            "type": "integer",
            "description": "Facility identifier.",
            "example": 12345
          },
          "id": {
            "type": "integer",
            "description": "Unique identifier for the driver.",
            "example": 12345
          },
          "isArchived": {
            "type": "boolean",
            "description": "Indicates if the driver is archived.",
            "example": false
          },
          "lastModified": {
            "type": "string",
            "description": "Date and time the driver information was last modified.",
            "format": "date-time",
            "example": "2023-02-07T15:27:12+00:00"
          },
          "name": {
            "type": "string",
            "description": "Name of the driver.",
            "example": "Joe Smith"
          }
        }
      },
      "MetrcVehicle": {
        "type": "object",
        "properties": {
          "facilityId": {
            "type": "integer",
            "description": "Facility identifier.",
            "example": 17201
          },
          "id": {
            "type": "integer",
            "description": "Unique identifier for the vehicle.",
            "example": 32901
          },
          "isArchived": {
            "type": "boolean",
            "description": "Indicates if the vehicle is archived.",
            "example": false
          },
          "lastModified": {
            "type": "string",
            "description": "Date and time the vehicle information was last modified.",
            "format": "date-time",
            "example": "2022-06-16T07:43:23-05:00"
          },
          "licensePlateNumber": {
            "type": "string",
            "description": "License plate number of the vehicle.",
            "example": "LH7N4A"
          },
          "make": {
            "type": "string",
            "description": "Make of the vehicle.",
            "example": "2022 Ford 'Supersonic'"
          },
          "model": {
            "type": "string",
            "description": "Model of the vehicle.",
            "example": "Transit Connect"
          }
        }
      },
      "MetrcPackageReportResponse": {
        "properties": {
          "generatedAt": {
            "type": "string",
            "format": "date-time",
            "example": "2024-07-25T00:00:00+00:00"
          },
          "filters": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "label__endswith:0003",
              "item.name__contains:kush"
            ]
          },
          "filterLogic": {
            "type": "string",
            "description": "The filter logic specified for this report, if any",
            "example": "and",
            "nullable": true
          },
          "sort": {
            "type": "string",
            "description": "The sort order specified for this report, if any",
            "example": "label:asc",
            "nullable": true
          },
          "licenseNumber": {
            "type": "string",
            "description": "The unique identifier for the license associated with this request.",
            "example": "LIC-00001"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MetrcPackage"
            }
          }
        }
      },
      "MetrcPlantReportResponse": {
        "properties": {
          "generatedAt": {
            "type": "string",
            "format": "date-time",
            "example": "2024-07-25T00:00:00+00:00"
          },
          "filters": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "label__endswith:0003",
              "item.name__contains:kush"
            ]
          },
          "filterLogic": {
            "type": "string",
            "description": "The filter logic specified for this report, if any",
            "example": "and",
            "nullable": true
          },
          "sort": {
            "type": "string",
            "description": "The sort order specified for this report, if any",
            "example": "label:asc",
            "nullable": true
          },
          "licenseNumber": {
            "type": "string",
            "description": "The unique identifier for the license associated with this request.",
            "example": "LIC-00001"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MetrcPlant"
            }
          }
        }
      },
      "MetrcPlantBatchReportResponse": {
        "properties": {
          "generatedAt": {
            "type": "string",
            "format": "date-time",
            "example": "2024-07-25T00:00:00+00:00"
          },
          "filters": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "name__endswith:0003",
              "strainName__contains:kush"
            ]
          },
          "filterLogic": {
            "type": "string",
            "description": "The filter logic specified for this report, if any",
            "example": "and",
            "nullable": true
          },
          "sort": {
            "type": "string",
            "description": "The sort order specified for this report, if any",
            "example": "label:asc",
            "nullable": true
          },
          "licenseNumber": {
            "type": "string",
            "description": "The unique identifier for the license associated with this request.",
            "example": "LIC-00001"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MetrcPlantBatch"
            }
          }
        }
      },
      "MetrcHarvestReportResponse": {
        "properties": {
          "generatedAt": {
            "type": "string",
            "format": "date-time",
            "example": "2024-07-25T00:00:00+00:00"
          },
          "filters": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "name__endswith:0003",
              "name__contains:kush"
            ]
          },
          "filterLogic": {
            "type": "string",
            "description": "The filter logic specified for this report, if any",
            "example": "and",
            "nullable": true
          },
          "sort": {
            "type": "string",
            "description": "The sort order specified for this report, if any",
            "example": "label:asc",
            "nullable": true
          },
          "licenseNumber": {
            "type": "string",
            "description": "The unique identifier for the license associated with this request.",
            "example": "LIC-00001"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MetrcHarvest"
            }
          }
        }
      },
      "MetrcSalesReceiptReportResponse": {
        "properties": {
          "generatedAt": {
            "type": "string",
            "format": "date-time",
            "example": "2024-07-25T00:00:00+00:00"
          },
          "filters": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "receiptNumber__endswith:0003"
            ]
          },
          "filterLogic": {
            "type": "string",
            "description": "The filter logic specified for this report, if any",
            "example": "and",
            "nullable": true
          },
          "sort": {
            "type": "string",
            "description": "The sort order specified for this report, if any",
            "example": "receiptNumber:asc",
            "nullable": true
          },
          "licenseNumber": {
            "type": "string",
            "description": "The unique identifier for the license associated with this request.",
            "example": "LIC-00001"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MetrcSalesReceipt"
            }
          }
        }
      },
      "IncomingTransferManifestReportResponse": {
        "properties": {
          "generatedAt": {
            "type": "string",
            "format": "date-time",
            "example": "2024-07-25T00:00:00+00:00"
          },
          "filters": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "manifestNumber__endswith:0003",
              "productName__contains:kush"
            ]
          },
          "filterLogic": {
            "type": "string",
            "description": "The filter logic specified for this report, if any",
            "example": "and",
            "nullable": true
          },
          "sort": {
            "type": "string",
            "description": "The sort order specified for this report, if any",
            "example": "label:asc",
            "nullable": true
          },
          "licenseNumber": {
            "type": "string",
            "description": "The unique identifier for the license associated with this request.",
            "example": "LIC-00001"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/T3IncomingTransferManifest"
            }
          }
        }
      },
      "OutgoingTransferManifestReportResponse": {
        "properties": {
          "generatedAt": {
            "type": "string",
            "format": "date-time",
            "example": "2024-07-25T00:00:00+00:00"
          },
          "filters": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "manifestNumber__endswith:0003",
              "productName__contains:kush"
            ]
          },
          "filterLogic": {
            "type": "string",
            "description": "The filter logic specified for this report, if any",
            "example": "and",
            "nullable": true
          },
          "sort": {
            "type": "string",
            "description": "The sort order specified for this report, if any",
            "example": "label:asc",
            "nullable": true
          },
          "licenseNumber": {
            "type": "string",
            "description": "The unique identifier for the license associated with this request.",
            "example": "LIC-00001"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/T3OutgoingTransferManifest"
            }
          }
        }
      }
    }
  },
  "openapi": "3.0.2",
  "servers": [
    {
      "url": "https://api.trackandtrace.tools"
    }
  ],
  "security": [
    {
      "BearerAuth": []
    }
  ]
}